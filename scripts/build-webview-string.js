#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { WEBVIEW_PATHS } = require('../config/webview-paths');

// Ensure generated directory exists
if (!fs.existsSync(WEBVIEW_PATHS.distDir)) {
  fs.mkdirSync(WEBVIEW_PATHS.distDir, { recursive: true });
}

function buildWebViewString() {
  try {
    if (!fs.existsSync(WEBVIEW_PATHS.viteOutputHtml)) {
      console.error('HTML file not found. Please run the UI build first.');
      process.exit(1);
    }

    // Read the HTML file
    const htmlContent = fs.readFileSync(WEBVIEW_PATHS.viteOutputHtml, 'utf8');
    
    // Escape the HTML content for JavaScript
    const escapedHtml = htmlContent
      .replace(/\\/g, '\\\\')
      .replace(/`/g, '\\`')
      .replace(/\${/g, '\\${');
    
    // Write the HTML content as a Metro asset
    const assetPath = path.join(__dirname, '../src/apps/android/assets/webview-content.html');
    fs.writeFileSync(assetPath, htmlContent, 'utf8');
    
    // Keep CommonJS version for backward compatibility during migration
    const jsContent = `// Auto-generated WebView HTML content (legacy fallback)
// Do not edit this file directly - it will be overwritten
module.exports = \`${escapedHtml}\`;
`;
    fs.writeFileSync(WEBVIEW_PATHS.webviewContentJs, jsContent, 'utf8');
    
    console.log('‚úÖ WebView HTML string generated successfully');
    console.log(`üìÅ Metro Asset Output: ${assetPath}`);
    console.log(`üìÅ Legacy CommonJS Output: ${WEBVIEW_PATHS.webviewContentJs}`);
  } catch (error) {
    console.error('‚ùå Error building WebView string:', error);
    process.exit(1);
  }
}

buildWebViewString();