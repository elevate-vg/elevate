TITLE: Install Expo CLI with Yarn
DESCRIPTION: This command installs the `expo` package, which includes the Expo CLI, using the Yarn package manager. This is the recommended way to add Expo CLI to your project for development, ensuring all necessary tools are available.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#_snippet_3

LANGUAGE: sh
CODE:
```
$ yarn add expo
```

----------------------------------------

TITLE: Problematic Expo Router Root Layout with Conditional Logic
DESCRIPTION: This `_layout.tsx` example demonstrates a problematic pattern where conditional rendering (`isLoading`) and a navigation event (`router.push`) are placed directly in the root layout. This can lead to errors because navigation might occur before the root layout's content (`Slot`) is fully mounted.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication-rewrites.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
export default function RootLayout() {
  React.useEffect(() => {
    // This navigation event will trigger the error above.
    router.push('/about');
  }, []);

  // This conditional statement creates a problem since the root layout's
  // content (the Slot) must be mounted before any navigation events occur.
  if (isLoading) {
    return <Text>Loading...</Text>;
  }

  return <Slot />;
}
```

----------------------------------------

TITLE: Conditional Redirect with Authentication Check in Expo Router (TSX)
DESCRIPTION: This example illustrates how to use the `<Redirect />` component conditionally within a React component. It simulates an authentication check using `useState` and `useEffect`; if the user is not authenticated, they are redirected to the `/login` page, otherwise, the protected content is displayed.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/redirects.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Redirect } from 'expo-router';
import { useState, useEffect } from 'react';

export default function ProtectedPage() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    // Simulate checking authentication status
    setTimeout(() => setIsAuthenticated(true), 2000);
  }, []);

  if (!isAuthenticated) {
    return <Redirect href="/login" />;
  }

  return <Text>Welcome to the protected page!</Text>;
}
```

----------------------------------------

TITLE: Creating a New Expo Project with npx
DESCRIPTION: This command initializes a new Expo project using `create-expo-app`, a command-line tool that sets up a basic Expo application with all necessary dependencies. It is the recommended way to start a new Expo project for development.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/introduction.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npx create-expo-app
```

----------------------------------------

TITLE: Client Component Calling Inline Server Function in Expo
DESCRIPTION: This client component (`app/index.tsx`) demonstrates calling an inline server function directly within an event handler (`onPress`). The `'use server'` directive within the anonymous async function ensures that the `console.log` statement executes on the server.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
export default function Index() {
  return (
    <Button
      title="Press me"
      onPress={async () => {
        'use server';
        // This code runs on the server.
        console.log('Button pressed');
        return '...';
      }}
    />
  );
}
```

----------------------------------------

TITLE: Import Expo SDK Packages in JavaScript
DESCRIPTION: Illustrates the syntax for importing installed Expo SDK packages into your JavaScript or TypeScript code. This step is crucial for accessing the functionalities provided by packages like `expo-camera`, `expo-contacts`, and `expo-sensors` within your application logic.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/index.mdx#_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { CameraView } from 'expo-camera';
import * as Contacts from 'expo-contacts';
import { Gyroscope } from 'expo-sensors';
```

----------------------------------------

TITLE: Create an iOS Production Build with EAS CLI
DESCRIPTION: Executes the EAS CLI command to initiate an iOS production build. This command uses the default 'production' profile and queues the build on the EAS dashboard, automatically incrementing the build number.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-production-build.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
$ eas build --platform ios
```

----------------------------------------

TITLE: Creating New Expo Project with Yarn
DESCRIPTION: This command initializes a new Expo and React Native project using `yarn create`. It's the recommended way to start a new project with Yarn, leveraging Yarn's package creation capabilities.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#_snippet_1

LANGUAGE: Yarn
CODE:
```
$ yarn create expo-app
```

----------------------------------------

TITLE: Create New Expo Project
DESCRIPTION: Initializes a new React Native project using the latest version of `create-expo-app`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/get-started.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: Clearing Bundler Caches with Expo CLI and Yarn
DESCRIPTION: This set of commands clears various development caches for an Expo CLI project using Yarn. It removes `node_modules`, cleans the global Yarn cache, reinstalls dependencies, resets Watchman, clears temporary Metro/Haste-map caches, and finally restarts the Expo development server with a cleared JavaScript transformation cache.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
# With Yarn workspaces, you may need to delete node_modules in each workspace
$ rm -rf node_modules

$ yarn cache clean

$ yarn

$ watchman watch-del-all

$ rm -fr $TMPDIR/haste-map-*

$ rm -rf $TMPDIR/metro-cache

$ npx expo start --clear
```

----------------------------------------

TITLE: Create a New Expo React Native Project
DESCRIPTION: Illustrates the command to create a new React Native project with built-in Expo SDK support using `npx create-expo-app`. The `--template bare-minimum` option creates a basic project structure, ready for Expo SDK package integration.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
npx create-expo-app my-app --template bare-minimum
```

----------------------------------------

TITLE: Initial Expo App Configuration (app.json)
DESCRIPTION: This snippet shows the initial `app.json` configuration for an Expo project, defining the app's name, slug, and default bundle identifiers for iOS and Android. This configuration serves as the starting point before implementing app variants.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    "name": "MyApp",
    "slug": "my-app",
    "ios": {
      "bundleIdentifier": "com.myapp"
    },
    "android": {
      "package": "com.myapp"
    }
  }
}
```

----------------------------------------

TITLE: Expo React Hook for Secure Storage (useStorageState.ts)
DESCRIPTION: This React hook provides a way to securely persist tokens across app sessions. It uses `expo-secure-store` for native platforms and `localStorage` for web, ensuring data persistence and retrieval. It exposes a state tuple `[isLoading, value]` and a setter function.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import  { useEffect, useCallback, useReducer } from 'react';
import * as SecureStore from 'expo-secure-store';
import { Platform } from 'react-native';

type UseStateHook<T> = [[boolean, T | null], (value: T | null) => void];

function useAsyncState<T>(
  initialValue: [boolean, T | null] = [true, null],
): UseStateHook<T> {
  return useReducer(
    (state: [boolean, T | null], action: T | null = null): [boolean, T | null] => [false, action],
    initialValue
  ) as UseStateHook<T>;
}

export async function setStorageItemAsync(key: string, value: string | null) {
  if (Platform.OS === 'web') {
    try {
      if (value === null) {
        localStorage.removeItem(key);
      } else {
        localStorage.setItem(key, value);
      }
    } catch (e) {
      console.error('Local storage is unavailable:', e);
    }
  } else {
    if (value == null) {
      await SecureStore.deleteItemAsync(key);
    } else {
      await SecureStore.setItemAsync(key, value);
    }
  }
}

export function useStorageState(key: string): UseStateHook<string> {
  // Public
  const [state, setState] = useAsyncState<string>();

  // Get
  useEffect(() => {
    if (Platform.OS === 'web') {
      try {
        if (typeof localStorage !== 'undefined') {
          setState(localStorage.getItem(key));
        }
      } catch (e) {
        console.error('Local storage is unavailable:', e);
      }
    } else {
      SecureStore.getItemAsync(key).then(value => {
        setState(value);
      });
    }
  }, [key]);

  // Set
  const setValue = useCallback(
    (value: string | null) => {
      setState(value);
      setStorageItemAsync(key, value);
    },
    [key]
  );

  return [state, setValue];
}
```

----------------------------------------

TITLE: Define Bottom Tab Layout (Expo Router)
DESCRIPTION: This TypeScript/React code defines the bottom tab layout in `app/(tabs)/_layout.tsx`. It uses the `Tabs` component from `expo-router` to create the tab bar and `Tabs.Screen` components to define individual tabs, linking them to specific routes like 'Home' and 'About' and setting their display titles.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Tabs } from 'expo-router';

export default function TabLayout() {
  return (
    <Tabs>
      /* @tutinfo <CODE>Tabs.Screen</CODE> component works in a similar way and accepts same props as <CODE>Stack.Screen</CODE> component. The only difference is the navigation pattern on the device. */
      <Tabs.Screen name="index" options={{ title: 'Home' }} />
      <Tabs.Screen name="about" options={{ title: 'About' }} />
      /* @end */
    </Tabs>
  );
}
```

----------------------------------------

TITLE: Creating New Expo Project with npm
DESCRIPTION: This command initializes a new Expo and React Native project using `npx` and the latest version of `create-expo-app`. It's the recommended way to start a new project with npm, fetching the tool directly without global installation.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#_snippet_0

LANGUAGE: npm
CODE:
```
$ npx create-expo-app@latest
```

----------------------------------------

TITLE: Installing React and React DOM Packages
DESCRIPTION: This command installs the `react` and `react-dom` packages from npm, which are essential for developing React applications. `react` provides the core React functionalities, while `react-dom` handles DOM-specific operations for browser environments and server-side rendering.
SOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/static/canary-full/react-dom/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install react react-dom
```

----------------------------------------

TITLE: Downloading Files with expo-file-system in JavaScript
DESCRIPTION: This snippet demonstrates how to download files using `FileSystem.createDownloadResumable`, track download progress, and manage the download lifecycle including pausing, resuming, and persisting download state across app restarts using `AsyncStorage`. It requires `expo-file-system` and `AsyncStorage` (or a similar persistence mechanism).
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
const callback = downloadProgress => {
  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;
  this.setState({
    downloadProgress: progress,
  });
};

const downloadResumable = FileSystem.createDownloadResumable(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4',
  {},
  callback
);

try {
  const { uri } = await downloadResumable.downloadAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

try {
  await downloadResumable.pauseAsync();
  console.log('Paused download operation, saving for future retrieval');
  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));
} catch (e) {
  console.error(e);
}

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:
const downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');
const downloadSnapshot = JSON.parse(downloadSnapshotJson);
const downloadResumable = new FileSystem.DownloadResumable(
  downloadSnapshot.url,
  downloadSnapshot.fileUri,
  downloadSnapshot.options,
  callback,
  downloadSnapshot.resumeData
);

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}
```

----------------------------------------

TITLE: Imperative Navigation with useRouter Hook in Expo Router
DESCRIPTION: Demonstrates how to use the `useRouter` hook for programmatic navigation in Expo Router. This method allows you to navigate to new pages, push screens onto the stack, go back, or replace the current page using functions like `router.navigate`, `router.push`, `router.back`, and `router.replace`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useRouter } from 'expo-router';
import { Button } from 'react-native';

export default function Home() {
  const router = useRouter();

  return <Button onPress={() => router.navigate('/about')}>Go to About</Button>;
}
```

----------------------------------------

TITLE: Initialize New Expo Project
DESCRIPTION: Use this command to quickly set up a new Expo project on your machine, providing a starting point for your mobile application development.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/follow-up.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: Installing Expo Network Package (npm)
DESCRIPTION: This command adds the `expo-network` package to your project's `npm` dependencies. It's the standard way to install Expo modules in both managed and bare React Native projects, ensuring compatibility with your current Expo SDK version.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-network/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
npx expo install expo-network
```

----------------------------------------

TITLE: Installing expo-live-photo NPM Package
DESCRIPTION: This command adds the `expo-live-photo` package to your project's `npm` dependencies. It is a fundamental step required before configuring the library for specific platforms like Android or iOS.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-live-photo/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install expo-live-photo
```

----------------------------------------

TITLE: Installing Expo Haptics Package with npm
DESCRIPTION: This command adds the `expo-haptics` package to your project's npm dependencies. It's the first step for integrating haptic feedback capabilities into your application, ensuring the module is available for use in both managed Expo and bare React Native projects.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-haptics/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo install expo-haptics
```

----------------------------------------

TITLE: Create a new Expo Router project
DESCRIPTION: This command initializes a new Expo project using the latest version of `create-expo-app`. It sets up a basic 'Hello world' app, creating a new directory with the specified project name, ready for further development and deployment.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/get-started.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest my-app
```

----------------------------------------

TITLE: Start Expo Development Server
DESCRIPTION: Initiate the development server for your Expo project by executing the `npx expo start` command in your terminal.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
$ npx expo start
```

----------------------------------------

TITLE: Create Sign-In Screen with Expo Router
DESCRIPTION: This component provides a sign-in interface for an Expo Router application. It uses `useSession().signIn()` to authenticate the user and then navigates to the root (`/`) after successful sign-in. Being outside the `(app)` group, it's accessible to logged-out users without triggering authentication checks.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication-rewrites.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { router } from 'expo-router';
import { Text, View } from 'react-native';

import { useSession } from '../ctx';

export default function SignIn() {
  const { signIn } = useSession();
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text
        onPress={() => {
          signIn();
          // Navigate after signing in. You may want to tweak this to ensure sign-in is
          // successful before navigating.
          router.replace('/');
        }}>
        Sign In
      </Text>
    </View>
  );
}
```

----------------------------------------

TITLE: Configuring EAS Build Channels in eas.json
DESCRIPTION: This eas.json configuration defines different build profiles (production, staging, preview) and their corresponding update channels. It ensures that builds for specific environments target the correct update channel, with the "preview" channel also specifying "internal" distribution for testing.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/deployment.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "build": {
    "production": {
      "channel": "production"
    },
    "staging": {
      "channel": "staging"
    },
    "preview": {
      "channel": "preview",
      "distribution": "internal"
    }
  }
}
```

----------------------------------------

TITLE: Sending APNS Notification via HTTP/2 (Node.js)
DESCRIPTION: This snippet shows how to establish an HTTP/2 connection to the APNS server and send a push notification request. It uses the `http2` module, the authorization token generated previously, the device token, and the bundle identifier as the topic. The payload includes the alert message and required fields for Expo Go testing.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#_snippet_6

LANGUAGE: javascript
CODE:
```
const http2 = require('http2');

const client = http2.connect(
  IS_PRODUCTION ? 'https://api.push.apple.com' : 'https://api.sandbox.push.apple.com'
);

const request = client.request({
  ':method': 'POST',
  ':scheme': 'https',
  'apns-topic': 'YOUR-BUNDLE-IDENTIFIER',
  ':path': '/3/device/' + nativeDeviceToken, // This is the native device token you grabbed client-side
  authorization: `bearer ${authorizationToken}` // This is the JSON web token generated in the "Authorization" step
});
request.setEncoding('utf8');

request.write(
  JSON.stringify({
    aps: {
      alert: {
        title': "\uD83D\uDCE7 You've got mail!",
        body: 'Hello world! \uD83C\uDF10'
      }
    },
    experienceId: '@yourExpoUsername/yourProjectSlug', // Required when testing in the Expo Go app
    scopeKey: '@yourExpoUsername/yourProjectSlug' // Required when testing in the Expo Go app
  })
);
request.end();
```

----------------------------------------

TITLE: Start Expo Development Server
DESCRIPTION: This command initiates a local development server for an Expo project, typically on `http://localhost:8081`. It uses Metro as the default bundler and provides a Terminal UI for interaction, displaying a QR code and keyboard shortcuts.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npx expo start
```

----------------------------------------

TITLE: Full Push Notification Example with Expo
DESCRIPTION: This comprehensive example demonstrates how to set up and handle push notifications in an Expo React Native application. It includes registering for push tokens, scheduling local notifications, listening for incoming notifications, and handling notification responses. It also manages Android notification channels and checks device compatibility.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants;

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
    undefined
  );
  const notificationListener = useRef<Notifications.Subscription>();
  const responseListener = useRef<Notifications.Subscription>();

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));

    if (Platform.OS === 'android') {
      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));
    }
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.current &&
        Notifications.removeNotificationSubscription(notificationListener.current);
      responseListener.current &&
        Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-around',
      }}>
      <Text>Your expo push token: {expoPushToken}</Text>
      <Text>{`Channels: ${JSON.stringify(
        channels.map(c => c.id),
        null,
        2
      )}`}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to schedule a notification"
        onPress={async () => {
          await schedulePushNotification();
        }}
      />
    </View>
  );
}

async function schedulePushNotification() {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "You've got mail! 📬",
      body: 'Here is the notification body',
      data: { data: 'goes here', test: { test1: 'more data' } },
    },
    trigger: { seconds: 2 },
  });
}

async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    // Learn more about projectId:
    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid
    // EAS projectId is used here.
    try {
      const projectId =
        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
      if (!projectId) {
        throw new Error('Project ID not found');
      }
      token = (
        await Notifications.getExpoPushTokenAsync({
          projectId,
        })
      ).data;
      console.log(token);
    } catch (e) {
      token = `${e}`;
    }
  } else {
    alert('Must use physical device for Push Notifications');
  }

  return token;
}
```

----------------------------------------

TITLE: Declarative Navigation with Expo Router Link Component
DESCRIPTION: Shows the basic usage of the `Link` component in Expo Router for declarative navigation, similar to HTML anchor tags. The `href` prop specifies the target URL, enabling users to tap on the wrapped content to navigate to another page.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { View } from 'react-native';
/* @info Import the <CODE>Link</CODE> React component from <CODE>expo-router</CODE>. */
import { Link } from 'expo-router';
/* @end */

export default function Page() {
  return (
    <View>
      /* @info Tapping this will link to the <strong>about</strong> page. */
      <Link href="/about">About</Link>
      /* @end */
    </View>
  );
}
```

----------------------------------------

TITLE: Minimal Expo App Configuration (app.json)
DESCRIPTION: A basic `app.json` example demonstrating the minimum required properties (`name` and `slug`) for an Expo project's configuration file. This file must be located at the root of your project, next to `package.json`, and defines essential project metadata.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "name": "My app",
  "slug": "my-app"
}
```

----------------------------------------

TITLE: Display Login Modal for Unauthenticated Users in Expo Router Layout
DESCRIPTION: This snippet demonstrates how to integrate a login modal directly into an Expo Router layout file. It uses a `SafeAreaView` and `Stack` for the main app content, and conditionally renders a `Modal` based on the user's authentication status. This pattern allows unauthenticated users to browse the app in read-only mode while prompting them to log in via an overlay.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { SafeAreaView, Modal } from 'react-native';
import { Stack } from 'expo-router';

export default function Layout() {
  const isAuthenticated = /* check for valid auth token / session */

  return (
    <SafeAreaView>
      <Stack />
      <Modal visible={!isAuthenticated}>{/* login UX */}</Modal>
    </SafeAreaView>
  );
}
```

----------------------------------------

TITLE: Start Expo Development Server for Mobile and Web
DESCRIPTION: This command initiates the Expo development server, displaying a QR code for mobile device scanning and enabling web app launch. It's the essential first step to run an Expo application across Android, iOS, and web platforms.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#_snippet_2

LANGUAGE: Terminal
CODE:
```
npx expo start
```

----------------------------------------

TITLE: Implement Image Picker and Assign to Button in React Native
DESCRIPTION: This TypeScript snippet demonstrates how to integrate `expo-image-picker` into an Expo application. It defines an asynchronous function `pickImageAsync` to launch the image library, configure selection options, and handle the result. This function is then assigned to the `onPress` prop of the primary `Button` component, enabling image selection upon button press.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/image-picker.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

import Button from '@/components/Button';
import ImageViewer from '@/components/ImageViewer';

const PlaceholderImage = require('@/assets/images/background-image.png');

export default function Index() {
  const pickImageAsync = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images'],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      console.log(result);
    } else {
      alert('You did not select any image.');
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.imageContainer}>
        <ImageViewer imgSource={PlaceholderImage} />
      </View>
      <View style={styles.footerContainer}>
        <Button theme="primary" label="Choose a photo" onPress={pickImageAsync} />
        <Button label="Use this photo" />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
  },
  imageContainer: {
    flex: 1,
  },
  footerContainer: {
    flex: 1 / 3,
    alignItems: 'center',
  },
});
```

----------------------------------------

TITLE: Initialize a new Expo app with create-expo-app
DESCRIPTION: This command uses `create-expo-app` to initialize a new React Native project named 'StickerSmash' and then navigates into its directory. The default template includes essential boilerplate code and libraries like Expo Router, and is configured for multiple platforms.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-expo-app@latest StickerSmash && cd StickerSmash
```

----------------------------------------

TITLE: Configuring Multiple Build Profiles for EAS Build (JSON)
DESCRIPTION: This JSON snippet illustrates how to define multiple build profiles within `eas.json` for EAS Build. It demonstrates profile inheritance using `extends`, setting global and platform-specific environment variables, and configuring build behaviors like development client, distribution, and simulator usage for Android and iOS.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/json.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "build": {
    "base": {
      "node": "12.13.0",
      "yarn": "1.22.5",
      "env": {
        "EXAMPLE_ENV": "example value"
      },
      "android": {
        "image": "default",
        "env": {
          "PLATFORM": "android"
        }
      },
      "ios": {
        "image": "latest",
        "env": {
          "PLATFORM": "ios"
        }
      }
    },
    "development": {
      "extends": "base",
      "developmentClient": true,
      "env": {
        "ENVIRONMENT": "development"
      },
      "android": {
        "distribution": "internal",
        "withoutCredentials": true
      },
      "ios": {
        "simulator": true
      }
    },
    "staging": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "staging"
      },
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "production": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "production"
      }
    }
  }
}
```

----------------------------------------

TITLE: Starting Expo Development Server (Shell)
DESCRIPTION: This command initiates the local development server for an Expo project. Running `npx expo start` makes the application accessible on connected Android emulators, iOS simulators, or physical devices via a QR code, enabling live development and debugging.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/use-development-builds.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
npx expo start
```

----------------------------------------

TITLE: Starting Expo Development Server (Shell)
DESCRIPTION: This command from Expo CLI starts a local development server, typically hosted on `http://localhost:8081`. The server hosts the app's manifest and serves the JavaScript bundle to the client.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/glossary-of-terms.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
npx expo start
```

----------------------------------------

TITLE: Fixing Expo Dependency Versions (Shell)
DESCRIPTION: This command is used in Expo projects to automatically align dependency versions, such as `expo` and `react-native`, after an SDK upgrade, ensuring compatibility and resolving version mismatches.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/react-native-version-mismatch.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
npx expo install --fix
```

----------------------------------------

TITLE: Performing Basic CRUD Operations with expo-sqlite in JavaScript
DESCRIPTION: This example illustrates fundamental Create, Read, Update, and Delete (CRUD) operations using `expo-sqlite`. It demonstrates opening a database, executing bulk queries with `execAsync` (cautioning about SQL injection), performing single write operations with `runAsync` using various parameter binding methods, and retrieving data using `getFirstAsync`, `getAllAsync`, and iterating with `getEachAsync`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
const db = await SQLite.openDatabaseAsync('databaseName');

// `execAsync()` is useful for bulk queries when you want to execute altogether.
// Note that `execAsync()` does not escape parameters and may lead to SQL injection.
await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

// `runAsync()` is useful when you want to execute some write operations.
const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object

// `getFirstAsync()` is useful when you want to get a single row from the database.
const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

// `getAllAsync()` is useful when you want to get all results as an array of objects.
const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

// `getEachAsync()` is useful when you want to iterate SQLite query cursor.
for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}
```

----------------------------------------

TITLE: Submitting iOS App to App Store via EAS CLI
DESCRIPTION: This command initiates the interactive submission process for an iOS app to the Apple App Store using EAS CLI. It guides the user step-by-step through the necessary procedures to upload the build.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/ios.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
$ eas submit --platform ios
```

----------------------------------------

TITLE: Start Local Expo Development Server
DESCRIPTION: This command starts a local development server for an Expo project. After creating a build, developers can use this command to iterate on their project, making and testing changes to JavaScript, styling, or image assets locally before sending an update.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#_snippet_12

LANGUAGE: bash
CODE:
```
npx expo start
```

----------------------------------------

TITLE: Start Expo Development Server
DESCRIPTION: This command initiates the Expo development server using Expo CLI. Running this command is essential for local development and testing of Expo Router API routes and client-side applications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
$ npx expo
```

----------------------------------------

TITLE: Create React Context for Authentication Session
DESCRIPTION: This snippet defines a React Context provider (`SessionProvider`) that exposes authentication session data and methods (`signIn`, `signOut`, `session`, `isLoading`) to the entire application. It includes a `useSession` hook for convenient access to the context value, ensuring it's used within the provider's scope.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication-rewrites.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { use, createContext, type PropsWithChildren } from 'react';
import { useStorageState } from './useStorageState';

const AuthContext = createContext<{
  signIn: () => void;
  signOut: () => void;
  session?: string | null;
  isLoading: boolean;
}> ({
  signIn: () => null,
  signOut: () => null,
  session: null,
  isLoading: false,
});

// This hook can be used to access the user info.
export function useSession() {
  const value = use(AuthContext);
  if (!value) {
    throw new Error('useSession must be wrapped in a <SessionProvider />');
  }

  return value;
}

export function SessionProvider({ children }: PropsWithChildren) {
  const [[isLoading, session], setSession] = useStorageState('session');

  return (
    <AuthContext
      value={{
        signIn: () => {
          // Perform sign-in logic here
          setSession('xxx');
        },
        signOut: () => {
          setSession(null);
        },
        session,
        isLoading,
      }}>
      {children}
    </AuthContext>
  );
}
```

----------------------------------------

TITLE: Defining a Server Function to Render Info in Expo
DESCRIPTION: This server function (`actions/render-info.tsx`) is marked with `'use server'`, indicating it runs on the server. It securely fetches data (conceptually) and returns a React Native `Text` component, which is then streamed as a React Server Component payload to the client.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
'use server';

import { Text } from 'react-native';

export default async function renderInfo({ name }) {
  // Securely fetch data from an API, and read environment variables...
  return <Text>Hello, {name}!</Text>;
}
```

----------------------------------------

TITLE: Basic Video Playback with Controls (JSX)
DESCRIPTION: Demonstrates a simple implementation of video playback using `expo-video`. It shows how to initialize a `VideoPlayer` with a source, control playback (play/pause) using a button, and display the video using `VideoView`. It also shows how to listen to player events.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { useEvent } from 'expo';
import { useVideoPlayer, VideoView } from 'expo-video';
import { StyleSheet, View, Button } from 'react-native';

const videoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';

export default function VideoScreen() {
  const player = useVideoPlayer(videoSource, player => {
    player.loop = true;
    player.play();
  });

  const { isPlaying } = useEvent(player, 'playingChange', { isPlaying: player.playing });

  return (
    <View style={styles.contentContainer}>
      <VideoView style={styles.video} player={player} allowsFullscreen allowsPictureInPicture />
      <View style={styles.controlsContainer}>
        <Button
          title={isPlaying ? 'Pause' : 'Play'}
          onPress={() => {
            if (isPlaying) {
              player.pause();
            } else {
              player.play();
            }
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  contentContainer: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 50,
  },
  video: {
    width: 350,
    height: 275,
  },
  controlsContainer: {
    padding: 10,
  },
});
```

----------------------------------------

TITLE: Install and Log In to EAS CLI
DESCRIPTION: This command installs the Expo Application Services (EAS) command-line interface globally and then prompts the user to log in to their Expo account. It is a fundamental prerequisite for using EAS to build and manage native applications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/create-a-build.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
$ npm install -g eas-cli && eas login
```

----------------------------------------

TITLE: Clearing Caches and Reinstalling Dependencies (Shell)
DESCRIPTION: This comprehensive shell command sequence clears various caches (node_modules, npm cache, Watchman, Metro, Haste map), reinstalls project dependencies, and then restarts the Expo bundler with a clear cache, often resolving persistent build issues.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/react-native-version-mismatch.mdx#_snippet_4

LANGUAGE: Shell
CODE:
```
rm -rf node_modules && npm cache clean --force && npm install && watchman watch-del-all && rm -rf $TMPDIR/haste-map-* && rm -rf $TMPDIR/metro-cache && npx expo start --clear
```

----------------------------------------

TITLE: Create a New Expo React Native App
DESCRIPTION: Shows the command to initialize a new React Native project with built-in Expo SDK support using `npx create-expo-app`. The `--template bare-minimum` flag is used to create a minimal project structure, providing a clean slate for development.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/index.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
# Create a project named my-app
$ npx create-expo-app my-app --template bare-minimum
```

----------------------------------------

TITLE: Install a Single Package with Expo CLI
DESCRIPTION: This command demonstrates how to install a single npm package, `expo-camera`, using `npx expo install`. This utility helps ensure the installed package version is compatible with your project's `react-native` version, addressing common React Native dependency issues.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/expo-cli.mdx#_snippet_32

LANGUAGE: Shell
CODE:
```
$ npx expo install expo-camera
```

----------------------------------------

TITLE: Send Over-the-Air Update to a Specific Channel
DESCRIPTION: This EAS CLI command creates and deploys an over-the-air update to the specified channel, such as 'production'. Builds configured for this channel will receive the update.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/send-over-the-air-updates.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
$ eas update --channel production
```

----------------------------------------

TITLE: Start Expo Development Server (Shell)
DESCRIPTION: Runs the command to start the Expo development server, which compiles the project and makes it available for testing on devices or simulators connected to the same network.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/get-started/start-developing.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
$ npx expo start
```

----------------------------------------

TITLE: Clearing Bundler Caches with Expo CLI and npm
DESCRIPTION: This sequence of commands is designed to clear development caches for an Expo CLI project utilizing npm. It removes `node_modules`, forces a clean of the global npm cache, reinstalls project dependencies, resets the Watchman file watcher, clears temporary Metro/Haste-map caches, and then restarts the Expo development server with a fresh cache.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
$ rm -rf node_modules

$ npm cache clean --force

$ npm install

$ watchman watch-del-all

$ rm -fr $TMPDIR/haste-map-*

$ rm -rf $TMPDIR/metro-cache

$ npx expo start --clear
```

----------------------------------------

TITLE: Create a New React Native App with Expo
DESCRIPTION: Shows the command to create a new React Native project with built-in support for Expo SDK packages. Using `npx create-expo-app` with the `--template bare-minimum` option sets up a new project named 'my-app' ready for Expo development.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/index.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
# Create a project named my-app
$ npx create-expo-app my-app --template bare-minimum
```

----------------------------------------

TITLE: Update Permissions API Methods
DESCRIPTION: New methods `getPermissionsAsync` and `requestPermissionsAsync` replace the deprecated `Permissions.askAsync()` and `Permissions.getAsync()` for handling permissions in Expo.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-sensors/CHANGELOG.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
// New Permissions API methods
getPermissionsAsync(): Promise<PermissionResponse>
requestPermissionsAsync(): Promise<PermissionResponse>

// Deprecated Permissions API methods (replaced by above)
Permissions.askAsync(): Promise<PermissionResponse>
Permissions.getAsync(): Promise<PermissionResponse>
```

----------------------------------------

TITLE: Register and Schedule Expo Push Notifications
DESCRIPTION: This comprehensive example demonstrates how to register for Expo push notifications, obtain the Expo push token, handle notification permissions, set up notification channels for Android, and schedule a local push notification. It includes state management for the token and received notifications, and listeners for notification events. This functionality requires a physical device for testing, as push notifications do not work on emulators/simulators.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/notifications.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldPlaySound: false,
    shouldSetBadge: false,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
    undefined
  );

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));

    if (Platform.OS === 'android') {
      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));
    }
    const notificationListener = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    const responseListener = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.remove();
      responseListener.remove();
    };
  }, []);

  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-around',
      }}>
      <Text>Your expo push token: {expoPushToken}</Text>
      <Text>{`Channels: ${JSON.stringify(
        channels.map(c => c.id),
        null,
        2
      )}`}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to schedule a notification"
        onPress={async () => {
          await schedulePushNotification();
        }}
      />
    </View>
  );
}

async function schedulePushNotification() {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "You've got mail! 📬",
      body: 'Here is the notification body',
      data: { data: 'goes here', test: { test1: 'more data' } },
    },
    trigger: {
      type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
      seconds: 2,
    },
  });
}

async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('myNotificationChannel', {
      name: 'A channel is needed for the permissions prompt to appear',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    // Learn more about projectId:
    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid
    // EAS projectId is used here.
    try {
      const projectId =
        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
      if (!projectId) {
        throw new Error('Project ID not found');
      }
      token = (
        await Notifications.getExpoPushTokenAsync({
          projectId,
        })
      ).data;
      console.log(token);
    } catch (e) {
      token = `${e}`;
    }
  } else {
    alert('Must use physical device for Push Notifications');
  }

  return token;
}
```

----------------------------------------

TITLE: Picking Image from Library with expo-image-picker (TSX)
DESCRIPTION: Demonstrates how to use `expo-image-picker` to select an image or video from the device's photo library in a React Native component using TypeScript/TSX. It shows how to launch the library, handle the result, and display the selected image.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/imagepicker.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images', 'videos'],
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 200,
    height: 200,
  },
});
```

----------------------------------------

TITLE: Client Component Invoking Server Function with React Suspense for Profile Rendering
DESCRIPTION: This client component (`components/profile.tsx`) uses `useLocalSearchParams` and a custom auth provider to call the `renderProfile` server function. It then renders the returned RSC payload asynchronously using `React.Suspense`, providing a `Fallback` component during the loading state.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
'use client';

import { useLocalSearchParams } from 'expo-router';
import * as React from 'react';
import { Text } from 'react-native';

import { renderProfile } from '@/components/server-actions';

// Loading state that renders while data is being fetched.
function Fallback() {
  return <Text>Loading...</Text>;
}

export default function Profile() {
  const { username } = useLocalSearchParams();
  const { accessToken } = useCustomAuthProvider();

  // Call the Server Function with the username and access token.
  const profile = React.useMemo(
    () => renderProfile({ username, accessToken }),
    [username, accessToken]
  );

  // Render the profile asynchronously with React Suspense and a custom loading state.
  return <React.Suspense fallback={<Fallback />}>{profile}</React.Suspense>;
}
```

----------------------------------------

TITLE: Picking Image from Camera Roll with Expo ImagePicker (TypeScript)
DESCRIPTION: This React Native component demonstrates how to use `expo-image-picker` to select an image from the device's camera roll. It uses `launchImageLibraryAsync` to open the image picker, allows editing, and then displays the selected image's URI. No explicit permission request is needed for launching the image library on iOS/Android.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/imagepicker.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 200,
    height: 200,
  },
});
```

----------------------------------------

TITLE: Configure Bottom Tabs Navigation with Expo Router `Tabs`
DESCRIPTION: Demonstrates how to set up a bottom tab navigator using the `Tabs` component in `_layout.tsx`. Routes within the same directory are automatically treated as tabs. It shows how to define tab screens with custom titles and icons using `Tabs.Screen`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/layout.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Tabs } from 'expo-router';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color }) => <MaterialIcons size={28} name="house.fill" color={color} />,
        }}
      />
      <!-- Add more tabs here -->
    </Tabs>
  );
}
```

----------------------------------------

TITLE: Fetching and Displaying Media Library Albums and Assets in React Native
DESCRIPTION: This React Native (JSX) example demonstrates how to use `expo-media-library` to request permissions, fetch all albums, and then iterate through them to display their assets. It includes state management for permissions and fetched data, and uses `Image` components to render media thumbnails.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/media-library.mdx#_snippet_4

LANGUAGE: JSX
CODE:
```
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

/* @hide const styles = StyleSheet.create({ ... }); */
const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 8,
    justifyContent: 'center',
    ...Platform.select({
      android: {
        paddingTop: 40,
      },
    }),
  },
  albumContainer: {
    paddingHorizontal: 20,
    marginBottom: 12,
    gap: 4,
  },
  albumAssetsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
});
/* @end */
```

----------------------------------------

TITLE: Create Protected Layout Route for Authentication Check
DESCRIPTION: This snippet outlines the creation of a nested layout route (`app/(app)/_layout.tsx`) designed to protect its child routes. This layout will contain logic to check if a user is authenticated using the `useSession` hook and redirect them to a sign-in screen if they are not.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication-rewrites.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```

```

----------------------------------------

TITLE: Fetching Albums and Displaying Assets in React Native (JavaScript)
DESCRIPTION: This React Native component demonstrates how to fetch albums and their assets using `expo-media-library`. It requests media library permissions, retrieves albums, and then displays the assets within each album using `Image` components. It includes state management with `useState` and `useEffect` for asynchronous data fetching.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

/* @hide const styles = StyleSheet.create({ ... }); */
const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 8,
    justifyContent: 'center',
    ...Platform.select({
      android: {
        paddingTop: 40,
      },
    }),
  },
  albumContainer: {
    paddingHorizontal: 20,
    marginBottom: 12,
    gap: 4,
  },
  albumAssetsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
});
/* @end */
```

----------------------------------------

TITLE: Creating a Deployment Workflow for EAS Hosting (YAML)
DESCRIPTION: This YAML configuration defines an EAS workflow named 'Deploy' that triggers on pushes to the `main` branch. It sets up a deployment job to the `production` environment, ensuring the web bundle is exported, deployed, and promoted to production.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/workflows.mdx#_snippet_0

LANGUAGE: yaml
CODE:
```
name: Deploy

on:
  push:
    branches: ['main']

jobs:
  deploy:
    type: deploy
    name: Deploy
    environment: production
    params:
      prod: true
```

----------------------------------------

TITLE: Implement Expo Push Notifications in React Native
DESCRIPTION: This comprehensive example demonstrates how to set up and handle Expo push notifications in a React Native application. It includes requesting device permissions, registering for an Expo push token, setting up notification channels (Android), listening for incoming notifications, and scheduling local notifications. Requires a physical device for testing as push notifications do not work on emulators/simulators.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldPlaySound: false,
    shouldSetBadge: false,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
    undefined
  );

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));

    if (Platform.OS === 'android') {
      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));
    }
    const notificationListener = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    const responseListener = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.remove();
      responseListener.remove();
    };
  }, []);

  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-around',
      }}>
      <Text>Your expo push token: {expoPushToken}</Text>
      <Text>{`Channels: ${JSON.stringify(
        channels.map(c => c.id),
        null,
        2
      )}`}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to schedule a notification"
        onPress={async () => {
          await schedulePushNotification();
        }}
      />
    </View>
  );
}

async function schedulePushNotification() {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "You've got mail! 📬",
      body: 'Here is the notification body',
      data: { data: 'goes here', test: { test1: 'more data' } },
    },
    trigger: {
      type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
      seconds: 2,
    },
  });
}

async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('myNotificationChannel', {
      name: 'A channel is needed for the permissions prompt to appear',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    // Learn more about projectId:
    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid
    // EAS projectId is used here.
    try {
      const projectId =
        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
      if (!projectId) {
        throw new Error('Project ID not found');
      }
      token = (
        await Notifications.getExpoPushTokenAsync({
          projectId,
        })
      ).data;
      console.log(token);
    } catch (e) {
      token = `${e}`;
    }
  } else {
    alert('Must use physical device for Push Notifications');
  }

  return token;
}
```

----------------------------------------

TITLE: Install Multiple Expo SDK Packages
DESCRIPTION: Demonstrates how to install multiple Expo SDK packages simultaneously using the `npx expo install` command. This command fetches and integrates the specified packages into your project, providing access to device functionalities like camera, contacts, and sensors.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/index.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx expo install expo-camera expo-contacts expo-sensors
```

----------------------------------------

TITLE: Adding NSUserTrackingUsageDescription to iOS Info.plist
DESCRIPTION: This XML snippet illustrates how to manually add the `NSUserTrackingUsageDescription` key to your iOS project's `Info.plist` file. This string provides the user-facing explanation for why your app requests permission to track, which is a mandatory requirement for apps on iOS 14 and higher.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/tracking-transparency.mdx#_snippet_2

LANGUAGE: xml
CODE:
```
<key>NSUserTrackingUsageDescription</key>
<string>Your custom usage description string here.</string>
```

----------------------------------------

TITLE: Dynamic App Configuration with Environment Variables in Expo (JavaScript)
DESCRIPTION: Illustrates how to use non-public environment variables, specifically `APP_VARIANT`, within `app.config.js` to dynamically set the app name and bundle identifier/package name based on the build variant (development, preview, or production). This allows for different app configurations without code changes.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#_snippet_1

LANGUAGE: js
CODE:
```
const IS_DEV = process.env.APP_VARIANT === 'development';
const IS_PREVIEW = process.env.APP_VARIANT === 'preview';

const getUniqueIdentifier = () => {
  if (IS_DEV) {
    return 'com.yourname.stickersmash.dev';
  }

  if (IS_PREVIEW) {
    return 'com.yourname.stickersmash.preview';
  }

  return 'com.yourname.stickersmash';
};

const getAppName = () => {
  if (IS_DEV) {
    return 'StickerSmash (Dev)';
  }

  if (IS_PREVIEW) {
    return 'StickerSmash (Preview)';
  }

  return 'StickerSmash: Emoji Stickers';
};

export default {
  /* @info Using <CODE>getAppName()</CODE> for "name" property */
  name: getAppName(),
  /* @end */
  /* @hide ... */ /* @end */
  ios: {
    /* @info Using <CODE>getUniqueIdentifier()</CODE> for "bundleIdentifier" property */
    bundleIdentifier: getUniqueIdentifier(),
    /* @end */
    /* @hide ... */ /* @end */
  },
  android: {
    /* @info Using <CODE>getUniqueIdentifier()</CODE> for "package" property */
    package: getUniqueIdentifier(),
    /* @end */
    /* @hide ... */ /* @end */
  }
};
```

----------------------------------------

TITLE: Performing Basic CRUD Operations with expo-sqlite
DESCRIPTION: This JavaScript snippet illustrates fundamental database operations including opening a database, executing bulk queries with execAsync, performing write operations with runAsync (demonstrating parameter binding), and retrieving data using getFirstAsync, getAllAsync, and getEachAsync.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
const db = await SQLite.openDatabaseAsync('databaseName');

// `execAsync()` is useful for bulk queries when you want to execute altogether.
// Note that `execAsync()` does not escape parameters and may lead to SQL injection.
await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

// `runAsync()` is useful when you want to execute some write operations.
const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object

// `getFirstAsync()` is useful when you want to get a single row from the database.
const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

// `getAllAsync()` is useful when you want to get all results as an array of objects.
const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

// `getEachAsync()` is useful when you want to iterate SQLite query cursor.
for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}
```

----------------------------------------

TITLE: Getting Current Location with Expo (TypeScript)
DESCRIPTION: This React Native component demonstrates how to request foreground location permissions and retrieve the device's current position using `expo-location`. It handles permission denial and displays the location data or an error message. It also includes a check for Android emulators where location might not work directly.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/location.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
/* @hide */
import * as Device from 'expo-device';
/* @end */
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  useEffect(() => {
    async function getCurrentLocation() {
      /* @hide */
      if (Platform.OS === 'android' && !Device.isDevice) {
        setErrorMsg(
          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'
        );
        return;
      }
      /* @end */
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    }

    getCurrentLocation();
  }, []);

  let text = 'Waiting...';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  paragraph: {
    fontSize: 18,
    textAlign: 'center',
  },
});
```

----------------------------------------

TITLE: Automating Production Builds with EAS Workflows (YAML)
DESCRIPTION: This YAML configuration defines an EAS Workflow that automates the creation of Android and iOS production builds. The workflow is triggered on every commit to the `main` branch, enabling continuous integration for your app builds.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/build-project.mdx#_snippet_5

LANGUAGE: yaml
CODE:
```
name: Create builds

on:
  push:
    branches: ['main']

jobs:
  build_android:
    name: Build Android app
    type: build
    params:
      platform: android
      profile: production
  build_ios:
    name: Build iOS app
    type: build
    params:
      platform: ios
      profile: production
```

----------------------------------------

TITLE: Update Button Component to Use Dynamic onPress Prop
DESCRIPTION: This snippet modifies the `Pressable` component within `components/Button.tsx` to accept and utilize a dynamic `onPress` prop. This change replaces a hardcoded `alert()` call, making the button more reusable and allowing its behavior to be defined by the parent component.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
<Pressable style={styles.button} /* @tutinfo Replace the <CODE>alert()</CODE> with the <CODE>onPress</CODE>.*/ onPress={onPress}/* @end */ >
```

----------------------------------------

TITLE: Implementing Apple Sign-In Button and Flow (React Native)
DESCRIPTION: This React Native example demonstrates how to integrate the `AppleAuthenticationButton` component and initiate the `signInAsync` flow. It requests full name and email scopes, and includes basic error handling for user cancellation or other issues during the sign-in process.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/apple-authentication.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={styles.button}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            });
            // signed in
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 44,
  },
});
```

----------------------------------------

TITLE: Basic Usage of expo-image Component (JSX)
DESCRIPTION: This snippet demonstrates the basic usage of the `Image` component from `expo-image`. It shows how to import the component, set a remote image source, use a BlurHash placeholder, configure content fit, and apply a transition effect. It also includes basic styling using `StyleSheet` from `react-native`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/image.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayj[fQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});
```

----------------------------------------

TITLE: Create a new Expo React Native project
DESCRIPTION: This command initializes a new React Native project using `create-expo-app`, setting up a basic 'Hello world' application. It's a quick way to get started with a new project compatible with EAS Update.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npx create-expo-app my-app
```

----------------------------------------

TITLE: Request Media Library Permissions in Expo React Native
DESCRIPTION: This TypeScript snippet demonstrates how to manage media library permissions using `expo-media-library`'s `usePermissions` hook. It checks the current permission `status` and, if `null` (indicating the first load or unknown status), triggers `requestPermission()` to prompt the user for access, ensuring the app can save images.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/screenshot.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import * as MediaLibrary from 'expo-media-library';

// ...rest of the code remains same

export default function Index() {
  const [status, requestPermission] = MediaLibrary.usePermissions();
  // ...rest of the code remains same

  if (status === null) {
    requestPermission();
  }
  // ...rest of the code remains same
}
```

----------------------------------------

TITLE: Control Splash Screen Visibility in Expo React Native App
DESCRIPTION: This React Native example demonstrates how to manage the splash screen lifecycle using `expo-splash-screen`. It shows how to use `SplashScreen.preventAutoHideAsync()` to keep the splash screen visible during asynchronous operations (e.g., font loading, API calls) and `SplashScreen.hide()` to dismiss it once the application's root view has performed layout and is ready to render its initial content.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/splash-screen.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import *n * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

// Set the animation options. This is optional.
SplashScreen.setOptions({
  duration: 1000,
  fade: true,
});

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(() => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      SplashScreen.hide();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! 👋</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}
```

----------------------------------------

TITLE: Ignoring Local Environment Files in Git
DESCRIPTION: Explains how to add patterns to your `.gitignore` file to prevent local environment variables and configuration files from being committed to version control.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
# local env files
.env*.local
```

----------------------------------------

TITLE: Manually Checking and Applying Expo Updates in React Native
DESCRIPTION: This React Native (JSX) code snippet demonstrates how to manually check for, download, and apply Expo updates. It uses `Updates.checkForUpdateAsync()`, `Updates.fetchUpdateAsync()`, and `Updates.reloadAsync()` to manage the update process, typically triggered by a user action like pressing a button. Error handling is included to alert the user of any issues during the update fetch.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import { View, Button } from 'react-native';
import * as Updates from 'expo-updates';

function App() {
  async function onFetchUpdateAsync() {
    try {
      const update = await Updates.checkForUpdateAsync();

      if (update.isAvailable) {
        await Updates.fetchUpdateAsync();
        await Updates.reloadAsync();
      }
    } catch (error) {
      // You can also add an alert() to see the error message in case of an error when fetching updates.
      alert(`Error fetching latest Expo update: ${error}`);
    }
  }

  return (
    <View>
      <Button title="Fetch update" onPress={onFetchUpdateAsync} />
    </View>
  );
}
```

----------------------------------------

TITLE: Implement Root Layout for Authentication Check in Expo Router
DESCRIPTION: This component defines the root layout for an Expo Router application. It checks the user's authentication status using `useSession()` and conditionally renders a loading screen, redirects unauthenticated users to `/sign-in`, or displays the main application stack. It ensures that only authenticated users can access the `(app)` group routes.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication-rewrites.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Text } from 'react-native';
import { Redirect, Stack } from 'expo-router';

import { useSession } from '../../ctx';

export default function AppLayout() {
  const { session, isLoading } = useSession();

  // You can keep the splash screen open, or render a loading screen like we do here.
  if (isLoading) {
    return <Text>Loading...</Text>;
  n

  // Only require authentication within the (app) group's layout as users
  // need to be able to access the (auth) group and sign in again.
  if (!session) {
    // On web, static rendering will stop here as the user is not authenticated
    // in the headless Node process that the pages are rendered in.
    return <Redirect href="/sign-in" />;
  }

  // This layout can be deferred because it's not the root layout.
  return <Stack />;
}
```

----------------------------------------

TITLE: Performing Basic CRUD Operations with expo-sqlite (JavaScript)
DESCRIPTION: This comprehensive example demonstrates fundamental database operations using `expo-sqlite`. It covers opening a database, executing multiple SQL commands with `execAsync`, performing insert/update/delete operations with `runAsync` using both unnamed and named parameter binding, and retrieving data using `getFirstAsync` for single rows, `getAllAsync` for all results, and `getEachAsync` for iterating over results.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#_snippet_2

LANGUAGE: js
CODE:
```
const db = await SQLite.openDatabaseAsync('databaseName');

// `execAsync()` is useful for bulk queries when you want to execute altogether.
// Note that `execAsync()` does not escape parameters and may lead to SQL injection.
await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

// `runAsync()` is useful when you want to execute some write operations.
const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object

// `getFirstAsync()` is useful when you want to get a single row from the database.
const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

// `getAllAsync()` is useful when you want to get all results as an array of objects.
const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

// `getEachAsync()` is useful when you want to iterate SQLite query cursor.
for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}
```

----------------------------------------

TITLE: Configuring EAS Build for Project - Shell
DESCRIPTION: This command configures your Expo project for EAS Build, generating an `eas.json` file with default settings for different build profiles, which is essential for custom build configurations.
SOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuild.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
$ eas build:configure
```

----------------------------------------

TITLE: Configure Expo Project with TypeScript in app.config.ts
DESCRIPTION: This TypeScript example demonstrates how to create an `app.config.ts` file for Expo configuration, leveraging TypeScript features like type checking, autocomplete, and doc-blocks. It imports `ExpoConfig` and `ConfigContext` for type safety.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
import { ExpoConfig, ConfigContext } from 'expo/config';

export default ({ config }: ConfigContext): ExpoConfig => ({
  ...config,
  slug: 'my-app',
  name: 'My App',
});
```

----------------------------------------

TITLE: Importing Core Components and Hooks for `react-native-safe-area-context`
DESCRIPTION: This snippet demonstrates the standard import statement for the `react-native-safe-area-context` library, bringing in its primary components (`SafeAreaView`, `SafeAreaProvider`), context (`SafeAreaInsetsContext`), and hook (`useSafeAreaInsets`) for managing safe area insets in React Native applications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#_snippet_0

LANGUAGE: js
CODE:
```
import {
  SafeAreaView,
  SafeAreaProvider,
  SafeAreaInsetsContext,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';
```

----------------------------------------

TITLE: Importing Core Components and Hooks from React Native Safe Area Context
DESCRIPTION: This snippet demonstrates how to import the main components and hooks provided by `react-native-safe-area-context`. It includes `SafeAreaView` for automatic insetting, `SafeAreaProvider` for context provision, `SafeAreaInsetsContext` for consumer-based access, and `useSafeAreaInsets` for hook-based access to safe area insets.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import {
  SafeAreaView,
  SafeAreaProvider,
  SafeAreaInsetsContext,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';
```

----------------------------------------

TITLE: Start Expo Project Development Server
DESCRIPTION: This command starts the Expo development server, allowing you to run your application on a mobile device via Expo Go, a web browser, or emulators/simulators.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/installation.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
npx expo start
```

----------------------------------------

TITLE: Configuring GitHub Actions for EAS Builds
DESCRIPTION: This GitHub Actions workflow (`eas-build.yml`) sets up Node.js, uses the `expo/expo-github-action` to configure EAS CLI, installs project dependencies, and then triggers an EAS build for all platforms. It runs on pushes to the 'main' branch or can be manually dispatched.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-on-ci.mdx#_snippet_6

LANGUAGE: yaml
CODE:
```
name: EAS Build
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  build:
    name: Install and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm
      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: Install dependencies
        run: npm ci
      - name: Build on EAS
        run: eas build --platform all --non-interactive --no-wait
```

----------------------------------------

TITLE: Clearing Bundler Caches with React Native CLI and Yarn
DESCRIPTION: These commands clear various development caches for a React Native CLI project using Yarn. It deletes `node_modules`, cleans the global Yarn cache, reinstalls dependencies, resets Watchman, clears temporary Metro/Haste-map caches, and finally starts the React Native development server with its cache reset.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-macos-linux.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
# With Yarn workspaces, you may need to delete node_modules in each workspace
$ rm -rf node_modules

$ yarn cache clean

$ yarn

$ watchman watch-del-all

$ rm -fr $TMPDIR/haste-map-*

$ rm -rf $TMPDIR/metro-cache

$ yarn start -- --reset-cache
```

----------------------------------------

TITLE: EAS Workflow for Automatic Android and iOS Build and Submission
DESCRIPTION: This YAML configuration defines an EAS workflow named "Build and submit". It triggers on pushes to the `main` branch, automatically building both Android and iOS production apps, and then submitting them to the Google Play Store and Apple App Store respectively. It uses `needs` to ensure submission jobs run only after successful builds.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/submit-to-app-stores.mdx#_snippet_8

LANGUAGE: yaml
CODE:
```
name: Build and submit

on:
  push:
    branches: ['main']

jobs:
  build_android:
    name: Build Android app
    type: build
    params:
      platform: android
      profile: production
  build_ios:
    name: Build iOS app
    type: build
    params:
      platform: ios
      profile: production
  submit_android:
    name: Submit Android
    type: submit
    needs: [build_android]
    params:
      build_id: ${{ needs.build_android.outputs.build_id }}
  submit_ios:
    name: Submit iOS
    type: submit
    needs: [build_ios]
    params:
      build_id: ${{ needs.build_ios.outputs.build_id }}
```

----------------------------------------

TITLE: Installing Expo Speech Module in React Native Projects
DESCRIPTION: This command adds the `expo-speech` package to your project's npm dependencies. It is the recommended method for installing Expo modules, ensuring compatibility with your current Expo SDK version and properly linking native modules.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-speech/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx expo install expo-speech
```

----------------------------------------

TITLE: Adding NSUserTrackingUsageDescription to iOS Info.plist
DESCRIPTION: This XML snippet illustrates how to manually add the `NSUserTrackingUsageDescription` key and its corresponding string value to the `Info.plist` file for iOS projects. This description is crucial as it explains to the user why the app requests permission to track them, and its absence can lead to app rejection by Apple.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/tracking-transparency.mdx#_snippet_2

LANGUAGE: xml
CODE:
```
<key>NSUserTrackingUsageDescription</key>
<string>Your custom usage description string here.</string>
```

----------------------------------------

TITLE: Registering Background Task for Expo Updates in TypeScript
DESCRIPTION: This TypeScript code defines and registers a background task named `task-run-expo-update` to periodically check for and apply Expo updates. It leverages `expo-task-manager` and `expo-updates` to detect available updates, download them, and then reload the application. The task is configured to run at a minimum interval of 24 hours (60 * 24 minutes), ensuring the app stays up-to-date even when backgrounded. The `setupBackgroundUpdates` function should be invoked at the top-level component to ensure the task is registered on app start.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/download-updates.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import * as TaskManager from 'expo-task-manager';
import * as BackgroundTask from 'expo-background-task';
import * as Updates from 'expo-updates';

const BACKGROUND_TASK_NAME = 'task-run-expo-update';

export const setupBackgroundUpdates = async () => {
  TaskManager.defineTask(BACKGROUND_TASK_NAME, async () => {
    const update = await Updates.checkForUpdateAsync();
    if (update.isAvailable) {
      await Updates.fetchUpdateAsync();
      await Updates.reloadAsync();
    }
    return Promise.resolve();
  });

  await BackgroundTask.registerTaskAsync(BACKGROUND_TASK_NAME, {
    minimumInterval: 60 * 24,
  });
};

setupBackgroundUpdates();
```

----------------------------------------

TITLE: Basic Camera Usage in React Native with Expo CameraView
DESCRIPTION: This TypeScript React Native example demonstrates the fundamental usage of CameraView from expo-camera. It covers requesting camera permissions, handling permission states, displaying a camera preview, and implementing a button to toggle between front and back camera facings.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/camera.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    // Camera permissions are still loading.
    return <View />;
  }

  if (!permission.granted) {
    // Camera permissions are not granted yet.
    return (
      <View style={styles.container}>
        <Text style={styles.message}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    );
  }

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  message: {
    textAlign: 'center',
    paddingBottom: 10,
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});
```

----------------------------------------

TITLE: Configuring Root Layout with Stack Navigator (Expo Router)
DESCRIPTION: This snippet defines the root layout of the Expo Router application, setting up a stack navigator. It imports `Stack` from `expo-router` and exports a default `Layout` component that renders the `Stack` component, establishing the navigation structure for the app.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Stack } from 'expo-router';

export default function Layout() {
  return <Stack />;
}
```

----------------------------------------

TITLE: Managed Project EAS Build Profiles Configuration (JSON)
DESCRIPTION: This example demonstrates how to set up multiple build profiles (base, development, staging, production) for a managed Expo project within eas.json. It showcases profile inheritance using 'extends', custom Node.js and Yarn versions, environment variables, and platform-specific settings like development client, distribution, and simulator options.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  "build": {
    "base": {
      "node": "12.13.0",
      "yarn": "1.22.5",
      "env": {
        "EXAMPLE_ENV": "example value"
      },
      "android": {
        "image": "default",
        "env": {
          "PLATFORM": "android"
        }
      },
      "ios": {
        "image": "latest",
        "env": {
          "PLATFORM": "ios"
        }
      }
    },
    "development": {
      "extends": "base",
      "developmentClient": true,
      "env": {
        "ENVIRONMENT": "development"
      },
      "android": {
        "distribution": "internal",
        "withoutCredentials": true
      },
      "ios": {
        "simulator": true
      }
    },
    "staging": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "staging"
      },
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "production": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "production"
      }
    }
  }
}
```

----------------------------------------

TITLE: Integrate Session Provider into Root Layout
DESCRIPTION: This code snippet demonstrates how to wrap the root layout of your Expo application with the `SessionProvider`. This ensures that the authentication context is available globally to all components and routes. It's crucial to mount `<Slot />` within the provider to prevent runtime errors related to navigation events.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication-rewrites.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Slot } from 'expo-router';
import { SessionProvider } from '../ctx';

export default function Root() {
  // Set up the auth context and render our layout inside of it.
  return (
    <SessionProvider>
      <Slot />
    </SessionProvider>
  );
}
```

----------------------------------------

TITLE: React Native Expo Push Notifications Full Example
DESCRIPTION: This snippet provides a complete React Native application (`App.tsx`) demonstrating the full lifecycle of Expo push notifications. It includes setting up the notification handler, registering the device for a push token, sending a notification via Expo's API, and handling incoming notifications within the app's UI. It also incorporates platform-specific configurations and error handling.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants;

/* @info This handler determines how your app handles notifications that come in while the app is foregrounded. */
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldPlaySound: true,
    shouldSetBadge: true,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});
/* @end */

/* @info Sends a notification to Expo. Can also use Expo push notification tool at https://expo.dev/notifications. */
async function sendPushNotification(expoPushToken: string) {
  const message = {
    to: expoPushToken,
    sound: 'default',
    title: 'Original Title',
    body: 'And here is the body!',
    data: { someData: 'goes here' },
  };

  await fetch('https://exp.host/--/api/v2/push/send', {
    method: 'POST',
    headers: {
      Accept: 'application/json',
      'Accept-encoding': 'gzip, deflate',
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(message),
  });
}
/* @end */

function handleRegistrationError(errorMessage: string) {
  alert(errorMessage);
  throw new Error(errorMessage);
}

async function registerForPushNotificationsAsync() {
  if (Platform.OS === 'android') {
    Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      handleRegistrationError('Permission not granted to get push token for push notification!');
      return;
    }
    const projectId =
      Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
    if (!projectId) {
      handleRegistrationError('Project ID not found');
    }
    try {
      /* @info This fetches the Expo push token (if not previously fetched), which is unique to this device and projectID. */
      const pushTokenString = (
        await Notifications.getExpoPushTokenAsync({
          projectId,
        })
      ).data;
      /* @end */
      console.log(pushTokenString);
      return pushTokenString;
    } catch (e: unknown) {
      handleRegistrationError(`${e}`);
    }
  } else {
    handleRegistrationError('Must use physical device for push notifications');
  }
}

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
    undefined
  );

  useEffect(() => {
    /* @info Gets the push token and displays it in the UI, or in case of an error, displays the error message. */
    registerForPushNotificationsAsync()
      .then(token => setExpoPushToken(token ?? ''))
      .catch((error: any) => setExpoPushToken(`${error}`));
    /* @end */

    const notificationListener = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    const responseListener = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.remove();
      responseListener.remove();
    };
  }, []);

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'space-around' }}>
      <Text>Your Expo push token: {expoPushToken}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to Send Notification"
        onPress={async () => {
          await sendPushNotification(expoPushToken);
        }}
      />
    </View>
  );
}
```

----------------------------------------

TITLE: Accessing Environment Variables in Server Components (Expo)
DESCRIPTION: This snippet demonstrates how server components can securely access environment variables via `process.env`. The `server-only` module is imported to assert that this code will never execute on the client, ensuring server-side API calls remain private.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
// This will assert if the module runs on the client.
import 'server-only';

import { Text } from 'react-native';

export async function renderData() {
  // This code only runs on the server.
  const data = await fetch('https://my-endpoint/', {
    headers: {
      Authorization: `Bearer ${process.env.SECRET}`,
    },
  });

  // ...
  return <div />;
}
```

----------------------------------------

TITLE: Creating New Expo Project with pnpm
DESCRIPTION: This command initializes a new Expo and React Native project using `pnpm create`. It's the recommended way to start a new project with pnpm, utilizing pnpm's efficient package management.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#_snippet_2

LANGUAGE: pnpm
CODE:
```
$ pnpm create expo-app
```

----------------------------------------

TITLE: Full Example of Dynamic Theming with useColorScheme
DESCRIPTION: This comprehensive TypeScript snippet provides a minimal working example of an Expo app that dynamically adjusts its colors based on the system's color scheme using `useColorScheme`. It defines styles for both light and dark themes and applies them conditionally to text and container components, also integrating `expo-status-bar` for automatic status bar styling.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/color-themes.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Text, StyleSheet, View, useColorScheme } from 'react-native';
import { StatusBar } from 'expo-status-bar';

export default function App() {
  const colorScheme = useColorScheme();

  const themeTextStyle = colorScheme === 'light' ? styles.lightThemeText : styles.darkThemeText;
  const themeContainerStyle =
    colorScheme === 'light' ? styles.lightContainer : styles.darkContainer;

  return (
    <View style={[styles.container, themeContainerStyle]}>
      <Text style={[styles.text, themeTextStyle]}>Color scheme: {colorScheme}</Text>
      <StatusBar />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    fontSize: 20,
  },
  lightContainer: {
    backgroundColor: '#d0d0c0',
  },
  darkContainer: {
    backgroundColor: '#242c40',
  },
  lightThemeText: {
    color: '#242c40',
  },
  darkThemeText: {
    color: '#d0d0c0',
  }
});
```

----------------------------------------

TITLE: Manage Splash Screen Visibility in Expo React Native
DESCRIPTION: This example demonstrates how to use `expo-splash-screen` to control the splash screen's visibility. It prevents the splash screen from auto-hiding using `SplashScreen.preventAutoHideAsync()`, loads necessary resources (like fonts) asynchronously, and then explicitly hides the splash screen with `SplashScreen.hide()` once the application's root view has performed layout, ensuring a seamless transition from splash to app content.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/splash-screen.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

// Set the animation options. This is optional.
SplashScreen.setOptions({
  duration: 1000,
  fade: true,
});

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(() => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      SplashScreen.hide();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! 👋</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}
```

----------------------------------------

TITLE: Integrate Pan Gesture and Animated Styles into EmojiSticker Component
DESCRIPTION: This complete `EmojiSticker` component integrates the pan gesture by wrapping the entire content with `GestureDetector` and passing the `drag` gesture. It applies the `containerStyle` to the `Animated.View` to enable the visual translation of the sticker, combining both double-tap and pan functionalities for interactive movement.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/gestures.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Gesture, GestureDetector } from 'react-native-gesture-handler';
import Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';
import { ImageSourcePropType } from 'react-native';

type Props = {
  imageSize: number;
  stickerSource: ImageSourcePropType;
};

export default function EmojiSticker({ imageSize, stickerSource }: Props) {
  const scaleImage = useSharedValue(imageSize);
  const translateX = useSharedValue(0);
  const translateY = useSharedValue(0);

  const doubleTap = Gesture.Tap()
    .numberOfTaps(2)
    .onStart(() => {
      if (scaleImage.value !== imageSize * 2) {
        scaleImage.value = scaleImage.value * 2;
      } else {
        scaleImage.value = Math.round(scaleImage.value / 2);
      }
    });

  const imageStyle = useAnimatedStyle(() => {
    return {
      width: withSpring(scaleImage.value),
      height: withSpring(scaleImage.value),
    };
  });

  const drag = Gesture.Pan().onChange(event => {
    translateX.value += event.changeX;
    translateY.value += event.changeY;
  });

  const containerStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateX: translateX.value,
        },
        {
          translateY: translateY.value,
        },
      ],
    };
  });

  return (
    <GestureDetector gesture={drag}>
      <Animated.View style={[containerStyle, { top: -350 }]}>
        <GestureDetector gesture={doubleTap}>
          <Animated.Image
            source={stickerSource}
            resizeMode="contain"
            style={[imageStyle, { width: imageSize, height: imageSize }]}
          />
        </GestureDetector>
      </Animated.View>
    </GestureDetector>
  );
}
```

----------------------------------------

TITLE: Install Expo modules automatically in React Native
DESCRIPTION: Use the `install-expo-modules` command to automatically install and configure the `expo` package in an existing React Native project. This method is recommended for its simplicity if the command succeeds.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/bare/installing-expo-modules.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
# Install and configure the expo package automatically
$ npx install-expo-modules@latest
```

----------------------------------------

TITLE: Complete Expo Localization and i18n-js Example
DESCRIPTION: A comprehensive example demonstrating localization in an Expo React Native app. It combines `expo-localization` for device locale detection and `i18n-js` for managing and displaying translated strings, including a fallback mechanism and basic UI integration. This snippet shows how to set up translations, apply them to text components, and display current locale information.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { View, StyleSheet, Text } from 'react-native';
import { getLocales } from 'expo-localization';
import { I18n } from 'i18n-js';

// Set the key-value pairs for the different languages you want to support.
const translations = {
  en: { welcome: 'Hello', name: 'Charlie' },
  ja: { welcome: 'こんにちは' },
};
const i18n = new I18n(translations);

// Set the locale once at the beginning of your app.
i18n.locale = getLocales()[0].languageCode ?? 'en';

// When a value is missing from a language it'll fall back to another language with the key present.
i18n.enableFallback = true;
// To see the fallback mechanism uncomment the line below to force the app to use the Japanese language.
// i18n.locale = 'ja';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>
        {i18n.t('welcome')} {i18n.t('name')}
      </Text>
      <Text>Current locale: {i18n.locale}</Text>
      <Text>Device locale: {getLocales()[0].languageCode}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  text: {
    fontSize: 20,
    marginBottom: 16,
  },
});
```

----------------------------------------

TITLE: Fetching Albums and Displaying Assets with Expo Media Library (JSX)
DESCRIPTION: This React Native component demonstrates how to request media library permissions, fetch user albums, and then display the assets within each album. It utilizes `expo-media-library` for media access and `useState`/`useEffect` hooks for state management and side effects. The `AlbumEntry` component is a sub-component responsible for displaying individual album details and their assets.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/media-library.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

/* @hide const styles = StyleSheet.create({ ... }); */
const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 8,
    justifyContent: 'center',
    ...Platform.select({
      android: {
        paddingTop: 40,
      },
    }),
  },
  albumContainer: {
    paddingHorizontal: 20,
    marginBottom: 12,
    gap: 4,
  },
  albumAssetsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
});
/* @end */
```

----------------------------------------

TITLE: Full Example: Handling and Scheduling Notifications with Expo
DESCRIPTION: This snippet demonstrates a complete React Native application using `expo-notifications` to register for push notifications, handle incoming notifications, and schedule local notifications. It includes permission requests, token retrieval, and UI to display notification details. It also shows how to set up notification channels for Android.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/notifications.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants;

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
    undefined
  );
  const notificationListener = useRef<Notifications.EventSubscription>();
  const responseListener = useRef<Notifications.EventSubscription>();

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));

    if (Platform.OS === 'android') {
      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));
    }
    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.current &&
        Notifications.removeNotificationSubscription(notificationListener.current);
      responseListener.current &&
        Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-around',
      }}>
      <Text>Your expo push token: {expoPushToken}</Text>
      <Text>{`Channels: ${JSON.stringify(
        channels.map(c => c.id),
        null,
        2
      )}`}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to schedule a notification"
        onPress={async () => {
          await schedulePushNotification();
        }}
      />
    </View>
  );
}

async function schedulePushNotification() {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "You've got mail! 📬",
      body: 'Here is the notification body',
      data: { data: 'goes here', test: { test1: 'more data' } },
    },
    trigger: {
      type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
      seconds: 2,
    },
  });
}

async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('myNotificationChannel', {
      name: 'A channel is needed for the permissions prompt to appear',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    // Learn more about projectId:
    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid
    // EAS projectId is used here.
    try {
      const projectId =
        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
      if (!projectId) {
        throw new Error('Project ID not found');
      }
      token = (
        await Notifications.getExpoPushTokenAsync({
          projectId,
        })
      ).data;
      console.log(token);
    } catch (e) {
      token = `${e}`;
    }
  } else {
    alert('Must use physical device for Push Notifications');
  }

  return token;
}
```

----------------------------------------

TITLE: Writing a Basic Component Unit Test with React Native Testing Library (TSX)
DESCRIPTION: Located in `__tests__/HomeScreen-test.tsx`, this snippet shows a basic unit test for the `HomeScreen` component. It uses `@testing-library/react-native`'s `render` function and `getByText` query to verify that the 'Welcome!' text is rendered correctly within the component.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { render } from '@testing-library/react-native';

import HomeScreen, { CustomText } from '@/app/index';

describe('<HomeScreen />', () => {
  test('Text renders correctly on HomeScreen', () => {
    const { getByText } = render(<HomeScreen />);

    getByText('Welcome!');
  });
});
```

----------------------------------------

TITLE: Authenticating with GitHub using expo-auth-session (TypeScript)
DESCRIPTION: This example demonstrates how to authenticate with GitHub using `expo-auth-session`. It utilizes `WebBrowser.maybeCompleteAuthSession()` for dismissing the web popup, `makeRedirectUri()` for creating platform-agnostic redirect URIs, and `useAuthRequest()` to build the authentication request. The `useEffect` hook handles the successful response by extracting the authorization code for server-side exchange. The button is disabled until the request is ready and `promptAsync()` is invoked on press.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/authentication.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { useEffect } from 'react';
import * as WebBrowser from 'expo-web-browser';
import { makeRedirectUri, useAuthRequest } from 'expo-auth-session';
import { Button } from 'react-native';

/* @info <strong>Web only:</strong> This method should be invoked on the page that the auth popup gets redirected to on web, it'll ensure that authentication is completed properly. On native this does nothing. */
WebBrowser.maybeCompleteAuthSession();
/* @end */

// Endpoint
const discovery = {
  authorizationEndpoint: 'https://github.com/login/oauth/authorize',
  tokenEndpoint: 'https://github.com/login/oauth/access_token',
  revocationEndpoint: 'https://github.com/settings/connections/applications/<CLIENT_ID>',
};

export default function App() {
  const [request, response, promptAsync] = useAuthRequest(
    {
      clientId: 'CLIENT_ID',
      scopes: ['identity'],
      redirectUri: makeRedirectUri({
        /* @info The URI <code>[scheme]://</code> to be used. If undefined, the <code>scheme</code> property of your app.json or app.config.js will be used instead. */
        scheme: 'your.app'
        /* @end */
      }),
    },
    discovery
  );

  useEffect(() => {
    if (response?.type === 'success') {
      /* @info Exchange the code for an access token in a server. */
      const { code } = response.params;
      /* @end */
    }
  }, [response]);

  return (
    <Button
      /* @info Disable the button until the request is loaded asynchronously. */
      disabled={!request}
      /* @end */
      title="Login"
      onPress={() => {
        /* @info Prompt the user to authenticate in a user interaction or web browsers will block it. */
        promptAsync();
        /* @end */
      }}
    />
  );
}
```

----------------------------------------

TITLE: Installing Expo Package with npm
DESCRIPTION: This command installs the `expo` package, which is essential for using `npx expo prebuild` and indicates which prebuild template to use. It's crucial to ensure the installed version of `expo` is compatible with your current `react-native` version.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/adopting-prebuild.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install expo
```

----------------------------------------

TITLE: Using Public Environment Variables in React Native (TypeScript)
DESCRIPTION: Demonstrates how to access `EXPO_PUBLIC_` prefixed environment variables within a React Native component. The `EXPO_PUBLIC_API_URL` variable is used to dynamically set the API endpoint for a `fetch` request. These variables are visible in the compiled app.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Button } from 'react-native';

function Post() {
  const apiUrl = process.env.EXPO_PUBLIC_API_URL;

  async function onPress() {
    await fetch(apiUrl, { ... })
  }

  return <Button onPress={onPress} title="Post" />;
}
```

----------------------------------------

TITLE: Installing Expo EAS CLI
DESCRIPTION: Installs the Expo Application Services (EAS) command-line interface globally, which is required for building and managing Expo projects.
SOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidSimulatedDevelopmentBuild.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install -g eas-cli
```

----------------------------------------

TITLE: Implementing Background Location Updates with Expo TaskManager and Location
DESCRIPTION: This snippet demonstrates how to set up background location tracking using `expo-task-manager` and `expo-location`. It requests both foreground and background location permissions, defines a named task (`LOCATION_TASK_NAME`) to handle location updates in the background, and starts the location updates. The `TaskManager.defineTask` callback processes captured location data or handles errors.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/task-manager.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Button, View, StyleSheet } from 'react-native';
import * as TaskManager from 'expo-task-manager';
import * as Location from 'expo-location';

const LOCATION_TASK_NAME = 'background-location-task';

const requestPermissions = async () => {
  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();
  if (foregroundStatus === 'granted') {
    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();
    if (backgroundStatus === 'granted') {
      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
        accuracy: Location.Accuracy.Balanced,
      });
    }
  }
};

const PermissionsButton = () => (
  <View style={styles.container}>
    <Button onPress={requestPermissions} title="Enable background location" />
  </View>
);

TaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {
  if (error) {
    // Error occurred - check `error.message` for more details.
    return;
  }
  if (data) {
    const { locations } = data;
    // do something with the locations captured in the background
  }
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default PermissionsButton;
```

----------------------------------------

TITLE: Defining EAS Workflow for Android and iOS Builds
DESCRIPTION: This YAML configuration defines an EAS Workflow that automatically triggers Android and iOS builds whenever a commit is pushed to the 'main' branch. It uses the 'build' type for each platform, simplifying the build process automation.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/building-on-ci.mdx#_snippet_0

LANGUAGE: yaml
CODE:
```
name: Build

on:
  push:
    branches:
      - main

jobs:
  build_android:
    name: Build Android App
    type: build
    params:
      platform: android
  build_ios:
    name: Build iOS App
    type: build
    params:
      platform: ios
```

----------------------------------------

TITLE: Installing EAS CLI and Authenticating with Expo Account (Shell)
DESCRIPTION: This command installs the Expo Application Services (EAS) CLI globally using npm, making it available for command-line operations. Following the installation, `eas login` is executed to authenticate with your Expo account, which is a necessary step for managing and submitting Expo projects.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
$ npm install -g eas-cli && eas login
```

----------------------------------------

TITLE: Configure EAS for Production Builds (Google Play Store & Apple App Store)
DESCRIPTION: This configuration shows how to set up `eas.json` to trigger production builds for Android (Google Play Store) and iOS (Apple App Store) using dedicated YAML configuration files.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#_snippet_90

LANGUAGE: json
CODE:
```
{
  "build": {
    "productionBuild": {
      "android": {
        "config": "production-build-android.yml"
      },
      "ios": {
        "config": "production-build-ios.yml"
      }
    }
  }
}
```

LANGUAGE: yaml
CODE:
```
build:
  name: Customized Android Play Store build example
  steps:
    - eas/checkout

    - eas/install_node_modules

    - eas/prebuild

    - eas/inject_android_credentials

    - eas/run_gradle

    - eas/find_and_upload_build_artifacts
```

LANGUAGE: yaml
CODE:
```
build:
  name: Customized iOS App Store build example
  steps:
    - eas/checkout

    - eas/install_node_modules

    - eas/resolve_apple_team_id_from_credentials:
        id: resolve_apple_team_id_from_credentials

    - eas/prebuild:
        inputs:
          apple_team_id: ${ steps.resolve_apple_team_id_from_credentials.apple_team_id }

    - run:
        name: Install pods
        working_directory: ./ios
        command: pod install

    - eas/configure_ios_credentials

    - eas/generate_gymfile_from_template:
        inputs:
          credentials: ${ eas.job.secrets.buildCredentials }

    - eas/run_fastlane

    - eas/find_and_upload_build_artifacts
```

----------------------------------------

TITLE: Linking to dynamic routes in Expo Router
DESCRIPTION: This snippet demonstrates various ways to navigate to dynamic routes. It shows how to use the 'Link' component with an inline ID in the 'href' or by passing an 'id' within a 'params' object. It also illustrates imperative navigation using 'router.navigate' with a 'pathname' and 'params' object.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
/* @info Import the <CODE>Link</CODE> React component and <CODE>router</CODE> to navigate imperatively from <CODE>expo-router</CODE>. */
import { Link, router } from 'expo-router';
/* @end */
import { View, Pressable, Text } from 'react-native';

export default function Page() {
  return (
    <View>
      <Link
        href="/user/bacon">
        View user (id inline)
      </Link>
      <Link
        href={{
          pathname: '/user/[id]',
          params: { id: 'bacon' }
        }}
      >
        View user (id in params in href)
      </Link>
      <Pressable
        onPress={() =>
          router.navigate({
            pathname: '/user/[id]',
            params: { id: 'bacon' }
          })
        }
      >
        <Text>View user (imperative)</Text>
      </Pressable>
    </View>
  );
}
```

----------------------------------------

TITLE: Upgrade Expo Project Dependencies
DESCRIPTION: After installing a new Expo SDK version, this command ensures all other project dependencies are upgraded and fixed to be compatible with the newly installed SDK. This helps resolve potential dependency conflicts.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/upgrading-expo-sdk-walkthrough.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
$ npx expo install --fix
```

----------------------------------------

TITLE: Define onPress Prop for React Native Button Component
DESCRIPTION: This TypeScript snippet updates the `Button` component in `components/Button.tsx` to accept an optional `onPress` prop. This prop is typed as a function that returns void, allowing parent components to pass a custom handler method to be executed when the button is pressed.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/image-picker.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { StyleSheet, View, Pressable, Text } from 'react-native';
import FontAwesome from '@expo/vector-icons/FontAwesome';

type Props = {
  label: string;
  theme?: 'primary';
  onPress?: () => void;
};

export default function Button({ label, theme, onPress }: Props) {
  if (theme === 'primary') {
    return (
      <View
        style={[
          styles.buttonContainer,
          { borderWidth: 4, borderColor: '#ffd33d', borderRadius: 18 },
        ]}>
        <Pressable style={[styles.button, { backgroundColor: '#fff' }]} onPress={onPress}>
          <FontAwesome name="picture-o" size={18} color="#25292e" style={styles.buttonIcon} />
          <Text style={[styles.buttonLabel, { color: '#25292e' }]}>{label}</Text>
        </Pressable>
      </View>
    );
  }

  return (
    <View style={styles.buttonContainer}>
      <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>
        <Text style={styles.buttonLabel}>{label}</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  buttonContainer: {
    width: 320,
    height: 68,
    marginHorizontal: 20,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 3,
  },
  button: {
    borderRadius: 10,
    width: '100%',
    height: '100%',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
  },
  buttonIcon: {
    paddingRight: 8,
  },
  buttonLabel: {
    color: '#fff',
    fontSize: 16,
  },
});
```

----------------------------------------

TITLE: Creating Production Build for Android with EAS CLI
DESCRIPTION: This command initiates a production build specifically for the Android platform using the EAS CLI. It's the primary step for generating an Android App Bundle (AAB) or APK ready for submission to the Google Play Store.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/build-project.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
eas build --platform android
```

----------------------------------------

TITLE: Downloading Android Credentials with EAS CLI
DESCRIPTION: This command initiates an interactive process to download Android app credentials, including the keystore, from EAS servers to a local `credentials.json` file. Users select the platform, profile, and the specific download option.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/app-credentials.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
eas credentials
```

----------------------------------------

TITLE: Running Expo CLI via npx
DESCRIPTION: This command executes the Expo CLI directly using `npx`, providing a quick way to start the CLI without a global installation. It's the recommended method for interacting with the Expo CLI.
SOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo
```

----------------------------------------

TITLE: Install EAS CLI Globally
DESCRIPTION: Installs the EAS Command Line Interface (CLI) tool as a global dependency on your local machine using npm. This is a prerequisite for using EAS features.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#_snippet_2

LANGUAGE: npm
CODE:
```
$ npm install -g eas-cli
```

----------------------------------------

TITLE: Starting Expo Development Server - Bash
DESCRIPTION: This command starts the Expo development server, providing options to open the app in a development build, Android emulator, iOS simulator, or Expo Go. It enables live reloading and debugging during the development process.
SOURCE: https://github.com/expo/expo/blob/main/templates/expo-template-default/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx expo start
```

----------------------------------------

TITLE: Installing EAS CLI Globally
DESCRIPTION: This command installs the EAS CLI globally on your local machine, enabling access to EAS services for building, updating, and submitting Expo applications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/tools.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
npm install -g eas-cli
```

----------------------------------------

TITLE: Installing a Third-Party Library with Expo CLI (Bash)
DESCRIPTION: This command demonstrates how to install a third-party library, `@react-navigation/native`, using `npx expo install`. This method is recommended over `npm install` or `yarn add` as it helps ensure compatibility with your Expo project by picking a compatible version.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/using-libraries.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
$ npx expo install @react-navigation/native
```

----------------------------------------

TITLE: Handling Push Notifications with React Navigation
DESCRIPTION: This TypeScript snippet shows how to configure React Navigation's `NavigationContainer` to handle deep links from push notifications. It overrides `getInitialURL` and `subscribe` methods within the `linking` configuration to process both standard deep links and URLs from Expo push notifications, ensuring the app navigates to the correct screen.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/notifications.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { Linking } from 'react-native';
import * as Notifications from 'expo-notifications';
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return (
    <NavigationContainer
      linking={{
        config: {
          // Configuration for linking
        },
        async getInitialURL() {
          // First, you may want to do the default deep link handling
          // Check if app was opened from a deep link
          const url = await Linking.getInitialURL();

          if (url != null) {
            return url;
          }

          // Handle URL from expo push notifications
          const response = await Notifications.getLastNotificationResponseAsync();

          return response?.notification.request.content.data.url;
        },
        subscribe(listener) {
          const onReceiveURL = ({ url }: { url: string }) => listener(url);

          // Listen to incoming links from deep linking
          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);

          // Listen to expo push notifications
          const subscription = Notifications.addNotificationResponseReceivedListener(response => {
            const url = response.notification.request.content.data.url;

            // Any custom logic to see whether the URL needs to be handled
            //...

            // Let React Navigation handle the URL
            listener(url);
          });

          return () => {
            // Clean up the event listeners
            eventListenerSubscription.remove();
            subscription.remove();
          };
        },
      }}>
      {/* Your app content */}
    </NavigationContainer>
  );
}
```

----------------------------------------

TITLE: Start Expo Development Server
DESCRIPTION: Execute this command in your project directory to launch the local development server. This server enables your development build on an iOS device to connect and receive live updates and logs.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-devices.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
$ npx expo start
```

----------------------------------------

TITLE: Initializing Supabase Client - TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to initialize the Supabase client using `createClient` from `@supabase/supabase-js`. It configures the client to use `AsyncStorage` for persistent session management, enables auto-refreshing of tokens, and disables session detection in the URL, ensuring secure and robust authentication within a React Native application.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-supabase.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import 'react-native-url-polyfill/auto';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL;
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});
```

----------------------------------------

TITLE: Implement Basic Navigation with Expo Router Link Component
DESCRIPTION: This snippet demonstrates how to use the `Link` component from `expo-router` to navigate between different screens in a React Native application. It shows importing `Link`, adding it to a component, and styling it to act as a clickable navigation element. The `href` prop specifies the target route.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { Text, View, StyleSheet } from 'react-native';
/* @tutinfo Import <CODE>Link</CODE> component from <CODE>expo-router</CODE>. */ import { Link } from 'expo-router'; /* @end */

export default function Index() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Home screen</Text>
      /* @tutinfo Add <CODE>Link</CODE> component after <CODE>Text</CODE> component and pass the <CODE>href</CODE> prop with <CODE>/about</CODE> route. */
      <Link href="/about" style={styles.button}>
        Go to About screen
      </Link>
      /* @end */
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
  /* @tutinfo Add the style of <CODE>fontSize</CODE>, <CODE>textDecorationLine</CODE>, and <CODE>color</CODE> to <CODE>Link</CODE> component. */
  button: {
    fontSize: 20,
    textDecorationLine: 'underline',
    color: '#fff',
  },
  /* @end */
});
```

----------------------------------------

TITLE: Automating Android Build and Submission with EAS
DESCRIPTION: This command automates the entire release process for an Android application by combining build creation and Google Play Store submission into a single step. The `--auto-submit` flag ensures that once the build is complete, it is automatically submitted to the configured track (e.g., production) on the Play Store.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/android-production-build.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
eas build --platform android --auto-submit
```

----------------------------------------

TITLE: Performing Basic CRUD Operations with Expo SQLite in JavaScript
DESCRIPTION: This example illustrates fundamental Create, Read, Update, and Delete (CRUD) operations using the `expo-sqlite` library. It covers opening a database, executing bulk queries with `execAsync`, performing write operations with `runAsync` (including parameter binding), and retrieving data using `getFirstAsync`, `getAllAsync`, and `getEachAsync`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#_snippet_1

LANGUAGE: js
CODE:
```
const db = await SQLite.openDatabaseAsync('databaseName');

// `execAsync()` is useful for bulk queries when you want to execute altogether.
// Note that `execAsync()` does not escape parameters and may lead to SQL injection.
await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

// `runAsync()` is useful when you want to execute some write operations.
const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object

// `getFirstAsync()` is useful when you want to get a single row from the database.
const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

// `getAllAsync()` is useful when you want to get all results as an array of objects.
const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

// `getEachAsync()` is useful when you want to iterate SQLite query cursor.
for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}
```

----------------------------------------

TITLE: Implement Keyboard-Aware Form Screen in React Native
DESCRIPTION: This code snippet demonstrates how to create a form screen in React Native that automatically adjusts to the software keyboard using `KeyboardAwareScrollView` and `KeyboardToolbar`. It wraps multiple `TextInput` components, ensuring they remain visible when focused and provides navigation controls for an improved user experience in forms.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/keyboard-handling.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { TextInput, View, StyleSheet } from 'react-native';
import { KeyboardAwareScrollView, KeyboardToolbar } from 'react-native-keyboard-controller';

export default function FormScreen() {
  return (
    <>
      <KeyboardAwareScrollView bottomOffset={62} contentContainerStyle={styles.container}>
        <View>
          <TextInput placeholder="Type a message..." style={styles.textInput} />
          <TextInput placeholder="Type a message..." style={styles.textInput} />
        </View>
        <TextInput placeholder="Type a message..." style={styles.textInput} />
        <View>
          <TextInput placeholder="Type a message..." style={styles.textInput} />
          <TextInput placeholder="Type a message..." style={styles.textInput} />
          <TextInput placeholder="Type a message..." style={styles.textInput} />
        </View>
        <TextInput placeholder="Type a message..." style={styles.textInput} />
      </KeyboardAwareScrollView>
      <KeyboardToolbar />
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    gap: 16,
    padding: 16,
  },
  listStyle: {
    padding: 16,
    gap: 16,
  },
  textInput: {
    width: 'auto',
    flexGrow: 1,
    flexShrink: 1,
    height: 45,
    borderWidth: 1,
    borderRadius: 8,
    borderColor: '#d8d8d8',
    backgroundColor: '#fff',
    padding: 8,
    marginBottom: 8,
  },
});
```

----------------------------------------

TITLE: Implementing Basic Video Playback with Controls in Expo React Native
DESCRIPTION: This snippet demonstrates how to integrate the `Video` component from `expo-av` into a React Native application to display and control video playback. It utilizes `useRef` to manage the video instance and `useState` to track playback status, enabling a play/pause toggle button. The component is configured to loop and use native controls, with `onPlaybackStatusUpdate` to update the UI. Dependencies include `expo-av` and `expo-asset`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/video-av.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState, useRef } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Video, ResizeMode } from 'expo-av';

export default function App() {
  const video = useRef(null);
  const [status, setStatus] = useState({});
  return (
    <View style={styles.container}>
      <Video
        ref={video}
        style={styles.video}
        source={{
          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        }}
        useNativeControls
        resizeMode={ResizeMode.CONTAIN}
        isLooping
        onPlaybackStatusUpdate={status => setStatus(() => status)}
      />
      <View style={styles.buttons}>
        <Button
          title={status.isPlaying ? 'Pause' : 'Play'}
          onPress={() =>
            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()
          }
        />
      </View>
    </View>
  );
}

/* @hide const styles = StyleSheet.create({ ... }); */
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
  },
  video: {
    alignSelf: 'center',
    width: 320,
    height: 200,
  },
  buttons: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
});
/* @end */
```

----------------------------------------

TITLE: Logging into Expo Account (EAS CLI/Shell)
DESCRIPTION: This command prompts you to log in to your Expo account via the EAS CLI. A successful login is required to use EAS services like building and submitting apps.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
eas login
```

----------------------------------------

TITLE: Resolving BlurView Rendering Order with FlatList - React Native
DESCRIPTION: This snippet illustrates the correct rendering order for `BlurView` when used with dynamic content components like `FlatList`. To ensure the blur effect updates properly, `BlurView` must be rendered *after* the dynamic content component, preventing issues where the blur does not apply to newly rendered items.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/blur-view.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
<View>
  <FlatList />
  <BlurView />
</View>
```

----------------------------------------

TITLE: Creating New Expo Project with Bun
DESCRIPTION: This command initializes a new Expo and React Native project using `bun create`. It's the recommended way to start a new project with Bun, leveraging Bun's fast runtime and package manager.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/create-expo.mdx#_snippet_3

LANGUAGE: Bun
CODE:
```
$ bun create expo
```

----------------------------------------

TITLE: Expo Router Root Layout with Font Loading and Splash Screen
DESCRIPTION: This snippet demonstrates a typical root `_layout.tsx` file in an Expo Router application. It serves as the entry point for navigation, handles asynchronous font loading using `expo-font`, and manages the splash screen visibility by preventing auto-hide and then hiding it once resources are loaded. It renders a `Stack` navigator as the top-level navigation.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/layout.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useFonts } from 'expo-font';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';

SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const [loaded] = useFonts({
    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),
  });

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return <Stack />;
}
```

----------------------------------------

TITLE: Installing Expo Package via npm
DESCRIPTION: This command adds the specified Expo package as a dependency to your project. It is the first step in integrating the package into a bare React Native project, ensuring all necessary files are downloaded and configured.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-module-scripts/templates/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install ${packageName}
```

----------------------------------------

TITLE: Deploying Hotfix to Production with EAS Update (Shell)
DESCRIPTION: This command bundles and pushes a new update to the 'production' channel using EAS Update, making hotfixes immediately available to users with the same runtime version. It's used for direct deployments to production.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/deployment.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
eas update --channel production
```

----------------------------------------

TITLE: Start the Expo development server
DESCRIPTION: Executes the `npx expo start` command to initiate the Metro bundler and start the development server for your Expo project. This command displays a QR code and a manifest URL, allowing you to access and test your development build on a device or emulator/simulator.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
$ npx expo start
```

----------------------------------------

TITLE: Nesting Protected Routes for Hierarchical Access Control (TypeScript)
DESCRIPTION: This snippet demonstrates how to nest `Stack.Protected` components to create hierarchical access control. The inner `Stack.Protected` for 'protected' requires both `isLoggedIn` and `isAdmin` to be true, while the outer `Stack.Protected` for 'about' only requires `isLoggedIn`. This allows for fine-grained control over route accessibility.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/protected.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { Stack } from 'expo-router';

const isLoggedIn = true;
const isAdmin = true;

export function AppLayout() {
  return (
    <Stack>
      <Stack.Protected guard={isLoggedIn}>
        <Stack.Protected guard={isAdmin}>
          <Stack.Screen name="protected" />
        </Stack.Protected>

        <Stack.Screen name="about" />
      </Stack.Protected>
    </Stack>
  );
}
```

----------------------------------------

TITLE: Update Expo App Index Screen Styles (React Native TSX)
DESCRIPTION: This TypeScript React Native snippet modifies `app/index.tsx`, the app's entry point, to customize its appearance. It imports `StyleSheet` to define `container` and `text` styles, setting the background to `#25292e` and the text color to `#fff` while changing the displayed text to 'Home screen'.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-your-first-app.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Text, View, /* @tutinfo Import <CODE>StyleSheet</CODE> to define styles. */ StyleSheet/* @end */ } from 'react-native';

export default function Index() {
  return (
    <View style={styles.container}>
      /* @tutinfo This used to say "Edit app/index.tsx to edit this screen". Now it says, "Home screen". */
      <Text style={styles.text}>Home screen</Text>
      /* @end */
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    /* @tutinfo Add the value of <CODE>backgroundColor</CODE> property with <CODE>'#25292e'</CODE>.*/
    backgroundColor: '#25292e',
    /* @end */
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
});
```

----------------------------------------

TITLE: Start Expo Development Server
DESCRIPTION: This command starts the local development server for your Expo project, allowing you to run and test your application on a device or simulator.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
$ npx expo start
```

----------------------------------------

TITLE: Install Multiple Expo SDK Packages
DESCRIPTION: Demonstrates how to install multiple Expo SDK packages, such as `expo-camera`, `expo-contacts`, and `expo-sensors`, using the `npx expo install` command. This command efficiently adds the specified packages to your project's dependencies, ensuring they are compatible with your current Expo SDK version.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/index.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
$ npx expo install expo-camera expo-contacts expo-sensors
```

----------------------------------------

TITLE: Configuring Fallback Screen for Denied Access (TypeScript)
DESCRIPTION: This example shows how Expo Router handles redirection when a protected screen is inaccessible. If `isLoggedIn` is false, the 'index' and 'private' screens within `Stack.Protected` become inaccessible. The router automatically redirects to the first available screen outside the protected group, which in this case is the 'login' screen.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/protected.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { Stack } from 'expo-router';

const isLoggedIn = false;

export function AppLayout() {
  return (
    <Stack>
      <Stack.Protected guard={isLoggedIn}>
        <Stack.Screen name="index" />
        <Stack.Screen name="private" />
      </Stack.Protected>

      <Stack.Screen name="login" />
    </Stack>
  );
}
```

----------------------------------------

TITLE: Capture and Save Screenshot in React Native Expo Application
DESCRIPTION: This TypeScript/React Native code snippet provides the complete `Index` component for an Expo application. It demonstrates how to capture a screenshot of a `View` component using `captureRef` from `react-native-view-shot` and save it to the device's media library via `MediaLibrary.saveToLibraryAsync()`. The `onSaveImageAsync` function handles the capture and save logic, utilizing a `useRef` hook to reference the target `View` and requesting media library permissions.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/screenshot.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { ImageSourcePropType, StyleSheet, View } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { useState, useRef } from 'react';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import *n as MediaLibrary from 'expo-media-library';
import { captureRef } from 'react-native-view-shot';

import Button from '@/components/Button';
import ImageViewer from '@/components/ImageViewer';
import IconButton from '@/components/IconButton';
import CircleButton from '@/components/CircleButton';
import EmojiPicker from '@/components/EmojiPicker';
import EmojiList from '@/components/EmojiList';
import EmojiSticker from '@/components/EmojiSticker';

const PlaceholderImage = require('@/assets/images/background-image.png');

export default function Index() {
  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);
  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);
  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);
  const [pickedEmoji, setPickedEmoji] = useState<ImageSourcePropType | undefined>(undefined);
  const [status, requestPermission] = MediaLibrary.usePermissions();
  const imageRef = useRef<View>(null);

  if (status === null) {
    requestPermission();
  }

  const pickImageAsync = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images'],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setSelectedImage(result.assets[0].uri);
      setShowAppOptions(true);
    } else {
      alert('You did not select any image.');
    }
  };

  const onReset = () => {
    setShowAppOptions(false);
  };

  const onAddSticker = () => {
    setIsModalVisible(true);
  };

  const onModalClose = () => {
    setIsModalVisible(false);
  };

  const onSaveImageAsync = async () => {
    try {
      const localUri = await captureRef(imageRef, {
        height: 440,
        quality: 1,
      });

      await MediaLibrary.saveToLibraryAsync(localUri);
      if (localUri) {
        alert('Saved!');
      }
    } catch (e) {
      console.log(e);
    }
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.imageContainer}>
        <View ref={imageRef} collapsable={false}>
          <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />
          {pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}
        </View>
      </View>
      {showAppOptions ? (
        <View style={styles.optionsContainer}>
          <View style={styles.optionsRow}>
            <IconButton icon="refresh" label="Reset" onPress={onReset} />
            <CircleButton onPress={onAddSticker} />
            <IconButton icon="save-alt" label="Save" onPress={onSaveImageAsync} />
          </View>
        </View>
      ) : (
        <View style={styles.footerContainer}>
          <Button theme="primary" label="Choose a photo" onPress={pickImageAsync} />
          <Button label="Use this photo" onPress={() => setShowAppOptions(true)} />
        </View>
      )}
      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>
        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />
      </EmojiPicker>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
  },
  imageContainer: {
    flex: 1,
  },
  footerContainer: {
    flex: 1 / 3,
    alignItems: 'center',
  },
  optionsContainer: {
    position: 'absolute',
    bottom: 80,
  },
  optionsRow: {
    alignItems: 'center',
    flexDirection: 'row',
  },
});
```

----------------------------------------

TITLE: Reading URL and query parameters in Expo Router
DESCRIPTION: This snippet demonstrates how to access dynamic route variables and query parameters on a destination page using the 'useLocalSearchParams' hook from 'expo-router'. It shows how to destructure the returned object to retrieve specific parameters like 'id' and 'limit' for display.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { useLocalSearchParams } from 'expo-router';
import { View, Text } from 'react-native';

export default function Users() {
  const { id, limit } = useLocalSearchParams();

  return (
    <View>
      <Text>User ID: {id}</Text>
      <Text>Limit: {limit}</Text>
    </View>
  );
}
```

----------------------------------------

TITLE: Configuring Android Package Name in app.json (JSON)
DESCRIPTION: This JSON snippet demonstrates how to define the Android package name within the `app.json` configuration file. The `package` field under the `android` object specifies a unique identifier for your application on the Google Play Store, which is crucial for app distribution.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "android": {
    "package": "com.yourcompany.yourapp"
  }
}
```

----------------------------------------

TITLE: Installing Expo Dev Client (npx/Shell)
DESCRIPTION: This command installs the `expo-dev-client` library into your project. This library is essential for creating development builds, which provide a flexible and complete development environment for faster iteration.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#_snippet_4

LANGUAGE: shell
CODE:
```
npx expo install expo-dev-client
```

----------------------------------------

TITLE: Installing expo-calendar npm package
DESCRIPTION: This command adds the `expo-calendar` package to your project's npm dependencies, which is the first step for integrating the module into bare React Native projects.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-calendar/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo install expo-calendar
```

----------------------------------------

TITLE: Installing Expo Contacts Package with npm
DESCRIPTION: This snippet demonstrates how to add the `expo-contacts` package to your project's npm dependencies using the `npx expo install` command, which is recommended for Expo projects.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-contacts/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo install expo-contacts
```

----------------------------------------

TITLE: Expo Router Authentication Context Provider (ctx.tsx)
DESCRIPTION: This React Context provider exposes an authentication session to the entire Expo app. It includes `signIn`, `signOut`, `session`, and `isLoading` properties. The implementation uses a mock authentication and depends on `useStorageState` for session persistence.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { use, createContext, type PropsWithChildren } from 'react';
import { useStorageState } from './useStorageState';

const AuthContext = createContext<{
  signIn: () => void;
  signOut: () => void;
  session?: string | null;
  isLoading: boolean;
}> ({
  signIn: () => null,
  signOut: () => null,
  session: null,
  isLoading: false,
});

// This hook can be used to access the user info.
export function useSession() {
  const value = use(AuthContext);
  if (!value) {
    throw new Error('useSession must be wrapped in a <SessionProvider />');
  }

  return value;
}

export function SessionProvider({ children }: PropsWithChildren) {
  const [[isLoading, session], setSession] = useStorageState('session');

  return (
    <AuthContext
      value={{
        signIn: () => {
          // Perform sign-in logic here
          setSession('xxx');
        },
        signOut: () => {
          setSession(null);
        },
        session,
        isLoading,
      }}>
      {children}
    </AuthContext>
  );
}
```

----------------------------------------

TITLE: Installing Dependencies for Expo Project - Bash
DESCRIPTION: This command installs all necessary project dependencies as defined in the `package.json` file. It is the first step required to set up the Expo application for development, ensuring all required packages are available.
SOURCE: https://github.com/expo/expo/blob/main/templates/expo-template-default/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Displaying Imported Assets in React Native Image Component
DESCRIPTION: Illustrates how to import an image asset and use it as the `source` for a `react-native` `Image` component. On native platforms, the asset resolves to a numeric ID, while on web/server it becomes an object with a `uri`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/config/metro.mdx#_snippet_24

LANGUAGE: javascript
CODE:
```
import { Image } from 'react-native';

import asset from './img.png';

function Demo() {
  return <Image source={asset} />;
}
```

----------------------------------------

TITLE: Configuring Custom Scheme in Expo App Config
DESCRIPTION: This snippet demonstrates how to add a custom URL scheme to your Expo application's `app.json` configuration. Defining a scheme like 'myapp' allows your app to be opened via URLs such as `myapp://`. If no custom scheme is specified, Expo defaults to using `android.package` and `ios.bundleIdentifier` as schemes.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-your-app.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    "scheme": "myapp"
  }
}
```

----------------------------------------

TITLE: Fetching Albums and Displaying Assets with Expo Media Library (React Native)
DESCRIPTION: This React Native snippet demonstrates how to request media library permissions, fetch albums, and then display assets within each album using expo-media-library. It includes a main App component to manage permissions and album fetching, and an AlbumEntry component to display individual album details and their contained assets.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#_snippet_4

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 8,
    justifyContent: 'center',
    ...Platform.select({
      android: {
        paddingTop: 4,
      },
    }),
  },
  albumContainer: {
    paddingHorizontal: 20,
    marginBottom: 12,
    gap: 4,
  },
  albumAssetsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
});
```

----------------------------------------

TITLE: Setting up SafeAreaProvider in React Native App Root (JSX)
DESCRIPTION: This code demonstrates how to wrap the root component of a React Native application with `SafeAreaProvider`. This provider is essential for the `useSafeAreaInsets` hook and `SafeAreaInsetsContext.Consumer` to function correctly, making safe area inset data available throughout the component tree. It may also be required for modals or routes when using `react-native-screen`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}
```

----------------------------------------

TITLE: Submitting iOS App via EAS CLI in CI/CD
DESCRIPTION: This command is used in CI/CD environments to submit an iOS production build to the Apple App Store using EAS CLI. The `--profile production` flag ensures the correct submission profile is used, and authentication is handled via the `EXPO_TOKEN` environment variable.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/ios.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
$ eas submit --platform ios --profile production
```

----------------------------------------

TITLE: Implementing Apple Sign-In Button and Flow (React Native)
DESCRIPTION: This React Native JSX snippet demonstrates how to integrate the `AppleAuthenticationButton` component and initiate the `signInAsync` flow. It requests full name and email scopes, and includes basic error handling for user cancellation or other issues during the authentication process. It requires `expo-apple-authentication` and `react-native`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/apple-authentication.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={styles.button}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            });
            // signed in
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 44,
  },
});
```

----------------------------------------

TITLE: Defining a Grouped Layout with Stack Navigator in Expo Router - TypeScript
DESCRIPTION: This snippet defines a layout file for a route group, `app/(home)/_layout.tsx`. It encapsulates a `Stack` navigator specifically for the 'index' and 'details' routes within the '(home)' group. This allows for applying specific screen options and navigation logic only to routes belonging to this group, isolating their UI configuration.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Stack } from 'expo-router';

export default function HomeLayout() {
  return (
    <Stack
      screenOptions={{
        headerStyle: {
          backgroundColor: '#f4511e',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      }}>
      <Stack.Screen name="index" />
      <Stack.Screen name="details" />
    </Stack>
  );
}
```

----------------------------------------

TITLE: Define a Reusable Button Component with Pressable in React Native
DESCRIPTION: This code defines a `Button` component in `Button.tsx` for React Native. It utilizes the `<Pressable>` component to handle touch events, displaying an alert on press. The component is styled using `StyleSheet` and accepts a `label` prop for custom text.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { StyleSheet, View, Pressable, Text } from 'react-native';

type Props = {
  label: string;
};

export default function Button({ label }: Props) {
  return (
    <View style={styles.buttonContainer}>
      <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>
        <Text style={styles.buttonLabel}>{label}</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  buttonContainer: {
    width: 320,
    height: 68,
    marginHorizontal: 20,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 3,
  },
  button: {
    borderRadius: 10,
    width: '100%',
    height: '100%',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
  },
  buttonLabel: {
    color: '#fff',
    fontSize: 16,
  },
});
```

----------------------------------------

TITLE: Preventing Autohide in Component Mount with Resource Loading - Expo Splash Screen - TSX
DESCRIPTION: This example shows how to prevent the splash screen from hiding within the `componentDidMount` method of a class component that initially renders `null` while resources are being loaded. It uses `SplashScreen.preventAutoHideAsync()` and then calls `SplashScreen.hideAsync()` only after asynchronous resource loading (simulated by `performAPICalls` and `downloadAssets`) is complete and the component state is updated to render the main content.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#_snippet_2

LANGUAGE: tsx
CODE:
```
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
import * as SplashScreen from 'expo-splash-screen';

export default class App extends React.Component {
  state = {
    appIsReady: false,
  };

  async componentDidMount() {
    // Prevent native splash screen from autohiding
    try {
      await SplashScreen.preventAutoHideAsync();
    } catch (e) {
      console.warn(e);
    }
    this.prepareResources();
  }

  /**
   * Method that serves to load resources and make API calls
   */
  prepareResources = async () => {
    await performAPICalls(...);
    await downloadAssets(...);

    this.setState({ appIsReady: true }, async () => {
      await SplashScreen.hideAsync();
    });
  }

  render() {
    if (!this.state.appIsReady) {
      return null;
    }

    return (
      <View style={styles.container}>
        <Text style={styles.text}>SplashScreen Demo! 👋</Text>
      </View>
    )
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#aabbcc',
  },
  text: {
    color: 'white',
    fontWeight: 'bold',
  },
});
```

----------------------------------------

TITLE: Configure Metro for Firebase JS SDK (v9.7.x+)
DESCRIPTION: This configuration is essential for Expo projects using Firebase JS SDK versions 9.7.x and above. It modifies the `metro.config.js` file to add support for `.cjs` file extensions and disables `unstable_enablePackageExports`, ensuring the Firebase SDK is bundled correctly by Metro.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-firebase.mdx#_snippet_2

LANGUAGE: js
CODE:
```
const { getDefaultConfig } = require('@expo/metro-config');

const config = getDefaultConfig(__dirname);
config.resolver.sourceExts.push('cjs');
config.resolver.unstable_enablePackageExports = false;

module.exports = config;
```

----------------------------------------

TITLE: Getting Current Location with Expo Location in React Native
DESCRIPTION: This React Native component demonstrates how to fetch the user's current location using `expo-location`. It requests foreground location permissions upon component mount and, if granted, retrieves the current position. The snippet includes state management for location data and error messages, displaying the result or an error to the user. It also contains a platform-specific check for Android emulators.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
/* @hide */
import * as Device from 'expo-device';
/* @end */
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);

  useEffect(() => {
    (async () => {
      /* @hide */
      if (Platform.OS === 'android' && !Device.isDevice) {
        setErrorMsg(
          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'
        );
        return;
      }
      /* @end */
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    })();
  }, []);

  let text = 'Waiting..';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  paragraph: {
    fontSize: 18,
    textAlign: 'center',
  },
});
```

----------------------------------------

TITLE: Initializing URL and URLSearchParams (TypeScript)
DESCRIPTION: This snippet shows the basic initialization of `URL` and `URLSearchParams` objects, which provide standard web APIs for parsing and manipulating URLs and their query parameters. These objects are globally available across all platforms in Expo, replacing previous shims on native environments.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/expo.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
const url = new URL('https://expo.dev');

const params = new URLSearchParams();
```

----------------------------------------

TITLE: Using expo-sqlite/kv-store for Async Key-Value Storage (TypeScript)
DESCRIPTION: This example demonstrates using `expo-sqlite/kv-store` as an asynchronous key-value storage solution. It shows how to `setItem` to store a stringified JSON object and then `getItem` to retrieve and parse it, providing a drop-in replacement for `@react-native-async-storage/async-storage`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/sqlite.mdx#_snippet_13

LANGUAGE: ts
CODE:
```
// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.
import Storage from 'expo-sqlite/kv-store';

await Storage.setItem('key', JSON.stringify({ entity: 'value' }));
const value = await Storage.getItem('key');
const entity = JSON.parse(value);
console.log(entity); // { entity: 'value' }
```

----------------------------------------

TITLE: Configuring Environment Variables in EAS Build Profiles (JSON)
DESCRIPTION: This snippet demonstrates how to define environment variables within specific build profiles in eas.json using the 'env' field. It shows how a 'preview' profile can extend a 'production' profile, inheriting its settings while overriding specific environment variables like 'API_URL' for different deployment stages.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#_snippet_11

LANGUAGE: json
CODE:
```
{
  "build": {
    "production": {
      "node": "16.13.0",
      "env": {
        "API_URL": "https://company.com/api"
      }
    },
    "preview": {
      "extends": "production",
      "distribution": "internal",
      "env": {
        "API_URL": "https://staging.company.com/api"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure EAS Workflow to Trigger on GitHub Push
DESCRIPTION: This YAML configuration defines an EAS workflow that automatically triggers when a commit is pushed to the `main` branch of the linked GitHub repository. It includes two build jobs, one for Android and one for iOS, demonstrating how to set up continuous integration for mobile builds.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/get-started.mdx#_snippet_5

LANGUAGE: YAML
CODE:
```
name: Create Production Builds

# @info #
on:
  push:
    branches: ['main']
  # @end #

  jobs:
    build_android:
      type: build
      params:
        platform: android
    build_ios:
      type: build
```

----------------------------------------

TITLE: Implementing Basic Video Playback with Play/Pause in React Native (expo-av)
DESCRIPTION: This snippet demonstrates how to integrate the `Video` component from `expo-av` into a React Native application. It shows how to play a video from a URI, use native controls, handle playback status updates, and implement a custom play/pause button using `useRef` and `useState` hooks. Dependencies include `expo-av` and `react-native`. The `Video` component expects a `source` URI and can be controlled programmatically via its `ref`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/video-av.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState, useRef } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Video, ResizeMode } from 'expo-av';

export default function App() {
  const video = useRef(null);
  const [status, setStatus] = useState({});
  return (
    <View style={styles.container}>
      <Video
        ref={video}
        style={styles.video}
        source={{
          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        }}
        useNativeControls
        resizeMode={ResizeMode.CONTAIN}
        isLooping
        onPlaybackStatusUpdate={status => setStatus(() => status)}
      />
      <View style={styles.buttons}>
        <Button
          title={status.isPlaying ? 'Pause' : 'Play'}
          onPress={() =>
            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()
          }
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
  },
  video: {
    alignSelf: 'center',
    width: 320,
    height: 200,
  },
  buttons: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```

----------------------------------------

TITLE: Building Production Android App with EAS Build (Shell)
DESCRIPTION: This command initiates a production build for an Android application using EAS Build, preparing the app for submission to the Google Play Store by applying the specified production profile.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_8

LANGUAGE: Shell
CODE:
```
eas build --platform android --profile production
```

----------------------------------------

TITLE: Migrating React Navigation `Link` component to Expo Router `Link` component
DESCRIPTION: This snippet highlights the difference in usage between React Navigation's `Link` component and Expo Router's `Link` component. React Navigation uses the `to` prop for navigation targets, while Expo Router uses the `href` prop, typically with absolute paths.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#_snippet_8

LANGUAGE: jsx
CODE:
```
// React Navigation
<Link to="Settings" />

// Expo Router
<Link href="/settings" />
```

----------------------------------------

TITLE: Implementing Suspense in a Client Component (Expo)
DESCRIPTION: This snippet demonstrates how to use React Suspense in a client component to stream back partial UI. It shows an immediate 'Loading...' fallback while asynchronous tasks render, which are then replaced by the final content.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react';
import { renderMediumTask, renderExpensiveTask } from '@/actions/tasks';

export default function App() {
  return <Suspense fallback={<Text>Loading...</Text>}>{renderTasks()}</Suspense>;
}
```

----------------------------------------

TITLE: Configuring EAS Build Environments in eas.json (JSON)
DESCRIPTION: Shows how to define build profiles in `eas.json` and explicitly set the `environment` for each, such as `development`, `preview`, or `production`. This configuration dictates which set of environment variables will be available during the build process for a given profile.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/environment-variables.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  "build": {
    "development": {
      "environment": "development"
    },
    "preview": {
      "environment": "preview"
    },
    "production": {
      "environment": "production"
    },
    "my-profile": {
      "environment": "production"
    }
  }
}
```

----------------------------------------

TITLE: Configure Root Layout for Nested Tab Navigator (Expo Router)
DESCRIPTION: This TypeScript/React code updates the `app/_layout.tsx` file to integrate a tab navigator within a parent stack navigator. It sets `headerShown: false` for the `(tabs)` screen to prevent duplicate headers when nesting navigators, ensuring a clean UI.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      /* @tutinfo This is how a tab navigator is nested inside a stack navigator, especially when the Root layout is composed of a parent stack navigator. We're also setting the <CODE>headerShown</CODE> option to <CODE>false</CODE> to hide the header for the tab navigator. Otherwise, there will be two headers displayed on each screen. */
      <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
      /* @end */
    </Stack>
  );
}
```

----------------------------------------

TITLE: Creating a Server Component for Data Fetching in Expo
DESCRIPTION: This server component (`components/pokemon.tsx`) is marked with `'server-only'` to ensure it only runs on the server. It demonstrates asynchronous data fetching from an external API (`pokeapi.co`) and renders the fetched data using React Native components, showcasing server-side data access.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import 'server-only';

import { Image, Text, View } from 'react-native';

export async function Pokemon() {
  const res = await fetch('https://pokeapi.co/api/v2/pokemon/2');
  const json = await res.json();
  return (
    <View style={{ padding: 8, borderWidth: 1 }}>
      <Text style={{ fontWeight: 'bold', fontSize: 24 }}>{json.name}</Text>
      <Image source={{ uri: json.sprites.front_default }} style={{ width: 100, height: 100 }} />

      {json.abilities.map(ability => (
        <Text key={ability.ability.name}>- {ability.ability.name}</Text>
      ))}
    </View>
  );
}
```

----------------------------------------

TITLE: Implementing Basic Protected Routes with Stack Navigator (TypeScript)
DESCRIPTION: This snippet demonstrates how to protect routes using `Stack.Protected` in Expo Router. The `guard` prop determines access; if `!isLoggedIn` is true, the 'login' screen is protected, and if `isLoggedIn` is true, the 'private' screen is protected. Users attempting to access a protected screen when the guard is false are redirected to the anchor route (index).
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/protected.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { Stack } from 'expo-router';

const isLoggedIn = false;

export function AppLayout() {
  return (
    <Stack>
      <Stack.Protected guard={!isLoggedIn}>
        <Stack.Screen name="login" />
      </Stack.Protected>

      <Stack.Protected guard={isLoggedIn}>
        <Stack.Screen name="private" />
      </Stack.Protected>
      {/* Expo Router includes all routes by default. Adding Stack.Protected creates exceptions for these screens. */}
    </Stack>
  );
}
```

----------------------------------------

TITLE: Using Prepared Statements for Efficient Database Operations in TypeScript
DESCRIPTION: This snippet demonstrates how to use prepared statements in `expo-sqlite` for efficient, repeated query execution with different parameters. It covers preparing a statement with `prepareAsync`, executing it multiple times with `executeAsync` (using named parameters), and crucially, finalizing the statement with `finalizeAsync` within a `try-finally` block to ensure resource release. It also shows how to fetch results from a prepared statement's execution, including resetting the cursor.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
const statement = await db.prepareAsync(
  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'
);
try {
  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });
  console.log('bbb and 101:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });
  console.log('ccc and 102:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });
  console.log('ddd and 103:', result.lastInsertRowId, result.changes);
} finally {
  await statement.finalizeAsync();
}

const statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');
try {
  const result = await statement2.executeAsync<{ value: string; intValue: number }>({
    $intValue: 100,
  });

  // `getFirstAsync()` is useful when you want to get a single row from the database.
  const firstRow = await result.getFirstAsync();
  console.log(firstRow.id, firstRow.value, firstRow.intValue);

  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.
  await result.resetAsync();

  // `getAllAsync()` is useful when you want to get all results as an array of objects.
  const allRows = await result.getAllAsync();
  for (const row of allRows) {
    console.log(row.value, row.intValue);
  }

  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.
  await result.resetAsync();

  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.
  for await (const row of result) {
    console.log(row.value, row.intValue);
  }
} finally {
  await statement2.finalizeAsync();
}
```

----------------------------------------

TITLE: Basic Camera Usage in React Native with Expo Camera
DESCRIPTION: This React Native (TypeScript) example demonstrates basic camera functionality using `expo-camera`. It handles camera permission requests, displays a camera preview, and allows toggling between front and back cameras. It includes a basic UI with a button for flipping the camera.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/camera.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    // Camera permissions are still loading.
    return <View />;
  }

  if (!permission.granted) {
    // Camera permissions are not granted yet.
    return (
      <View style={styles.container}>
        <Text style={styles.message}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  message: {
    textAlign: 'center',
    paddingBottom: 10,
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});
```

----------------------------------------

TITLE: Clearing React Native CLI Caches with Yarn on Windows
DESCRIPTION: This snippet details the commands to clear development caches for a React Native CLI project using Yarn on Windows. It includes removing `node_modules`, cleaning Yarn's global cache, reinstalling dependencies, resetting Watchman, deleting temporary haste-map and Metro caches, and starting the React Native development server with cache reset.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/troubleshooting/clear-cache-windows.mdx#_snippet_2

LANGUAGE: Batch
CODE:
```
# With Yarn workspaces, you may need to delete node_modules in each workspace
$ rm -rf node_modules

$ yarn cache clean

$ yarn

$ watchman watch-del-all

$ del %localappdata%\\Temp\\haste-map-*

$ del %localappdata%\\Temp\\metro-cache

$ yarn start -- --reset-cache
```

----------------------------------------

TITLE: Initialize Firebase SDK in Expo Project
DESCRIPTION: This code snippet demonstrates how to initialize the Firebase SDK in an Expo project. It involves creating a `firebaseConfig.js` file, defining a configuration object with your Firebase project's API key and other identifiers, and then calling `initializeApp()` from `firebase/app`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/using-firebase.mdx#_snippet_1

LANGUAGE: js
CODE:
```
import { initializeApp } from 'firebase/app';

// Optionally import the services that you want to use
// import {...} from 'firebase/auth';
// import {...} from 'firebase/database';
// import {...} from 'firebase/firestore';
// import {...} from 'firebase/functions';
// import {...} from 'firebase/storage';

// Initialize Firebase
const firebaseConfig = {
  apiKey: 'api-key',
  authDomain: 'project-id.firebaseapp.com',
  databaseURL: 'https://project-id.firebaseio.com',
  projectId: 'project-id',
  storageBucket: 'project-id.appspot.com',
  messagingSenderId: 'sender-id',
  appId: 'app-id',
  measurementId: 'G-measurement-id',
};

const app = initializeApp(firebaseConfig);
// For more information on how to access Firebase in your project,
// see the Firebase documentation: https://firebase.google.com/docs/web/setup#access-firebase
```

----------------------------------------

TITLE: Requesting Foreground Location and Displaying Current Position (Expo TypeScript)
DESCRIPTION: This TypeScript React Native component demonstrates requesting foreground location permissions using `expo-location` and then fetching the device's current geographical position. It includes state management for location data and error messages, and a platform-specific check to advise against running on Android emulators in Snack, ensuring a robust user experience.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/location.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
/* @hide */
import * as Device from 'expo-device';
/* @end */
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  useEffect(() => {
    async function getCurrentLocation() {
      /* @hide */
      if (Platform.OS === 'android' && !Device.isDevice) {
        setErrorMsg(
          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'
        );
        return;
      }
      /* @end */
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    }

    getCurrentLocation();
  }, []);

  let text = 'Waiting...';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  paragraph: {
    fontSize: 18,
    textAlign: 'center',
  },
});
```

----------------------------------------

TITLE: Initializing URL and URLSearchParams in JavaScript
DESCRIPTION: This snippet demonstrates the basic instantiation of `URL` and `URLSearchParams` objects using the standard URL API available in Expo. It shows how to create a URL object from a string and an empty URLSearchParams object, which can be used for managing query parameters.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/url.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
const url = new URL('https://expo.dev');

const params = new URLSearchParams();
```

----------------------------------------

TITLE: Adding Camera and Microphone Usage Descriptions to iOS Info.plist (XML)
DESCRIPTION: This XML snippet demonstrates how to add the `NSCameraUsageDescription` and `NSMicrophoneUsageDescription` keys to your iOS `Info.plist` file. These keys provide user-facing strings that explain why your app needs access to the camera and microphone, which is required by Apple's privacy guidelines.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/camera.mdx#_snippet_3

LANGUAGE: xml
CODE:
```
<key>NSCameraUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your camera</string>
<key>NSMicrophoneUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your microphone</string>
```

----------------------------------------

TITLE: Enable Strict Type Checking in tsconfig.json
DESCRIPTION: Modify the `tsconfig.json` file to enable strict type checking under `compilerOptions`. This configuration enforces stricter type rules, which can significantly reduce the chances of runtime errors and improve code reliability.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/typescript.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true
  }
}
```

----------------------------------------

TITLE: Build Expo App for iOS Locally
DESCRIPTION: Following an `expo prebuild` operation to update native project files, execute this command to rebuild and run your Expo application on an iOS device or simulator. This step is crucial for applying any recent native code modifications and is used for local development.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/development-builds/expo-go-to-dev-build.mdx#_snippet_5

LANGUAGE: Shell
CODE:
```
npx expo run:ios
```

----------------------------------------

TITLE: Running Expo iOS Project on a Connected Device
DESCRIPTION: This command builds and runs the Expo project on a connected iOS device. It also starts a development server, eliminating the need for a separate `npx expo start` command. Ensure `ios.bundleIdentifier` is set in `app.json` for proper provisioning.
SOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/iosPhysicalDevelopmentBuildLocal.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
npx expo run:ios --device
```

----------------------------------------

TITLE: Navigating to Dynamic Routes with Expo Router Link and Href Object
DESCRIPTION: This example illustrates how to navigate to a dynamic route using the `Link` component's `href` prop as an object. This approach allows specifying the dynamic route's `pathname` and passing parameters separately via the `params` property, offering a more structured way to handle dynamic navigation.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/dynamic-routes.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Link } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';

export default function HomeScreen() {
  return (
    <View style={styles.container}>
      <Text>Home</Text>
      <Link
        href={{
          pathname: '/details/[id]',
          params: { id: 'bacon' },
        }}>
        View user details
      </Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```

----------------------------------------

TITLE: Define Expo Router API Route Handlers for HTTP Methods
DESCRIPTION: This TypeScript snippet defines a basic GET endpoint for an Expo Router API route, returning a JSON object. Expo Router allows exporting functions like `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD`, and `OPTIONS` from server route files (e.g., `+api.ts`) to handle corresponding HTTP methods. Unsupported methods automatically return a `405: Method not allowed` response.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
export function GET(request: Request) {
  return Response.json({ hello: 'world' });
}
```

----------------------------------------

TITLE: React Native Conditional UI Rendering and Styling
DESCRIPTION: This snippet illustrates conditional rendering of UI elements in a React Native application, displaying different button options based on application state. It also defines various styles using `StyleSheet.create` for layout and appearance of containers and rows, including absolute positioning for an options overlay.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#_snippet_5

LANGUAGE: React Native
CODE:
```
            <IconButton icon="save-alt" label="Save" onPress={onSaveImageAsync} />
          </View>
        </View>
        /* @end */
      ) : (
        <View style={styles.footerContainer}>
          <Button theme="primary" label="Choose a photo" onPress={pickImageAsync} />
          <Button label="Use this photo" onPress={() => setShowAppOptions(true)} />
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
  },
  imageContainer: {
    flex: 1,
  },
  footerContainer: {
    flex: 1 / 3,
    alignItems: 'center',
  },
  /* @tutinfo Add styles for the new <CODE>View</CODE> components. */
  optionsContainer: {
    position: 'absolute',
    bottom: 80,
  },
  optionsRow: {
    alignItems: 'center',
    flexDirection: 'row',
  },
  /* @end */
});
```

----------------------------------------

TITLE: Creating a Basic Counter Component with React and ReactDOM
DESCRIPTION: This snippet demonstrates how to create a simple functional React component using `useState` for state management and render it to the DOM using `createRoot` from `react-dom/client`. It shows a counter that increments on button click, illustrating basic component definition and rendering.
SOURCE: https://github.com/expo/expo/blob/main/packages/@expo/cli/static/canary-full/react/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { useState } from 'react';
import { createRoot } from 'react-dom/client';

function Counter() {
  const [count, setCount] = useState(0);
  return (
    <>
      <h1>{count}</h1>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
    </>
  );
}

const root = createRoot(document.getElementById('root'));
root.render(<Counter />);
```

----------------------------------------

TITLE: Using SafeAreaView Component in React Native
DESCRIPTION: This example shows how to wrap content with `SafeAreaView` to automatically apply safe area insets as padding. It functions as a regular `View` but adjusts its padding to avoid device interface elements like notches and status bars. For web targets, `SafeAreaProvider` must be set up.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { SafeAreaView } from 'react-native-safe-area-context';

function SomeComponent() {
  return (
    <SafeAreaView>
      <View />
    </SafeAreaView>
  );
}
```

----------------------------------------

TITLE: Applying Protected Routes to Tabs Navigator (TypeScript)
DESCRIPTION: This snippet demonstrates how `Protected` components can be used with `Tabs` navigators, similar to `Stack`. The 'private' and 'profile' tabs are protected if `isLoggedIn` is true, while the 'login' tab is protected if `!isLoggedIn` is true. This ensures consistent access control across different navigator types.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/protected.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { Tabs } from 'expo-router';

const isLoggedIn = false;

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen name="index" options={{ tabBarLabel: "Home" }} />
      <Tabs.Protected guard={isLoggedIn}>
        <Tabs.Screen name="private" options={{ tabBarLabel: "Private" }} />
        <Tabs.Screen name="profile" options={{ tabBarLabel: "Profile" }} />
      </Tabs.Protected>

      <Tabs.Protected guard={!isLoggedIn}>
        <Tabs.Screen name="login" options={{ tabBarLabel: "Login" }} />
      </Tabs.Protected>
    </Tabs>
  );
}
```

----------------------------------------

TITLE: Importing Core Components from Expo Router
DESCRIPTION: This JavaScript snippet demonstrates how to import essential navigation components like `Stack`, `Tabs`, and `Link` from the `expo-router` library for use in React Native and web applications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/router.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import { Stack, Tabs, Link } from 'expo-router';
```

----------------------------------------

TITLE: Dynamically Configuring app.config.js with Environment Variables (JavaScript)
DESCRIPTION: This `app.config.js` snippet demonstrates how to dynamically set application properties like `name` and `bundleIdentifier` based on the `APP_ENV` environment variable. It allows the application to have different names and bundle identifiers for production and development builds, leveraging environment variables passed from EAS Build profiles.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/automate-submissions.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
export default () => {
  return {
    name: process.env.APP_ENV === 'production' ? 'My App' : 'My App (DEV)',
    ios: {
      bundleIdentifier: process.env.APP_ENV === 'production' ? 'com.my.app' : 'com.my.app-dev',
    },
    // ... other config here
  };
};
```

----------------------------------------

TITLE: React Native UI Layout and Emoji Picker Integration
DESCRIPTION: This snippet defines the main application layout using React Native's `View` and `StyleSheet`. It includes `Button` components for user interaction and integrates an `EmojiPicker` component, demonstrating how `EmojiList` is rendered within it to handle emoji selection and modal closure. The `styles` object defines the visual properties for various containers.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#_snippet_11

LANGUAGE: jsx
CODE:
```
        <View style={styles.footerContainer}>
          <Button theme="primary" label="Choose a photo" onPress={pickImageAsync} />
          <Button label="Use this photo" onPress={() => setShowAppOptions(true)} />
        </View>
      )}
      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>
        /* @tutinfo Render the <CODE>EmojiList</CODE> component inside the <CODE>EmojiPicker</CODE> component. */
        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />
        /* @end */
      </EmojiPicker>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
  },
  imageContainer: {
    flex: 1,
  },
  footerContainer: {
    flex: 1 / 3,
    alignItems: 'center',
  },
  optionsContainer: {
    position: 'absolute',
    bottom: 80,
  },
  optionsRow: {
    alignItems: 'center',
    flexDirection: 'row',
  }
});
```

----------------------------------------

TITLE: Animating View Width with React Native Reanimated (JSX)
DESCRIPTION: This example demonstrates how to create a simple width animation using `react-native-reanimated`. It utilizes `useSharedValue` to manage the animated width, `withTiming` for a smooth transition with a custom easing curve, and `useAnimatedStyle` to apply the animated property to a `View` component. A button press triggers the animation by updating the shared value.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/reanimated.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
    duration: 500,
    easing: Easing.bezier(0.5, 0.01, 0, 1),
  };

  const style = useAnimatedStyle(() => {
    return {
      width: withTiming(randomWidth.value, config),
    };
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, style]} />
      <Button
        title="toggle"
        onPress={() => {
          randomWidth.value = Math.random() * 350;
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  box: {
    width: 100,
    height: 80,
    backgroundColor: 'black',
    margin: 30,
  },
});
```

----------------------------------------

TITLE: Configure babel.config.js with babel-preset-expo
DESCRIPTION: Ensures that `babel-preset-expo` is used as the Babel preset in `babel.config.js`, which is essential for correct transpilation of JavaScript code in Expo projects.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/installation.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};
```

----------------------------------------

TITLE: Implement Platform-Specific Image Saving in Expo React Native
DESCRIPTION: This code snippet demonstrates how to modify the `onSaveImageAsync` function to handle image saving differently based on the platform. For web, it uses `domtoimage.toJpeg` to convert and capture the current `<View>` as a JPEG image. For native platforms, it continues to use `captureRef` from `react-native-view-shot` and `MediaLibrary.saveToLibraryAsync` to save the image to the device's media library. It also includes the necessary imports for `Platform` and `dom-to-image`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/platform-differences.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { ImageSourcePropType, View, StyleSheet, Platform } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { useState, useRef } from 'react';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import * as MediaLibrary from 'expo-media-picker';
import { captureRef } from 'react-native-view-shot';
import domtoimage from 'dom-to-image';

import Button from '@/components/Button';
import ImageViewer from '@/components/ImageViewer';
import IconButton from '@/components/IconButton';
import CircleButton from '@/components/CircleButton';
import EmojiPicker from '@/components/EmojiPicker';
import EmojiList from '@/components/EmojiList';
import EmojiSticker from '@/components/EmojiSticker';

const PlaceholderImage = require('@/assets/images/background-image.png');

export default function Index() {
  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);
  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);
  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);
  const [pickedEmoji, setPickedEmoji] = useState<ImageSourcePropType | undefined>(undefined);
  const [status, requestPermission] = MediaLibrary.usePermissions();
  const imageRef = useRef<View>(null);

  if (status === null) {
    requestPermission();
  }

  const pickImageAsync = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images'],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setSelectedImage(result.assets[0].uri);
      setShowAppOptions(true);
    } else {
      alert('You did not select any image.');
    }
  };

  const onReset = () => {
    setShowAppOptions(false);
  };

  const onAddSticker = () => {
    setIsModalVisible(true);
  };

  const onModalClose = () => {
    setIsModalVisible(false);
  };

  const onSaveImageAsync = async () => {
    if (Platform.OS !== 'web') {
      try {
        const localUri = await captureRef(imageRef, {
          height: 440,
          quality: 1,
        });

        await MediaLibrary.saveToLibraryAsync(localUri);
        if (localUri) {
          alert('Saved!');
        }
      } catch (e) {
        console.log(e);
      }
    } else {
      try {
        const dataUrl = await domtoimage.toJpeg(imageRef.current, {
          quality: 0.95,
          width: 320,
          height: 440,
        });

        let link = document.createElement('a');
        link.download = 'sticker-smash.jpeg';
        link.href = dataUrl;
        link.click();
      } catch (e) {
        console.log(e);
      }
    }
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.imageContainer}>
        <View ref={imageRef} collapsable={false}>
          <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />
          {pickedEmoji && <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />}
        </View>
      </View>
      {showAppOptions ? (
        <View style={styles.optionsContainer}>
          <View style={styles.optionsRow}>
            <IconButton icon="refresh" label="Reset" onPress={onReset} />
            <CircleButton onPress={onAddSticker} />
            <IconButton icon="save-alt" label="Save" onPress={onSaveImageAsync} />
          </View>
        </View>
      ) : (
        <View style={styles.footerContainer}>
          <Button theme="primary" label="Choose a photo" onPress={pickImageAsync} />
          <Button label="Use this photo" onPress={() => setShowAppOptions(true)} />
        </View>
      )}
      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>
        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />
      </EmojiPicker>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
  },
  imageContainer: {
    flex: 1,
  },
  footerContainer: {
    flex: 1 / 3,
    alignItems: 'center',
  }
});
```

----------------------------------------

TITLE: Re-publishing a Previous Expo Update
DESCRIPTION: This snippet provides the command-line syntax and examples for using `eas update:republish` to revert to a known good update. You can re-publish by specifying the update group ID of the good update or by targeting a specific branch.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/debug.mdx#_snippet_19

LANGUAGE: bash
CODE:
```
# eas update:republish --group [update-group-id]
# eas update:republish --branch [branch-name]

# Example
$ eas update:republish --group abc1
$ eas update:republish --branch production
```

----------------------------------------

TITLE: Universal Safe Area Handling with useSafeAreaInsets Hook (JSX)
DESCRIPTION: This snippet demonstrates the universal approach to handling safe area insets using the `useSafeAreaInsets` hook from `react-native-safe-area-context`. It replaces the platform-specific CSS environment variables by providing a consistent way to access `top`, `left`, `bottom`, and `right` inset values, which are then applied as padding to a `View` component, making the UI adaptable across various devices and platforms.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#_snippet_7

LANGUAGE: jsx
CODE:
```
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const insets = useSafeAreaInsets();
  return (
    <View
      style={{
        paddingTop: insets.top,
        paddingLeft: insets.left,
        paddingBottom: insets.bottom,
        paddingRight: insets.right,
      }}
    />
  );
}
```

----------------------------------------

TITLE: Generating App Signing Credentials with EAS Build (CLI)
DESCRIPTION: This command initiates the build process for your application. If credentials are not already set up, it will prompt you to generate them, storing them on EAS servers for future re-use. It's the primary command for building and signing your app.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/managed-credentials.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
eas build
```

----------------------------------------

TITLE: Adding Web Metadata with React 19 Features (Expo)
DESCRIPTION: This snippet illustrates how to leverage React 19 features to place `<meta>` tags directly within your component tree. It conditionally renders web-specific metadata based on the `EXPO_OS` environment variable.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
export default function Index() {
  return (
    <>
      {process.env.EXPO_OS === 'web' && (
        <>
          <meta name="description" content="Hello, world!" />
          <meta property="og:image" content="/og-image.png" />
        </>
      )}
      <MyComponent />
    </>
  );
}
```

----------------------------------------

TITLE: Manually Checking and Applying Expo Updates
DESCRIPTION: This React Native (JSX) code demonstrates how to manually check for, download, and apply updates using the `expo-updates` library. It involves setting `checkAutomatically` to `ON_ERROR_RECOVERY` or `NEVER` in configuration, then using `Updates.checkForUpdateAsync()`, `Updates.fetchUpdateAsync()`, and `Updates.reloadAsync()` to manage the update process programmatically, typically triggered by a user action like a button press.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/updates.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import { View, Button } from 'react-native';
import * as Updates from 'expo-updates';

function App() {
  async function onFetchUpdateAsync() {
    try {
      const update = await Updates.checkForUpdateAsync();

      if (update.isAvailable) {
        await Updates.fetchUpdateAsync();
        await Updates.reloadAsync();
      }
    } catch (error) {
      // You can also add an alert() to see the error message in case of an error when fetching updates.
      alert(`Error fetching latest Expo update: ${error}`);
    }
  }

  return (
    <View>
      <Button title="Fetch update" onPress={onFetchUpdateAsync} />
    </View>
  );
}
```

----------------------------------------

TITLE: Configure Tab Bar Icons with Ionicons in Expo Router
DESCRIPTION: This code modifies `(tabs)/_layout.tsx` to integrate custom tab bar icons using `Ionicons` from `@expo/vector-icons`. It sets `tabBarIcon` for 'index' and 'about' routes, dynamically changing icons based on focus, and applies a global `tabBarActiveTintColor`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/add-navigation.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Tabs } from 'expo-router';
import Ionicons from '@expo/vector-icons/Ionicons';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: '#ffd33d',
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color, focused }) => (
            <Ionicons name={focused ? 'home-sharp' : 'home-outline'} color={color} size={24} />
          ),
        }}
      />
      <Tabs.Screen
        name="about"
        options={{
          title: 'About',
          tabBarIcon: ({ color, focused }) => (
            <Ionicons name={focused ? 'information-circle' : 'information-circle-outline'} color={color} size={24}/>
          ),
        }}
      />
    </Tabs>
  );
}
```

----------------------------------------

TITLE: Example app.json for Initial Expo Configuration
DESCRIPTION: This JSON snippet provides a basic `app.json` structure. Expo CLI reads this file first and passes its normalized results to `app.config.js` when an exported function is used for configuration.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "name": "My App"
}
```

----------------------------------------

TITLE: Using expo-router Link Component for Navigation (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `Link` component from `expo-router` to create navigation links. This component provides additional web-specific functionalities such as right-click to copy or hover to preview, while maintaining universal behavior across platforms. It requires the `expo-router` library.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/into-other-apps.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Link } from 'expo-router';

export default function Home() {
  return <Link href="https://expo.dev">Go to Expo</Link>;
}
```

----------------------------------------

TITLE: Configure Apple App Site Association (AASA) File for iOS Universal Links
DESCRIPTION: This JSON configuration file, named `apple-app-site-association` (AASA), is essential for setting up iOS Universal Links. It must be hosted on your website within the `/.well-known` directory (e.g., `public/.well-known/apple-app-site-association`). The file defines the association between your website and native app, specifying your Apple Team ID, app bundle identifier, and the URL paths that should open your app. It also includes optional sections for Apple Handoff and Shared Web Credentials.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/linking/ios-universal-links.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  // This section enables Universal Links
  "applinks": {
    "apps": [],
    "details": [
      {
        // Syntax: "<APPLE_TEAM_ID>.<BUNDLE_ID>"
        "appID": "QQ57RJ5UTD.com.example.myapp",
        // All paths that should support redirecting.
        "paths": ["/records/*"]
      }
    ]
  },
  // This section enables Apple Handoff
  "activitycontinuation": {
    "apps": ["<APPLE_TEAM_ID>.<BUNDLE_ID>"]
  },
  // This section enable Shared Web Credentials
  "webcredentials": {
    "apps": ["<APPLE_TEAM_ID>.<BUNDLE_ID>"]
  }
}
```

----------------------------------------

TITLE: Example store.config.json Configuration for Apple App Store (JSON)
DESCRIPTION: This JSON snippet provides a basic structure for the `store.config.json` file, which holds all app information for upload to app stores. It defines `configVersion` and `apple` specific details like title, subtitle, description, keywords, and URLs for the `en-US` locale. This file is essential for automating app store presence with EAS Metadata, especially when starting a new app without existing store data.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/getting-started.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  "configVersion": 0,
  "apple": {
    "info": {
      "en-US": {
        "title": "Awesome App",
        "subtitle": "Your self-made awesome app",
        "description": "The most awesome app you have ever seen",
        "keywords": ["awesome", "app"],
        "marketingUrl": "https://example.com/en/promo",
        "supportUrl": "https://example.com/en/support",
        "privacyPolicyUrl": "https://example.com/en/privacy"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating store.config.json for EAS Metadata (JSON)
DESCRIPTION: This JSON snippet demonstrates the structure of a `store.config.json` file, which holds all the metadata for app store submissions. It defines properties like `title`, `subtitle`, `description`, and various URLs for the Apple App Store under the `en-US` locale. The `configVersion` property is crucial for managing backward-incompatible changes in the configuration schema.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/app-stores-metadata.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "configVersion": 0,
  "apple": {
    "info": {
      "en-US": {
        "title": "Awesome App",
        "subtitle": "Your self-made awesome app",
        "description": "The most awesome app you have ever seen",
        "keywords": ["awesome", "app"],
        "marketingUrl": "https://example.com/en/promo",
        "supportUrl": "https://example.com/en/support",
        "privacyPolicyUrl": "https://example.com/en/privacy"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a Details Route with Expo Router - TypeScript
DESCRIPTION: This snippet defines a new screen component for a details route in an Expo Router application. Similar to the home screen, it uses React Native components to display 'Details'. This file, `app/details.tsx`, will map to the `/details` route, enabling navigation to this specific screen.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { View, Text, StyleSheet } from 'react-native';

export default function DetailsScreen() {
  return (
    <View style={styles.container}>
      <Text>Details</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```

----------------------------------------

TITLE: Install Multiple Expo SDK Packages
DESCRIPTION: Demonstrates how to install multiple Expo SDK packages, such as `expo-camera`, `expo-contacts`, and `expo-sensors`, using the `npx expo install` command. This command integrates the packages into your project, providing access to device functionalities.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/index.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo install expo-camera expo-contacts expo-sensors
```

----------------------------------------

TITLE: Installing expo-dev-client for Development Builds
DESCRIPTION: This command installs the `expo-dev-client` package, which is essential for creating development builds of your Expo project. Once installed, subsequent local compilation commands (`npx expo run:android` or `npx expo run:ios`) will produce debug builds that include the `expo-dev-client` UI and tooling, facilitating easier development and debugging.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-development.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
$ npx expo install expo-dev-client
```

----------------------------------------

TITLE: Loading Custom Font with useFonts Hook in Expo (TSX)
DESCRIPTION: Demonstrates how to use the `useFonts` hook from `expo-font` to asynchronously load a custom font (`Inter-Black.otf`). It also integrates `expo-splash-screen` to prevent the app from rendering until the font is loaded, ensuring a smooth user experience. The `useEffect` hook handles hiding the splash screen once fonts are ready or an error occurs.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/fonts.mdx#_snippet_4

LANGUAGE: TSX
CODE:
```
/* @info Import <CODE>useFonts</CODE> hook from <CODE>expo-font</CODE>. */ import { useFonts } from 'expo-font'; /* @end */
/* @info Import <CODE>SplashScreen</CODE> so that when the fonts are not loaded, we can continue to show <CODE>SplashScreen</CODE>. */ import * as SplashScreen from 'expo-splash-screen'; /* @end */
import {useEffect} from 'react';

/* @info This prevents <CODE>SplashScreen</CODE> from auto hiding while the fonts are in loading state. */
SplashScreen.preventAutoHideAsync();
/* @end */

export default function RootLayout() {
  /* @info Map the font file using <CODE>useFonts</CODE> hook. */
  const [loaded, error] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });
  /* @end */

  useEffect(() => {
    if (loaded || error) {
      /* @info After the custom fonts have loaded, we can hide the splash screen and display the app screen. */
      SplashScreen.hideAsync();
      /* @end */
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }

  return (
    /* @hide ... */ /* @end */
  )
}
```

----------------------------------------

TITLE: Creating a New Expo Project
DESCRIPTION: Initializes a new Expo project using the `create-expo-app` utility. This is the recommended and easiest method to set up a new Expo application, allowing immediate launch in Expo Go on a physical device or in an emulator/simulator for quick prototyping.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/overview.mdx#_snippet_5

LANGUAGE: Shell
CODE:
```
create-expo-app
```

----------------------------------------

TITLE: Initialize New Expo Project with New Architecture
DESCRIPTION: Initializes a new Expo project. As of SDK 52, new projects are created with the New Architecture enabled by default.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
$ npx create-expo-app@latest
```

----------------------------------------

TITLE: Registering and Managing Expo Notification Event Listeners with useEffect
DESCRIPTION: This JavaScript snippet demonstrates how to register and manage notification event listeners within a React `useEffect` hook in an Expo application. It includes listeners for notifications received while the app is foregrounded (`addNotificationReceivedListener`) and for user interactions with notifications (taps/responses) when the app is foregrounded, backgrounded, or killed (`addNotificationResponseReceivedListener`). The snippet also shows proper cleanup of these subscriptions.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/receiving-notifications.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
useEffect(() => {
  registerForPushNotificationsAsync().then(token => setExpoPushToken(token));

  notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
    setNotification(notification);
  });

  responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
    console.log(response);
  });

  return () => {
    Notifications.removeNotificationSubscription(notificationListener.current);
    Notifications.removeNotificationSubscription(responseListener.current);
  };
}, []);
```

----------------------------------------

TITLE: Configuring EAS Build Profiles with Environment Variables (JSON)
DESCRIPTION: This `eas.json` configuration defines two build profiles, `production` and `development`, each setting a distinct `APP_ENV` environment variable. These variables are used to conditionally configure the application's behavior and metadata based on the selected build profile, ensuring different settings for production and development builds.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/automate-submissions.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "build": {
    "production": {
      "env": {
        "APP_ENV": "production"
      }
    },
    "development": {
      "env": {
        "APP_ENV": "development"
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining a Root Layout Component in Expo Router - TypeScript
DESCRIPTION: This snippet shows the basic structure of a root layout file (`app/_layout.tsx`) in Expo Router. This component serves as the single root component for the application, allowing for shared UI elements, global providers, and initial navigation structure definition across all routes.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
export default function RootLayout() {
  return (
	  /* @hide ... */ /* @end */
  )
}
```

----------------------------------------

TITLE: Bare Project EAS Build Profiles Configuration (JSON)
DESCRIPTION: This configuration snippet illustrates defining build profiles for a bare Expo project, including a 'base' profile with shared environment variables and platform-specific image/NDK settings. It demonstrates how 'development' and 'staging' profiles can extend the 'base' and include bare-specific build commands (e.g., gradleCommand) and build configurations.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  "build": {
    "base": {
      "env": {
        "EXAMPLE_ENV": "example value"
      },
      "android": {
        "image": "ubuntu-18.04-android-30-ndk-r19c",
        "ndk": "21.4.7075529"
      },
      "ios": {
        "image": "latest",
        "node": "12.13.0",
        "yarn": "1.22.5"
      }
    },
    "development": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "staging"
      },
      "android": {
        "distribution": "internal",
        "withoutCredentials": true,
        "gradleCommand": ":app:assembleDebug"
      },
      "ios": {
        "simulator": true,
        "buildConfiguration": "Debug"
      }
    },
    "staging": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "staging"
      },
      "distribution": "internal",
      "android": {
        "gradleCommand": ":app:assembleRelease"
      }
    },
    "production": {
      "extends": "base",
      "env": {
        "ENVIRONMENT": "production"
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Image Usage with BlurHash Placeholder in React Native
DESCRIPTION: This snippet demonstrates how to use the `expo-image` component in a React Native application. It shows importing the `Image` component, defining a `blurhash` string for a placeholder, and rendering an `Image` component with `source`, `placeholder`, `contentFit`, and `transition` props. It also includes basic styling using `StyleSheet` for layout.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/image.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});
```

----------------------------------------

TITLE: Publishing EAS Update Previews on Pull Requests (YAML)
DESCRIPTION: This GitHub Action workflow automates the publishing of Expo EAS updates for every pull request. It checks for an `EXPO_TOKEN`, checks out the repository, sets up Node.js and EAS, installs dependencies, and then creates a preview update using `eas update --auto`, commenting the details back to the pull request. It requires `contents: read` and `pull-requests: write` permissions.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/github-actions.mdx#_snippet_0

LANGUAGE: YAML
CODE:
```
name: preview
on: pull_request

jobs:
  update:
    name: EAS Update
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Check for EXPO_TOKEN
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "You must provide an EXPO_TOKEN secret linked to this project's Expo account in this repo's secrets. Learn more: https://docs.expo.dev/eas-update/github-actions"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: yarn

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: yarn install

      - name: Create preview
        uses: expo/expo-github-action/preview@v8
        with:
          command: eas update --auto
```

----------------------------------------

TITLE: Rendering Basic SVG Shapes - React Native TypeScript
DESCRIPTION: This example illustrates how to create and render fundamental SVG shapes, `Circle` and `Rect`, within a React Native component using `react-native-svg`. It showcases setting dimensions (`height`, `width`), a `viewBox` for scaling, and styling properties such as `stroke`, `strokeWidth`, and `fill` for each shape. The `Svg` component acts as the container for all SVG elements.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/svg.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import Svg, { Circle, Rect } from 'react-native-svg';

export default function SvgComponent(props) {
  return (
    <Svg height="50%" width="50%" viewBox="0 0 100 100" {...props}>
      <Circle cx="50" cy="50" r="45" stroke="blue" strokeWidth="2.5" fill="green" />
      <Rect x="15" y="15" width="70" height="70" stroke="red" strokeWidth="2" fill="yellow" />
    </Svg>
  );
}
```

----------------------------------------

TITLE: Handling Multipart File Uploads on a Node.js Server
DESCRIPTION: This Node.js Express server example demonstrates how to handle incoming binary and multipart file uploads. It uses `fs` to save binary content directly and `multer` middleware to process and save files from multipart form data, specifically a 'photo' field, to a designated 'uploads/' directory.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
const express = require('express');
const app = express();
const fs = require('fs');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

// This method will save the binary content of the request as a file.
app.patch('/binary-upload', (req, res) => {
  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));
  res.end('OK');
});

// This method will save a "photo" field from the request as a file.
app.patch('/multipart-upload', upload.single('photo'), (req, res) => {
  // You can access other HTTP parameters. They are located in the body object.
  console.log(req.body);
  res.end('OK');
});

app.listen(3000, () => {
  console.log('Working on port 3000');
});
```

----------------------------------------

TITLE: Navigating to a Specific Screen in a Nested Navigator
DESCRIPTION: This snippet compares two approaches for navigating to a specific screen within a nested navigator. It shows how standard React Navigation uses `navigation.navigate` with nested `screen` and `params` properties, contrasted with Expo Router's simplified path-based navigation using `router.push()`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#_snippet_5

LANGUAGE: jsx
CODE:
```
navigation.navigate('root', {
  screen: 'settings',
  params: {
    screen: 'media',
  },
});
```

LANGUAGE: jsx
CODE:
```
router.push('/root/settings/media');
```

----------------------------------------

TITLE: Using SafeAreaView Component in React Native (JSX)
DESCRIPTION: This example shows how to wrap a component with `SafeAreaView` to automatically apply safe area insets as padding. It functions as a regular `View` but adjusts its content to avoid device notches, status bars, and home indicators. Custom padding on the `SafeAreaView` will be added to the safe area padding.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/safe-area-context.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { SafeAreaView } from 'react-native-safe-area-context';

function SomeComponent() {
  return (
    <SafeAreaView>
      <View />
    </SafeAreaView>
  );
}
```

----------------------------------------

TITLE: Managing Cached GIF Files with Expo FileSystem in TypeScript
DESCRIPTION: This example demonstrates how to manage a local cache of GIF files using `expo-file-system`. It includes functions to ensure a directory exists, download multiple GIFs, retrieve a single GIF (downloading if not cached), obtain shareable content URIs, and delete the entire GIF cache. It uses TypeScript syntax for clarity.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/filesystem.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

// Checks if gif directory exists. If not, creates it
async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
    console.log("Gif directory doesn't exist, creating…");
    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
  }
}

// Downloads all gifs specified as array of IDs
export async function addMultipleGifs(gifIds: string[]) {
  try {
    await ensureDirExists();

    console.log('Downloading', gifIds.length, 'gif files…');
    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));
  } catch (e) {
    console.error("Couldn't download gif files:", e);
  }
}

// Returns URI to our local gif file
// If our gif doesn't exist locally, it downloads it
export async function getSingleGif(gifId: string) {
  await ensureDirExists();

  const fileUri = gifFileUri(gifId);
  const fileInfo = await FileSystem.getInfoAsync(fileUri);

  if (!fileInfo.exists) {
    console.log("Gif isn't cached locally. Downloading…");
    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);
  }

  return fileUri;
}

// Exports shareable URI - it can be shared outside your app
export async function getGifContentUri(gifId: string) {
  return FileSystem.getContentUriAsync(await getSingleGif(gifId));
}

// Deletes whole giphy directory with all its content
export async function deleteAllGifs() {
  console.log('Deleting all GIF files…');
  await FileSystem.deleteAsync(gifDir);
}
```

----------------------------------------

TITLE: Protect Routes with Stack.Protected based on Session State
DESCRIPTION: This snippet modifies the `RootNavigator` to conditionally render protected routes based on the user's authentication status (`session`). It uses `Stack.Protected` to guard the `(app)` group for authenticated users and the `sign-in` screen for unauthenticated users, ensuring proper access control.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
/* Keep the code the same above, just edit the RootNavigator */

function RootNavigator() {
  const { session } = useSession();

  return (
    <Stack>
      <Stack.Protected guard={session}>
        <Stack.Screen name="(app)" />
      </Stack.Protected>

      <Stack.Protected guard={!session}>
        <Stack.Screen name="sign-in" />
      </Stack.Protected>
    </Stack>
  );
}
```

----------------------------------------

TITLE: Applying Safe Area Insets with `useSafeAreaInsets` Hook
DESCRIPTION: This example shows how to use the `useSafeAreaInsets` hook to programmatically access safe area values (top, right, bottom, left). These values can then be applied as padding or margin to a standard `<View>` component, offering more granular control over layout than `SafeAreaView`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { Text, View } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

export default function HomeScreen() {
  const insets = useSafeAreaInsets();

  return (
    <View style={{ flex: 1, paddingTop: insets.top }}>
      <Text>Content is in safe area.</Text>
    </View>
  );
}
```

----------------------------------------

TITLE: Configuring EAS Build for Production Builds (eas.json)
DESCRIPTION: This snippet illustrates the minimal `eas.json` configuration required to define a production build profile for your Expo application. This setup is automatically generated when you create your first build and is crucial for preparing your app for submission to app stores.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/build-project.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "build": {
    /* @hide ... */ /* @end */
    "production": {}
    /* @hide ... */ /* @end */
  }
}
```

----------------------------------------

TITLE: Handle Push Notifications for Deep Linking with Expo Router
DESCRIPTION: This `useEffect` hook, designed for Expo Router's root layout, sets up listeners for initial and runtime push notification responses. It extracts a URL from the notification data and uses `router.push()` to navigate the user to the corresponding screen, enabling deep linking from notifications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/notifications.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { useEffect } from 'react';
import * as Notifications from 'expo-notifications';
import { router } from 'expo-router';

function useNotificationObserver() {
  useEffect(() => {
    let isMounted = true;

    function redirect(notification: Notifications.Notification) {
      const url = notification.request.content.data?.url;
      if (url) {
        /* @info Push the URL. You may want to verify the format before navigating. */
        router.push(url);
        /* @end */
      }
    }

    /* @info Handle the initial push notification. */
    Notifications.getLastNotificationResponseAsync() /* @end */
      .then(response => {
        if (!isMounted || !response?.notification) {
          return;
        }
        redirect(response?.notification);
      });

    /* @info Listen for runtime notifications. */
    const subscription = Notifications.addNotificationResponseReceivedListener(response => {
      /* @end */
      redirect(response.notification);
    });

    return () => {
      isMounted = false;
      subscription.remove();
    };
  }, []);
}

export default function Layout() {
  /* @info Observe at the root. Ensure this layout never returns <b>null</b> or the navigation will go unhandled. */
  useNotificationObserver();
  /* @end */

  return <Slot />;
}
```

----------------------------------------

TITLE: Integrating `SQLiteProvider` with React Suspense (TypeScript)
DESCRIPTION: This example shows how to integrate `SQLiteProvider` with `React.Suspense` to display a fallback component while the database is being initialized. The `useSuspense` prop is passed to `SQLiteProvider` to enable this functionality.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/sqlite.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';
import { Suspense } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <Suspense fallback={<Fallback />}>
        <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded} useSuspense>
          <Header />
          <Content />
        </SQLiteProvider>
      </Suspense>
    </View>
  );
}
```

----------------------------------------

TITLE: Migrating React Navigation `navigation.navigate` to Expo Router `useNavigation` hook
DESCRIPTION: This `diff` snippet demonstrates how to replace direct usage of `navigation.navigate` from the `navigation` prop with the `useNavigation` hook provided by `expo-router`. It shows how to obtain the navigation object and then call `navigation.navigate('screenName')`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#_snippet_7

LANGUAGE: diff
CODE:
```
+ import { useNavigation } from 'expo-router';

export default function Page({
+  const navigation = useNavigation();

  return (
    <Button onPress={navigation.navigate('screenName')}>
  )
})
```

----------------------------------------

TITLE: Conditional Expo Configuration Based on Environment Variables in app.config.js
DESCRIPTION: This JavaScript example demonstrates how to dynamically switch the entire Expo configuration based on the value of an environment variable (e.g., `MY_ENVIRONMENT`). This is useful for managing different settings across development, staging, and production environments.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/configuration.mdx#_snippet_5

LANGUAGE: js
CODE:
```
module.exports = () => {
  if (process.env.MY_ENVIRONMENT === 'production') {
    return {
      /* your production config */
    };
  } else {
    return {
      /* your development config */
    };
  }
};
```

----------------------------------------

TITLE: Playing Sounds with expo-av in React Native
DESCRIPTION: This snippet demonstrates how to load and play an audio file using `expo-av` in a React Native application. It uses `Audio.Sound.createAsync` to load an MP3 from assets and `sound.playAsync` for playback. A `useEffect` hook ensures the sound is unloaded after use to prevent memory leaks, which is crucial for resource management.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/audio-av.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [sound, setSound] = useState();

  async function playSound() {
    console.log('Loading Sound');
    const { sound } = await Audio.Sound.createAsync(
      require('./assets/Hello.mp3')
    );
    setSound(sound);

    console.log('Playing Sound');
    await sound.playAsync();
  }

  useEffect(() => {
    return sound
      ? () => {
          console.log('Unloading Sound');
          sound.unloadAsync();
        }
      : undefined;
  }, [sound]);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={playSound} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
```

----------------------------------------

TITLE: Define a Basic Stack Navigator in Expo Router (`app/_layout.tsx`)
DESCRIPTION: This snippet demonstrates how to set up a fundamental `Stack` navigator in your `app/_layout.tsx` file using `expo-router`. It serves as the entry point for defining your app's navigation stack, allowing subsequent routes to be pushed onto it.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/stack.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Stack } from 'expo-router';

export default function Layout() {
  return <Stack />;
}
```

----------------------------------------

TITLE: EAS Workflow for Building iOS Production (YAML)
DESCRIPTION: This YAML defines an EAS Workflow that triggers an iOS production build. It is configured to run automatically on pushes to the 'main' branch and specifies the build type, platform, and profile parameters.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/automating-eas-cli.mdx#_snippet_1

LANGUAGE: yaml
CODE:
```
name: iOS production build

on:
  push:
    branches: ['main']

jobs:
  build_ios:
    name: Build iOS
    type: build
    params:
      platform: ios
      profile: production
```

----------------------------------------

TITLE: Setting Up `SafeAreaProvider` in React Native App Root
DESCRIPTION: To enable safe area context throughout your application, `SafeAreaProvider` must be added at the root of your app component tree. This snippet demonstrates wrapping the main application content with `SafeAreaProvider`, making safe area inset data available to all child components that consume the context or use related hooks.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}
```

----------------------------------------

TITLE: Installing Tailwind CSS v3 and Initializing Config Files
DESCRIPTION: These commands install `tailwindcss` v3 and its peer dependencies (`postcss`, `autoprefixer`) as development dependencies. It then runs the initialization command to create `tailwind.config.js` and `postcss.config.js` files in the project root.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/tailwind.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
npx expo install tailwindcss@3 postcss autoprefixer --dev

npx tailwindcss init -p
```

----------------------------------------

TITLE: Extend EAS Build Profile for iOS Simulator
DESCRIPTION: This JSON snippet illustrates how to extend an existing `development` profile for the `ios-simulator` build profile in `eas.json`. By using the `extends` keyword, it inherits properties from the `development` profile while specifically enabling the `ios.simulator` flag for simulator compatibility.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/ios-development-build-for-simulators.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "ios-simulator": {
    /* @info The <CODE>extends</CODE> keyword inherits properties from the <CODE>development</CODE> profile. */
    "extends": "development",
    /* @end */
    "ios": {
      "simulator": true
    }
  }
}
```

----------------------------------------

TITLE: Defining a Standalone Server Function in Expo
DESCRIPTION: This snippet shows how to define a standalone server function (`components/server-actions.tsx`) by placing `'use server'` at the top of the file. This function can then be imported and called from client components, centralizing server-side actions.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
'use server';

export async function callAction() {
  // ...
}
```

----------------------------------------

TITLE: Importing and Using React Native Core Components (TypeScript)
DESCRIPTION: This snippet demonstrates how to import and use core React Native components like `Text` and `View`. It shows a basic functional component that renders 'Hello, world!' centered on the screen. This requires the `react-native` package to be installed in your project.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/using-libraries.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Text, View } from 'react-native';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Hello, world!</Text>
    </View>
  );
}
```

----------------------------------------

TITLE: Implement Authenticated Screen with Sign-Out Functionality in Expo Router
DESCRIPTION: This component represents an authenticated screen within the Expo Router application. It provides a 'Sign Out' button that, when pressed, calls `useSession().signOut()`. This action triggers the authentication check in the `(app)/_layout.tsx` and redirects the user to the sign-in screen.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication-rewrites.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Text, View } from 'react-native';

import { useSession } from '../../ctx';

export default function Index() {
  const { signOut } = useSession();
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text
        onPress={() => {
          // The `app/(app)/_layout.tsx` will redirect to the sign-in screen.
          signOut();
        }}>
        Sign Out
      </Text>
    </View>
  );
}
```

----------------------------------------

TITLE: Configuring EAS Update Channels in eas.json
DESCRIPTION: This snippet demonstrates how to configure update channels within the `eas.json` build profiles. It assigns the "production" channel to the `production` build profile and the "staging" channel with `internal` distribution to the `preview` build profile, ensuring that builds pull releases from their respective channels. This is crucial for managing different update streams for various build environments.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/updates.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "build": {
    "production": {
      "channel": "production"
    },
    "preview": {
      "channel": "staging",
      "distribution": "internal"
    }
  }
}
```

----------------------------------------

TITLE: Format Numbers and Currencies with Intl API (TypeScript)
DESCRIPTION: Illustrates the use of the `Intl.NumberFormat` API to format a numeric value as currency. This API is available on all platforms when Hermes is enabled, and can use 'default' as the locale string to automatically apply device locale settings for formatting.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#_snippet_17

LANGUAGE: ts
CODE:
```
new Intl.NumberFormat('default', { style: 'currency', currency: 'EUR' }).format(5.0);
```

----------------------------------------

TITLE: Defining Tab Navigator Layout with Expo Router (TSX)
DESCRIPTION: This snippet defines the `TabLayout` component for an Expo Router tab navigator. It uses the `Tabs` component to create a tab bar, with `Tabs.Screen` elements specifying the `(home)` and `settings` routes as individual tabs. This layout enables navigation between different sections of the app via the tab bar.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Tabs } from 'expo-router';

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen name="(home)" />
      <Tabs.Screen name="settings" />
    </Tabs>
  );
}
```

----------------------------------------

TITLE: Configuring Production Profile for EAS Submit (JSON)
DESCRIPTION: This JSON snippet demonstrates how to configure a production profile for EAS Submit within `eas.json`. It specifies the required CLI version and platform-specific submission details, including the service account key path and track for Android, and Apple ID, ASC App ID, and Apple Team ID for iOS.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/json.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "cli": {
    "version": ">= 0.34.0"
  },
  "submit": {
    "production": {
      "android": {
        "serviceAccountKeyPath": "../path/to/api-xxx-yyy-zzz.json",
        "track": "internal"
      },
      "ios": {
        "appleId": "john@turtle.com",
        "ascAppId": "1234567890",
        "appleTeamId": "AB12XYZ34S"
      }
    }
  }
}
```

----------------------------------------

TITLE: Installing Expo Splash Screen Package - npx expo - Shell
DESCRIPTION: This command demonstrates how to add the `expo-splash-screen` package as a dependency to your project using `npx expo install`. This is the recommended method for installing Expo modules in both managed and bare React Native projects that have the `expo` package configured.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-splash-screen/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
npx expo install expo-splash-screen
```

----------------------------------------

TITLE: Installing expo-brightness npm package (Shell)
DESCRIPTION: This command installs the `expo-brightness` package into your project's npm dependencies. Using `npx expo install` is the recommended method for Expo projects as it ensures correct versioning and compatibility with your Expo SDK.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-brightness/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo install expo-brightness
```

----------------------------------------

TITLE: EAS Workflow Configuration for Automated Updates
DESCRIPTION: This YAML configuration defines an EAS Workflow that automatically sends an over-the-air update to the 'production' channel whenever changes are pushed to the 'main' branch. Place this file at `.eas/workflows/send-updates.yml`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/send-over-the-air-updates.mdx#_snippet_2

LANGUAGE: yaml
CODE:
```
name: Send updates

on:
  push:
    branches: ['main']

jobs:
  send_updates:
    name: Send updates
    type: update
    params:
      channel: production
```

----------------------------------------

TITLE: Defining and Managing Expo Background Tasks in TypeScript
DESCRIPTION: This comprehensive example demonstrates how to define a background task using `TaskManager.defineTask`, register it with `BackgroundTask.registerTaskAsync`, and unregister it with `BackgroundTask.unregisterTaskAsync`. It includes a React Native component (`BackgroundTaskScreen`) that provides a UI to toggle task registration and check its status. The task itself logs the current time when executed.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-task.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import * as BackgroundTask from 'expo-background-task';
import * as TaskManager from 'expo-task-manager';
import { useEffect, useState } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';

const BACKGROUND_TASK_IDENTIFIER = 'background-task';

// Register and create the task so that it is available also when the background task screen
// (a React component defined later in this example) is not visible.
// Note: This needs to be called in the global scope, not in a React component.
TaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, async () => {
  try {
    const now = Date.now();
    console.log(`Got background task call at date: ${new Date(now).toISOString()}`);
  } catch (error) {
    console.error('Failed to execute the background task:', error);
    return BackgroundTask.BackgroundTaskResult.Failed;
  }
  return BackgroundTask.BackgroundTaskResult.Success;
});

// 2. Register the task at some point in your app by providing the same name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundTaskAsync() {
  return BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background task calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundTaskAsync() {
  return BackgroundTask.unregisterTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

export default function BackgroundTaskScreen() {
  const [isRegistered, setIsRegistered] = useState<boolean>(false);
  const [status, setStatus] = useState<BackgroundTask.BackgroundTaskStatus | null>(null);

  useEffect(() => {
    updateAsync();
  }, []);

  const updateAsync = async () => {
    const status = await BackgroundTask.getStatusAsync();
    setStatus(status);
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_TASK_IDENTIFIER);
    setIsRegistered(isRegistered);
  };

  const toggle = async () => {
    if (!isRegistered) {
      await registerBackgroundTaskAsync();
    } else {
      await unregisterBackgroundTaskAsync();
    }
    await updateAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background Task Service Availability:{' '}
          <Text style={styles.boldText}>
            {status ? BackgroundTask.BackgroundTaskStatus[status] : null}
          </Text>
        </Text>
      </View>
      <Button
        disabled={status === BackgroundTask.BackgroundTaskStatus.Restricted}
        title={isRegistered ? 'Cancel Background Task' : 'Schedule Background Task'}
        onPress={toggle}
      />
      <Button title="Check Background Task Status" onPress={updateAsync} />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});
```

----------------------------------------

TITLE: Downloading Files with expo-file-system in JavaScript
DESCRIPTION: This snippet demonstrates how to download files using `expo-file-system`, including tracking download progress, pausing and resuming downloads, and persisting download state across app restarts using `AsyncStorage`. It utilizes `FileSystem.createDownloadResumable` for managing the download lifecycle.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#_snippet_0

LANGUAGE: js
CODE:
```
const callback = downloadProgress => {
  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;
  this.setState({
    downloadProgress: progress,
  });
};

const downloadResumable = FileSystem.createDownloadResumable(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4',
  {},
  callback
);

try {
  const { uri } = await downloadResumable.downloadAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

try {
  await downloadResumable.pauseAsync();
  console.log('Paused download operation, saving for future retrieval');
  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));
} catch (e) {
  console.error(e);
}

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:
const downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');
const downloadSnapshot = JSON.parse(downloadSnapshotJson);
const downloadResumable = new FileSystem.DownloadResumable(
  downloadSnapshot.url,
  downloadSnapshot.fileUri,
  downloadSnapshot.options,
  callback,
  downloadSnapshot.resumeData
);

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}
```

----------------------------------------

TITLE: Implementing Background Fetch with Expo and TaskManager
DESCRIPTION: This comprehensive example demonstrates the full lifecycle of using `expo-background-fetch` and `expo-task-manager`. It covers defining a background task, registering it with specific intervals and options, and optionally unregistering it. The React Native component shows how to manage and display the registration status.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/background-fetch.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

// 1. Define the task by providing a name and the function that should be executed
// Note: This needs to be called in the global scope (e.g outside of your React components)
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  // Be sure to return the successful result type!
  return BackgroundFetch.BackgroundFetchResult.NewData;
});

// 2. Register the task at some point in your app by providing the same name,
// and some configuration options for how the background fetch should behave
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_FETCH_TASK, {
    minimumInterval: 60 * 15, // 15 minutes
    stopOnTerminate: false, // android only,
    startOnBoot: true // android only
  });
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background fetch calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  textContainer: {
    margin: 10
  },
  boldText: {
    fontWeight: 'bold'
  }
});
```

----------------------------------------

TITLE: Aligning Package Versions with Expo CLI (Shell)
DESCRIPTION: This command leverages `@expo/cli` to install or update packages, ensuring that their versions are compatible with the current Expo SDK version, which helps prevent dependency conflicts.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npx expo install
```

----------------------------------------

TITLE: Implementing Background Fetch with Expo TaskManager in React Native
DESCRIPTION: This comprehensive example illustrates the full workflow for using `expo-background-fetch` and `expo-task-manager`. It covers defining a background task globally, registering it with a minimum interval and specific options, and optionally unregistering it. The React Native component demonstrates checking task status and toggling registration.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/background-fetch.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

// 1. Define the task by providing a name and the function that should be executed
// Note: This needs to be called in the global scope (e.g outside of your React components)
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  // Be sure to return the successful result type!
  return BackgroundFetch.BackgroundFetchResult.NewData;
});

// 2. Register the task at some point in your app by providing the same name,
// and some configuration options for how the background fetch should behave
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 60 * 15, // 15 minutes
    stopOnTerminate: false, // android only,
    startOnBoot: true // android only
  });
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background fetch calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  textContainer: {
    margin: 10
  },
  boldText: {
    fontWeight: 'bold'
  }
});
```

----------------------------------------

TITLE: Navigating to Dynamic Routes Statically with Expo Router Link
DESCRIPTION: This snippet demonstrates how to use the `Link` component from `expo-router` to navigate to dynamic routes by providing the dynamic segment value directly in the `href` string. It shows navigation to specific user details based on their ID.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/dynamic-routes.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Link } from 'expo-router';
import { View, Text, StyleSheet } from 'react-native';

export default function HomeScreen() {
  return (
    <View style={styles.container}>
      <Text>Home</Text>
      <Link href="/details/1">View first user details</Link>
      <Link href="/details/2">View second user details</Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```

----------------------------------------

TITLE: Install Expo notification libraries
DESCRIPTION: Installs the `expo-notifications`, `expo-device`, and `expo-constants` libraries. These are crucial for requesting user permissions, obtaining the `ExpoPushToken`, checking if the app runs on a physical device, and accessing the project ID from the app configuration, respectively.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/push-notifications-setup.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo install expo-notifications expo-device expo-constants
```

----------------------------------------

TITLE: Setting iOS Permission Messages in app.json
DESCRIPTION: This snippet shows how to customize iOS permission usage descriptions using the `ios.infoPlist` key in `app.json`. This allows developers to provide specific, user-facing explanations for why the app requires access to sensitive data, such as `NSCameraUsageDescription`, which is crucial for App Store approval.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/permissions.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  "ios": {
    "infoPlist": {
      "NSCameraUsageDescription": "This app uses the camera to scan barcodes on event tickets."
    }
  }
}
```

----------------------------------------

TITLE: Run Expo Doctor for Dependency Validation
DESCRIPTION: Executes the `expo-doctor` command to check project dependencies against the React Native Directory. This helps identify missing or incompatible packages.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/new-architecture.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
$ npx expo-doctor@latest
```

----------------------------------------

TITLE: Using `SafeAreaView` for Screen Content in React Native
DESCRIPTION: This snippet demonstrates how to wrap a screen's content with `SafeAreaView` from `react-native-safe-area-context`. It automatically applies appropriate padding to ensure content is not obscured by device notches, status bars, or home indicators, making it a simple way to handle safe areas.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/safe-areas.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { Text } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

export default function HomeScreen() {
  return (
    <SafeAreaView style={{ flex: 1 }}>
      <Text>Content is in safe area.</Text>
    </SafeAreaView>
  );
}
```

----------------------------------------

TITLE: Install Expo SDK Packages
DESCRIPTION: Demonstrates how to install multiple Expo SDK packages, such as `expo-camera`, `expo-contacts`, and `expo-sensors`, using the `npx expo install` command. This command ensures proper dependency management within your project.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/index.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
$ npx expo install expo-camera expo-contacts expo-sensors
```

----------------------------------------

TITLE: Loading Custom Fonts in Expo with useFonts Hook
DESCRIPTION: This snippet demonstrates how to load custom fonts at runtime in an Expo application using the `useFonts` hook from `expo-font`. It also integrates `expo-splash-screen` to prevent the splash screen from hiding until fonts are loaded, ensuring a smooth user experience. This method is an an alternative to using the config plugin.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/font.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
/* @info Import useFonts hook from 'expo-font'. */ import { useFonts } from 'expo-font'; /* @end */
/* @info Also, import SplashScreen so that when the fonts are not loaded, we can continue to show SplashScreen. */ import * as SplashScreen from 'expo-splash-screen'; /* @end */
import { useEffect } from 'react';
import { Text, View, StyleSheet } from 'react-native';

/* @info This prevents SplashScreen from auto hiding while the fonts are loaded. */
SplashScreen.preventAutoHideAsync();
/* @end */

export default function App() {
  // Use `useFonts` only if you can't use the config plugin.
  const [loaded, error] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });

  useEffect(() => {
    if (loaded || error) {
      /* @info After the custom fonts have loaded, we can hide the splash screen and display the app screen. */
      SplashScreen.hideAsync();
      /* @end */
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>
      <Text style={{ fontSize: 30 }}>Platform Default</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```

----------------------------------------

TITLE: React Native: Control Splash Screen Visibility during App Loading
DESCRIPTION: This example demonstrates how to use `expo-splash-screen` to manage the splash screen's visibility in a React Native application. It prevents the splash screen from auto-hiding, loads resources like fonts and simulates a delay, and then hides the splash screen once the initial app content is ready and rendered, preventing a blank screen.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/splash-screen.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

// Set the animation options. This is optional.
SplashScreen.setOptions({
  duration: 1000,
  fade: true,
});

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(() => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      SplashScreen.hide();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! 👋</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}
```

----------------------------------------

TITLE: App Config Version Properties Reference
DESCRIPTION: Defines key properties in the Expo app config file (`app.json` or `app.config.js`) used for managing app versions across Android and iOS platforms. These properties control the user-facing version visible in app stores and the developer-facing build version for internal tracking and submission.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/app-versions.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
AppConfigProperties:
  version:
    Description: The user-facing version visible in stores. On Android, it represents versionName in android/app/build.gradle. On iOS, it represents CFBundleShortVersionString in Info.plist.
    Type: string
  android.versionCode:
    Description: The developer-facing build version for Android. It represents versionCode in android/app/build.gradle.
    Type: number
  ios.buildNumber:
    Description: The developer-facing build version for iOS. It represents CFBundleVersion in Info.plist.
    Type: number
```

----------------------------------------

TITLE: Installing expo-web-browser Package (Shell)
DESCRIPTION: This command uses `npx expo install` to add the `expo-web-browser` package to your project's npm dependencies. This is a crucial first step for integrating the module, ensuring all necessary native modules are correctly linked for both managed Expo and bare React Native environments.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-web-browser/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo install expo-web-browser
```

----------------------------------------

TITLE: Building Android APK with EAS CLI (Bash)
DESCRIPTION: This Bash command initiates an EAS build for an Android application, specifically targeting a profile configured to produce an APK. The `-p android` flag specifies the platform, and `--profile preview` selects the build profile named "preview" from the `eas.json` configuration, which should be set up to generate an APK.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/apk.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
$ eas build -p android --profile preview
```

----------------------------------------

TITLE: Adding Android Camera Permissions to AndroidManifest.xml
DESCRIPTION: This XML snippet illustrates how to manually add the `CAMERA` and `RECORD_AUDIO` permissions to your `AndroidManifest.xml` file for Android native projects. The `RECORD_AUDIO` permission is only necessary if your application intends to record videos with accompanying audio.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/camera.mdx#_snippet_1

LANGUAGE: xml
CODE:
```
<!-- Added permission -->
<uses-permission android:name="android.permission.CAMERA" />

<!-- Only when recording videos with audio -->
<uses-permission android:name="android.permission.RECORD_AUDIO" />
```

----------------------------------------

TITLE: Requesting Tracking Permissions in React Native
DESCRIPTION: This React Native (JSX) snippet demonstrates the basic usage of `expo-tracking-transparency` to request user tracking permissions. It uses `useEffect` to call `requestTrackingPermissionsAsync` on component mount, checks the returned `status`, and logs a message if permission is granted. This function should be called before attempting to track user data.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react';
import { Text, StyleSheet, View } from 'react-native';
import { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await requestTrackingPermissionsAsync();
      if (status === 'granted') {
        console.log('Yay! I have user permission to track data');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Tracking Transparency Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
```

----------------------------------------

TITLE: Managing Giphy Files with expo-file-system in TypeScript
DESCRIPTION: This example demonstrates how to manage local GIF files using `expo-file-system`. It includes functions to ensure a dedicated directory exists, download multiple GIFs, retrieve a single GIF (with caching), obtain a shareable content URI, and delete all cached GIFs.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/filesystem.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

// Checks if gif directory exists. If not, creates it
async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
    console.log("Gif directory doesn't exist, creating…");
    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
  }
}

// Downloads all gifs specified as array of IDs
export async function addMultipleGifs(gifIds: string[]) {
  try {
    await ensureDirExists();

    console.log('Downloading', gifIds.length, 'gif files…');
    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));
  } catch (e) {
    console.error("Couldn't download gif files:", e);
  }
}

// Returns URI to our local gif file
// If our gif doesn't exist locally, it downloads it
export async function getSingleGif(gifId: string) {
  await ensureDirExists();

  const fileUri = gifFileUri(gifId);
  const fileInfo = await FileSystem.getInfoAsync(fileUri);

  if (!fileInfo.exists) {
    console.log("Gif isn't cached locally. Downloading…");
    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);
  }

  return fileUri;
}

// Exports shareable URI - it can be shared outside your app
export async function getGifContentUri(gifId: string) {
  return FileSystem.getContentUriAsync(await getSingleGif(gifId));
}

// Deletes whole giphy directory with all its content
export async function deleteAllGifs() {
  console.log('Deleting all GIF files…');
  await FileSystem.deleteAsync(gifDir);
}
```

----------------------------------------

TITLE: Configuring Project for EAS Build (EAS CLI/Shell)
DESCRIPTION: This command configures your React Native project for use with EAS Build, setting up necessary files and settings for Android and iOS platforms. It's a crucial step before initiating a build.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#_snippet_3

LANGUAGE: shell
CODE:
```
eas build:configure
```

----------------------------------------

TITLE: React Native App with SplashScreen Integration
DESCRIPTION: This example demonstrates how to use `expo-splash-screen` to manage splash screen visibility in a React Native application. It prevents the splash screen from auto-hiding, loads resources asynchronously (simulating a delay), and then hides the splash screen once the initial app content has rendered and performed layout.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/splash-screen.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(async () => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      await SplashScreen.hideAsync();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! 👋</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}
```

----------------------------------------

TITLE: Configuring Static EAS Metadata with JSON
DESCRIPTION: This snippet demonstrates the default JSON format for `store.config.json`, used to define basic App Store information such as title, subtitle, description, and keywords. It serves as a static configuration for EAS Metadata, with VS Code Expo Tools extension providing auto-complete and suggestions.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/metadata/config.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "configVersion": 0,
  "apple": {
    "info": {
      "en-US": {
        "title": "Awesome App",
        "subtitle": "Your self-made awesome app",
        "description": "The most awesome app you have ever seen",
        "keywords": ["awesome", "app"],
        "marketingUrl": "https://example.com/en/promo",
        "supportUrl": "https://example.com/en/support",
        "privacyPolicyUrl": "https://example.com/en/privacy"
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating a New Expo Project (npx/Shell)
DESCRIPTION: This command initializes a new Expo project named 'my-app'. It sets up a basic React Native 'Hello world' app, ready for development and use with EAS Build. This is a prerequisite if you don't have an existing project.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/setup.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app my-app
```

----------------------------------------

TITLE: Dynamic App Configuration with Environment Variables (app.config.js)
DESCRIPTION: This snippet shows how to dynamically set the app's name, iOS bundle identifier, and Android package name in `app.config.js` based on an `APP_VARIANT` environment variable. This allows for unique identifiers and names for development and production builds, enabling simultaneous installation on a single device.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/variants.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
const IS_DEV = process.env.APP_VARIANT === 'development';

export default {
  /* @info You can also switch out the app icon and other properties to further differentiate the app on your device. */
  name: IS_DEV ? 'MyApp (Dev)' : 'MyApp',
  /* @end */
  slug: 'my-app',
  ios: {
    bundleIdentifier: IS_DEV ? 'com.myapp.dev' : 'com.myapp',
  },
  android: {
    package: IS_DEV ? 'com.myapp.dev' : 'com.myapp',
  }
};
```

----------------------------------------

TITLE: Configure URL Scheme for Stripe Browser Redirects in Expo
DESCRIPTION: Provides a solution for ensuring browser pop-ups redirect back to your app after a Stripe payment flow. It uses `expo-linking` and `expo-constants` to dynamically set the `urlScheme` for both Expo Go and standalone app environments, ensuring proper deep linking.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/stripe.mdx#_snippet_1

LANGUAGE: js
CODE:
```
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';

urlScheme:
  Constants.appOwnership === 'expo'
    ? Linking.createURL('/--/')
    : Linking.createURL(''),
```

----------------------------------------

TITLE: Configuring Runtime Version Manually in Expo
DESCRIPTION: This JSON snippet demonstrates how to manually set the `runtimeVersion` for an Expo project within the `expo` configuration block. The `<runtime_version_string>` placeholder should be replaced with a specific version string to control update compatibility.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/updates.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    "runtimeVersion": "<runtime_version_string>"
  }
}
```

----------------------------------------

TITLE: Handling Multipart Requests on a Node.js Server
DESCRIPTION: This Node.js server example, built with Express and Multer, demonstrates how to handle incoming file uploads. It provides two endpoints: one for saving raw binary content directly to a file, and another for processing a 'photo' field from a multipart form data request. Dependencies include `express`, `fs`, and `multer`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
const express = require('express');
const app = express();
const fs = require('fs');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

// This method will save the binary content of the request as a file.
app.patch('/binary-upload', (req, res) => {
  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));
  res.end('OK');
});

// This method will save a "photo" field from the request as a file.
app.patch('/multipart-upload', upload.single('photo'), (req, res) => {
  // You can access other HTTP parameters. They are located in the body object.
  console.log(req.body);
  res.end('OK');
});

app.listen(3000, () => {
  console.log('Working on port 3000');
});
```

----------------------------------------

TITLE: Initializing URL and URLSearchParams in TypeScript
DESCRIPTION: This snippet shows the instantiation of `URL` and `URLSearchParams` objects, which provide standard web APIs for parsing and manipulating URLs and their query parameters. These built-in implementations replace shims on native platforms, ensuring consistent URL handling across web and mobile environments.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/expo.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
const url = new URL('https://expo.dev');

const params = new URLSearchParams();
```

----------------------------------------

TITLE: Google Maps API Key Configuration for Android
DESCRIPTION: Comprehensive guide for setting up Google Maps on Android, detailing the necessary steps within the Google Cloud Console and the `app.json` file. This includes creating a Google Cloud project, enabling the Maps SDK, obtaining SHA-1 certificate fingerprints, generating and restricting an API key, and finally, adding the API key to your Expo project's `app.json`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/maps.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Google Maps API Configuration (Android):
  1. Register Google Cloud API Project & Enable Maps SDK for Android:
    - Open your browser to the Google API Manager (https://console.developers.google.com/apis) and create a project.
    - Once it's created, go to the project and enable the "Maps SDK for Android".
  2. Copy SHA-1 Certificate Fingerprint:
    - For Google Play Store:
      - Upload your app binary to Google Play console at least once.
      - Go to the Google Play Console > (your app) > Release > Setup > App integrity > App Signing.
      - Copy the value of SHA-1 certificate fingerprint.
    - For Development Builds:
      - If you have already created a development build, your project will be signed using a debug keystore.
      - After the build is complete, go to your project's dashboard (https://expo.dev/accounts/[username]/projects/[project-name]), then, under Configure > click Credentials.
      - Under Application Identifiers, click your project's package name and under Android Keystore copy the value of SHA-1 Certificate Fingerprint.
  3. Create API Key:
    - Go to Google Cloud Credential manager (https://console.cloud.google.com/apis/credentials) and click Create Credentials, then API Key.
    - In the modal, click Edit API key.
    - Under Key restrictions > Application restrictions, choose Android apps.
    - Under Restrict usage to your Android apps, click Add an item.
    - Add your `android.package` from app.json (for example: `com.company.myapp`) to the package name field.
    - Then, add the SHA-1 certificate fingerprint's value from step 2.
    - Click Done and then click Save.
  4. Add API Key to Project (app.json):
    - Copy your API Key into your app.json under the `android.config.googleMaps.apiKey` field.
    - Create a new development build, and you can now use the Google Maps API on Android with `expo-maps`.
```

LANGUAGE: JSON
CODE:
```
{
  "android": {
    "config": {
      "googleMaps": {
        "apiKey": "YOUR_API_KEY"
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Android Gradle Properties for Signing (Gradle Properties)
DESCRIPTION: This snippet shows how to add signing-related variables to the `android/gradle.properties` file. These variables define the path to the upload keystore file, its alias, and the respective passwords for the keystore and key. These properties are crucial for Gradle to locate and use the correct signing credentials during the build process.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/local-app-production.mdx#_snippet_1

LANGUAGE: Gradle Properties
CODE:
```
# If you've downloaded the credentials from `eas credentials` command, see comments below for each value.

MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore     # Path to the "keystore.jks" file
MYAPP_UPLOAD_KEY_ALIAS=my-key-alias                # Replace with value of the `keystore.keyAlias` field in the credentials.json file
MYAPP_UPLOAD_STORE_PASSWORD=*****                  # Replace with value of the `keystore.password` field in the credentials.json file
MYAPP_UPLOAD_KEY_PASSWORD=*****                    # Replace with value of the `keystore.keyPassword` field in the credentials.json file
```

----------------------------------------

TITLE: Creating Android Development Build with EAS - Shell
DESCRIPTION: This command initiates a development build for an Android platform using Expo Application Services (EAS), applying the 'development' profile defined in your `eas.json` for testing purposes.
SOURCE: https://github.com/expo/expo/blob/main/docs/scenes/get-started/set-up-your-environment/instructions/androidPhysicalDevelopmentBuild.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
$ eas build --platform android --profile development
```

----------------------------------------

TITLE: Setting Up SafeAreaProvider in React Native App Root
DESCRIPTION: This code illustrates the essential step of wrapping the root component of a React Native application with `SafeAreaProvider`. This provider makes the safe area context available to all child components, enabling `SafeAreaView` and `useSafeAreaInsets` to function correctly.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/safe-area-context.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}
```

----------------------------------------

TITLE: Implement Secure Storage Hook for Authentication Tokens
DESCRIPTION: This hook (`useStorageState`) provides a mechanism to persist authentication tokens securely. It uses `expo-secure-store` for native platforms (iOS/Android) and `localStorage` for web, ensuring data is stored appropriately based on the environment. It also includes `setStorageItemAsync` for direct asynchronous storage operations.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/authentication-rewrites.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import  { useEffect, useCallback, useReducer } from 'react';
import * as SecureStore from 'expo-secure-store';
import { Platform } from 'react-native';

type UseStateHook<T> = [[boolean, T | null], (value: T | null) => void];

function useAsyncState<T>(
  initialValue: [boolean, T | null] = [true, null],
): UseStateHook<T> {
  return useReducer(
    (state: [boolean, T | null], action: T | null = null): [boolean, T | null] => [false, action],
    initialValue
  ) as UseStateHook<T>;
}

export async function setStorageItemAsync(key: string, value: string | null) {
  if (process.env.EXPO_OS === 'web') {
    if (value === null) {
      localStorage.removeItem(key);
    } else {
      localStorage.setItem(key, value);
    }
  } else {
    if (value == null) {
      await SecureStore.deleteItemAsync(key);
    } else {
      await SecureStore.setItemAsync(key, value);
    }
  }
}

export function useStorageState(key: string): UseStateHook<string> {
  // Public
  const [state, setState] = useAsyncState<string>();

  // Get
  useEffect(() => {
    if (Platform.OS === 'web') {
      try {
        if (typeof localStorage !== 'undefined') {
          setState(localStorage.getItem(key));
        }
      } catch (e) {
        console.error('Local storage is unavailable:', e);
      }
    } else {
      SecureStore.getItemAsync(key).then(value => {
        setState(value);
      });
    }
  }, [key]);

  // Set
  const setValue = useCallback(
    (value: string | null) => {
      setState(value);
      setStorageItemAsync(key, value);
    },
    [key]
  );

  return [state, setValue];
}
```

----------------------------------------

TITLE: Accessing Safe Area Insets with `useSafeAreaInsets` Hook
DESCRIPTION: This snippet illustrates the use of the `useSafeAreaInsets` hook, which provides direct access to the device's safe area inset values (top, right, bottom, left). This allows for manual application of insets, such as setting `paddingTop` based on `insets.top`, offering more granular control than `SafeAreaView`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/safe-area-context.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function HookComponent() {
  const insets = useSafeAreaInsets();

  return <View style={{ paddingTop: insets.top }} />;
}
```

----------------------------------------

TITLE: JSON Request Body for Sending Multiple Expo Push Notifications
DESCRIPTION: This JSON array illustrates the recommended format for sending multiple push notifications in a single request to the Expo Push API. Each object in the array represents a distinct message, allowing for different recipients, sounds, badges, and bodies. This method efficiently minimizes API requests for bulk notifications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#_snippet_2

LANGUAGE: json
CODE:
```
[
  {
    "to": "ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]",
    "sound": "default",
    "body": "Hello world!"
  },
  {
    "to": "ExponentPushToken[yyyyyyyyyyyyyyyyyyyyyy]",
    "badge": 1,
    "body": "You've got mail"
  },
  {
    "to": [
      "ExponentPushToken[zzzzzzzzzzzzzzzzzzzzzz]",
      "ExponentPushToken[aaaaaaaaaaaaaaaaaaaaaa]"
    ],
    "body": "Breaking news!"
  }
]
```

----------------------------------------

TITLE: Expo Push Ticket API Response with Individual Message Error
DESCRIPTION: This JSON object illustrates an Expo Push API response where some messages succeeded while others failed. Failed messages have a `status` of 'error', along with a `message` explaining the issue and `details` containing an `error` code (e.g., 'DeviceNotRegistered'). This allows for granular error handling for each sent notification.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  "data": [
    {
      "status": "error",
      "message": "\"ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]\" is not a registered push notification recipient",
      "details": {
        "error": "DeviceNotRegistered"
      }
    },
    {
      "status": "ok",
      "id": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
    }
  ]
}
```

----------------------------------------

TITLE: Configuring Root Layout with Stack Navigator in Expo Router - TypeScript
DESCRIPTION: This snippet updates the root layout to incorporate a `Stack` navigator from Expo Router. It defines the navigation structure for the 'index' (home) and 'details' routes, allowing transitions between them. `screenOptions` are applied globally to all screens within this stack, setting common header styles.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack
      screenOptions={{
        headerStyle: {
          backgroundColor: '#f4511e',
        },
        headerTintColor: '#fff',
        headerTitleStyle: {
          fontWeight: 'bold',
        },
      }}>
      <Stack.Screen name="index" />
      <Stack.Screen name="details" />
    </Stack>
  );
}
```

----------------------------------------

TITLE: Obtaining Native Device Token with expo-notifications
DESCRIPTION: This snippet shows the difference between obtaining an ExpoPushToken and a native DevicePushToken using the `expo-notifications` library. It highlights the change needed to get the token required for sending notifications directly via FCM or APNs.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/sending-notifications-custom.mdx#_snippet_0

LANGUAGE: diff
CODE:
```
import * as Notifications from 'expo-notifications';
...
- const token = (await Notifications.getExpoPushTokenAsync()).data;
+ const token = (await Notifications.getDevicePushTokenAsync()).data;
// send token to your server
```

----------------------------------------

TITLE: Configuring iOS User Tracking Permission in app.json
DESCRIPTION: This JSON snippet demonstrates how to configure the `expo-tracking-transparency` plugin within your `app.json` file. It sets the `userTrackingPermission` property, which directly populates the `NSUserTrackingUsageDescription` in your iOS `Info.plist`, explaining to the user why their data will be tracked. This configuration requires a new app binary build to take effect.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/tracking-transparency.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    "plugins": [
      [
        "expo-tracking-transparency",
        {
          "userTrackingPermission": "This identifier will be used to deliver personalized ads to you."
        }
      ]
    ]
  }
}
```

----------------------------------------

TITLE: Setting Up SafeAreaProvider in React Native App Root
DESCRIPTION: This code illustrates how to wrap the root component of a React Native application with `SafeAreaProvider`. This provider is essential for making safe area inset data available to all child components, enabling the use of `SafeAreaView`, `useSafeAreaInsets`, and `SafeAreaInsetsContext.Consumer` throughout the app.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/safe-area-context.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}
```

----------------------------------------

TITLE: Basic Calendar Interaction with Expo Calendar in React Native
DESCRIPTION: This comprehensive React Native example demonstrates the fundamental usage of `expo-calendar`. It covers requesting calendar permissions, retrieving a list of available calendars, and programmatically creating a new calendar entry, handling platform-specific logic for default calendar sources.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/calendar.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Calendar.requestCalendarPermissionsAsync();
      if (status === 'granted') {
        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
        console.log('Here are all your calendars:');
        console.log({ calendars });
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Calendar Module Example</Text>
      <Button title="Create a new calendar" onPress={createCalendar} />
    </View>
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
    Platform.OS === 'ios'
      ? await getDefaultCalendarSource()
      : { isLocalAccount: true, name: 'Expo Calendar' };
  const newCalendarID = await Calendar.createCalendarAsync({
    title: 'Expo Calendar',
    color: 'blue',
    entityType: Calendar.EntityTypes.EVENT,
    sourceId: defaultCalendarSource.id,
    source: defaultCalendarSource,
    name: 'internalCalendarName',
    ownerAccount: 'personal',
    accessLevel: Calendar.CalendarAccessLevel.OWNER,
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'space-around',
  },
});
```

----------------------------------------

TITLE: Importing Checkbox Component for API Access (JavaScript)
DESCRIPTION: This snippet shows the standard way to import the `Checkbox` component from the `expo-checkbox` package, making it available for use in JavaScript or TypeScript files. This import is a prerequisite for utilizing any of the component's functionalities or properties.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/checkbox.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import Checkbox from 'expo-checkbox';
```

----------------------------------------

TITLE: Importing Gyroscope Module
DESCRIPTION: Shows the standard way to import the `Gyroscope` module from the `expo-sensors` package for use in a JavaScript or TypeScript project.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/gyroscope.mdx#_snippet_1

LANGUAGE: js
CODE:
```
import { Gyroscope } from 'expo-sensors';
```

----------------------------------------

TITLE: Picking Image/Video with Expo Image Picker (TSX)
DESCRIPTION: Demonstrates how to use `expo-image-picker` to select an image or video from the device's library in a React Native application using TypeScript/TSX. It shows how to launch the library, handle the result, and display the selected image.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images', 'videos'],
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 200,
    height: 200,
  },
});
```

----------------------------------------

TITLE: Configure Deep Linking Scheme in app.json
DESCRIPTION: Adds a deep linking `scheme` property to `app.json`, which is crucial for handling incoming links and navigating within your Expo application.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/installation.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  "scheme": "your-app-scheme"
}
```

----------------------------------------

TITLE: Manually Checking and Applying Updates with `expo-updates` (React Native/JSX)
DESCRIPTION: This React Native (JSX) code demonstrates how to manually check for, fetch, and apply updates using the `expo-updates` library. It disables automatic checks and provides an asynchronous function to trigger an update check, download, and app reload, with error handling for network or update issues.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import { View, Button } from 'react-native';
import * as Updates from 'expo-updates';

function App() {
  async function onFetchUpdateAsync() {
    try {
      const update = await Updates.checkForUpdateAsync();

      if (update.isAvailable) {
        await Updates.fetchUpdateAsync();
        await Updates.reloadAsync();
      }
    } catch (error) {
      // You can also add an alert() to see the error message in case of an error when fetching updates.
      alert(`Error fetching latest Expo update: ${error}`);
    }
  }

  return (
    <View>
      <Button title="Fetch update" onPress={onFetchUpdateAsync} />
    </View>
  );
}
```

----------------------------------------

TITLE: Basic WebView Usage in React Native
DESCRIPTION: This snippet demonstrates the fundamental usage of the `WebView` component from `react-native-webview` to display web content from a specified URL. It uses `expo-constants` to adjust the `WebView`'s top margin for the status bar and `StyleSheet` for basic styling.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/webview.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      source={{ uri: 'https://expo.dev' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});
```

----------------------------------------

TITLE: Attaching Navigation Event Listeners with useEffect in Expo Router
DESCRIPTION: This example shows how to use the `useEffect` hook with the `useNavigation` object to add and clean up event listeners for navigator events, such as `tabPress`. The listener is added when the component mounts or `navigation` changes, and removed when the component unmounts, ensuring proper event handling after navigation.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
const navigation = useNavigation();

useEffect(() => {
  const unsubscribe = navigation.addListener('tabPress', () => {
    // do something
  });

  return () => {
    unsubscribe();
  };
}, [navigation]);
```

----------------------------------------

TITLE: Implement Themed Button with FontAwesome Icon in React Native TSX
DESCRIPTION: This code snippet modifies the `Button.tsx` component to introduce a `theme` prop, allowing for a 'primary' button variant. It imports `FontAwesome` from `@expo/vector-icons` to display an icon and uses conditional rendering and inline styles to apply specific styling for the primary theme, such as a white background, a border, and an icon. The explanation highlights the use of inline styles to override `StyleSheet.create()` values for specific button variants.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/build-a-screen.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { StyleSheet, View, Pressable, Text } from 'react-native';
import FontAwesome from '@expo/vector-icons/FontAwesome';

type Props = {
  label: string;
  theme?: 'primary';
};

export default function Button({ label, theme }: Props) {
  if (theme === 'primary') {
    return (
      <View
        style={[
          styles.buttonContainer,
          { borderWidth: 4, borderColor: '#ffd33d', borderRadius: 18 },
        ]}>
        <Pressable
          style={[styles.button, { backgroundColor: '#fff' }]}
          onPress={() => alert('You pressed a button.')}>
          <FontAwesome name="picture-o" size={18} color="#25292e" style={styles.buttonIcon} />
          <Text style={[styles.buttonLabel, { color: '#25292e' }]}>{label}</Text>
        </Pressable>
      </View>
    );
  }

  return (
    <View style={styles.buttonContainer}>
      <Pressable style={styles.button} onPress={() => alert('You pressed a button.')}>
        <Text style={styles.buttonLabel}>{label}</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  buttonContainer: {
    width: 320,
    height: 68,
    marginHorizontal: 20,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 3,
  },
  button: {
    borderRadius: 10,
    width: '100%',
    height: '100%',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
  },
  buttonIcon: {
    paddingRight: 8,
  },
  buttonLabel: {
    color: '#fff',
    fontSize: 16,
  },
});
```

----------------------------------------

TITLE: Using useSQLiteContext Hook for Database Access
DESCRIPTION: This example demonstrates the basic setup of `SQLiteProvider` to initialize a database and the usage of `useSQLiteContext` to access the database instance. It includes components for displaying SQLite version and fetching data from a 'todos' table, along with a `migrateDbIfNeeded` function for database schema management.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/sqlite.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';
import { useEffect, useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}

export function Header() {
  const db = useSQLiteContext();
  const [version, setVersion] = useState('');
  useEffect(() => {
    async function setup() {
      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(
        'SELECT sqlite_version()'
      );
      setVersion(result['sqlite_version()']);
    }
    setup();
  }, []);
  return (
    <View style={styles.headerContainer}>
      <Text style={styles.headerText}>SQLite version: {version}</Text>
    </View>
  );
}

interface Todo {
  value: string;
  intValue: number;
}

export function Content() {
  const db = useSQLiteContext();
  const [todos, setTodos] = useState<Todo[]>([]);

  useEffect(() => {
    async function setup() {
      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');
      setTodos(result);
    }
    setup();
  }, []);

  return (
    <View style={styles.contentContainer}>
      {todos.map((todo, index) => (
        <View style={styles.todoItemContainer} key={index}>
          <Text>{`${todo.intValue} - ${todo.value}`}</Text>
        </View>
      ))}
    </View>
  );
}

async function migrateDbIfNeeded(db: SQLiteDatabase) {
  const DATABASE_VERSION = 1;
  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(
    'PRAGMA user_version'
  );
  if (currentDbVersion >= DATABASE_VERSION) {
    return;
  }
  if (currentDbVersion === 0) {
    await db.execAsync(`
PRAGMA journal_mode = 'wal';
CREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
`);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);
    currentDbVersion = 1;
  }
  // if (currentDbVersion === 1) {
  //   Add more migrations
  // }
  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);
}

const styles = StyleSheet.create({
  // Your styles...
});
```

----------------------------------------

TITLE: Updating query parameters without navigation in Expo Router
DESCRIPTION: This example shows how to modify query parameters on the current page without triggering a full navigation. It presents two approaches: using a 'Link' component with the same URL but updated parameters, or imperatively updating parameters using 'router.setParams'.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/navigation.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
<Link href="/users?limit=50">View more users</Link>

<Pressable onPress={() => router.setParams({ limit: 50 })}>
  <Text>View more users</Text>
</Pressable>
```

----------------------------------------

TITLE: Imperative Navigation with Typed Expo Router useRouter Hook
DESCRIPTION: This example illustrates imperative navigation within a React component using the `useRouter()` hook provided by `expo-router`. The hook returns a typed `router` object, allowing for type-safe navigation methods like `push`, which helps prevent errors when programmatically changing routes.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { useRouter } from 'expo-router';

function Page() {
  const router = useRouter();

  router.push('/about');

  // ...
}
```

----------------------------------------

TITLE: Using the Image Component in React Native
DESCRIPTION: This snippet shows a basic example of importing and using the `Image` component from `expo-image` within a React Native functional component. It demonstrates setting the source, a blurhash placeholder, content fit, and transition duration, along with basic styling.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/image.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});
```

----------------------------------------

TITLE: Publishing Over-the-Air Updates to Production
DESCRIPTION: This command publishes an over-the-air (OTA) update to the 'production' branch, making the latest code changes immediately available to users who have the corresponding production build installed. It is typically used for rapid delivery of bug fixes and new features without requiring a full app store update.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/deployment-patterns.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
eas update --branch production
```

----------------------------------------

TITLE: Managing Giphy Files with expo-file-system in TypeScript
DESCRIPTION: This example demonstrates how to manage cached GIF files using `expo-file-system`. It includes functions to ensure a directory exists, download multiple GIFs, retrieve a single GIF (downloading if not cached), obtain a shareable content URI, and delete all cached GIFs. It relies on `expo-file-system` for file operations.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/filesystem.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

// Checks if gif directory exists. If not, creates it
async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
    console.log("Gif directory doesn't exist, creating…");
    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
  }
}

// Downloads all gifs specified as array of IDs
export async function addMultipleGifs(gifIds: string[]) {
  try {
    await ensureDirExists();

    console.log('Downloading', gifIds.length, 'gif files…');
    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));
  } catch (e) {
    console.error("Couldn't download gif files:", e);
  }
}

// Returns URI to our local gif file
// If our gif doesn't exist locally, it downloads it
export async function getSingleGif(gifId: string) {
  await ensureDirExists();

  const fileUri = gifFileUri(gifId);
  const fileInfo = await FileSystem.getInfoAsync(fileUri);

  if (!fileInfo.exists) {
    console.log("Gif isn't cached locally. Downloading…");
    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);
  }

  return fileUri;
}

// Exports shareable URI - it can be shared outside your app
export async function getGifContentUri(gifId: string) {
  return FileSystem.getContentUriAsync(await getSingleGif(gifId));
}

// Deletes whole giphy directory with all its content
export async function deleteAllGifs() {
  console.log('Deleting all GIF files…');
  await FileSystem.deleteAsync(gifDir);
}
```

----------------------------------------

TITLE: Using Expo Image Component in React Native
DESCRIPTION: This snippet demonstrates how to integrate and use the `Image` component from `expo-image` in a React Native application. It shows how to set a source URL, apply a BlurHash placeholder, control content fitting, and define a transition duration. It also includes basic styling using `StyleSheet`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/image.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});
```

----------------------------------------

TITLE: Incorrect: Dynamic Access via Bracket Notation (JavaScript)
DESCRIPTION: This snippet demonstrates incorrect usage where `process.env` is accessed using bracket notation with a string literal. This pattern is flagged by the rule because `process.env` is not a standard JavaScript object, and dynamic access prevents build-time inlining of environment variables by the Metro bundler.
SOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-dynamic-env-var.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const myVar = process.env["MY_VAR"]
```

----------------------------------------

TITLE: Disallowing Environment Variable Destructuring in Expo - JavaScript
DESCRIPTION: This snippet demonstrates incorrect usage of environment variables in an Expo project. Destructuring `process.env` directly, as shown, will prevent build-time inlining of environment variables, leading to errors. This is due to `process.env` not being a standard JavaScript object in Expo's Metro config.
SOURCE: https://github.com/expo/expo/blob/main/packages/eslint-plugin-expo/docs/rules/no-env-var-destructuring.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { MY_VAR } = process.env;
```

----------------------------------------

TITLE: Default EAS Build Configuration in eas.json
DESCRIPTION: This is the default `eas.json` configuration generated for a new project, defining `development`, `preview`, and `production` build profiles. It sets up development builds with `developmentClient` and `internal` distribution, and preview builds for internal distribution.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build/eas-json.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {}
  }
}
```

----------------------------------------

TITLE: Configuring Google Maps API Key for Android in app.json
DESCRIPTION: This JSON snippet shows how to embed the Google Maps API key within the `android.config.googleMaps.apiKey` field of your `app.json` file. This configuration is essential for enabling Google Maps services in your Android application builds, typically referencing an environment variable for security.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/map-view.mdx#_snippet_1

LANGUAGE: json
CODE:
```
    "android": {
      "config": {
        "googleMaps": {
          "apiKey": "process.env.GOOGLE_MAPS_API_KEY"
        }
      }
    }
```

----------------------------------------

TITLE: Manually Configuring iOS Location Permissions in Info.plist
DESCRIPTION: This XML snippet shows how to manually add required location usage description keys to your iOS project's `Info.plist` file. These keys (`NSLocationAlwaysAndWhenInUseUsageDescription`, `NSLocationAlwaysUsageDescription`, `NSLocationWhenInUseUsageDescription`) provide the user-facing messages for different types of location permissions, which are essential for apps not using Expo's config plugins or managing native iOS projects directly.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/location.mdx#_snippet_1

LANGUAGE: xml
CODE:
```
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>
<key>NSLocationWhenInUseUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>
```

----------------------------------------

TITLE: Adding iOS Photo Library Usage Descriptions (XML)
DESCRIPTION: For manual iOS projects, this XML snippet shows how to add `NSPhotoLibraryUsageDescription` and `NSPhotoLibraryAddUsageDescription` keys to your `Info.plist`. These keys provide user-facing messages explaining why the app needs permission to access and save photos to the device's photo library.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/media-library.mdx#_snippet_3

LANGUAGE: xml
CODE:
```
<key>NSPhotoLibraryUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to access your photos</string>
<key>NSPhotoLibraryAddUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to save photos</string>
```

----------------------------------------

TITLE: Configure EAS Build `preview` profile for internal distribution
DESCRIPTION: This JSON configuration snippet shows the `preview` build profile within `eas.json`. Setting the `distribution` property to `internal` enables sharing build URLs with anyone, allowing them to install the app on their device without requiring a development server. This configuration automatically generates `.apk` (Android) and `.ipa` (iOS) binaries suitable for internal testing.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/internal-distribution-builds.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "build": {
    "preview": {
      "distribution": "internal"
    }
  }
}
```

----------------------------------------

TITLE: Handle Browser Redirects with Linking.createURL
DESCRIPTION: When relying on browser redirects for Stripe payments, you must pass a `urlScheme` to `initStripe`. This JavaScript snippet shows how to dynamically generate the correct `urlScheme` using `expo-linking` and `expo-constants`, ensuring proper deep linking in both Expo Go and standalone apps.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/stripe.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';

urlScheme:
  Constants.appOwnership === 'expo'
    ? Linking.createURL('/--/')
    : Linking.createURL(''),
```

----------------------------------------

TITLE: Implementing Clipboard Operations with expo-clipboard (React Native)
DESCRIPTION: This React Native example demonstrates how to use `expo-clipboard` to copy text to the clipboard using `Clipboard.setStringAsync` and retrieve it with `Clipboard.getStringAsync`. It includes state management to display the fetched text and interactive buttons for user actions, showcasing a complete copy-paste flow.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/clipboard.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Clipboard from 'expo-clipboard';

export default function App() {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = async () => {
    /* @info Copy the text to the clipboard */
    await Clipboard.setStringAsync('hello world');
    /* @end */
  };

  const fetchCopiedText = async () => {
    const text = /* @info Paste the text from the clipboard */ await Clipboard.getStringAsync();
    /* @end */
    setCopiedText(text);
  };

  return (
    <View style={styles.container}>
      <Button title="Click here to copy to Clipboard" onPress={copyToClipboard} />
      <Button title="View copied text" onPress={fetchCopiedText} />
      <Text style={styles.copiedText}>{copiedText}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});
```

----------------------------------------

TITLE: Basic Accelerometer Usage in React Native
DESCRIPTION: This React Native example demonstrates how to integrate the `expo-sensors` Accelerometer module. It shows how to subscribe to real-time accelerometer data (x, y, z coordinates), manage the subscription lifecycle using `useEffect`, and dynamically adjust the sensor's update interval. The UI allows users to toggle the sensor on/off and switch between slow and fast update rates.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/accelerometer.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Accelerometer } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Accelerometer.setUpdateInterval(1000);
  const _fast = () => Accelerometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(Accelerometer.addListener(setData));
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});
```

----------------------------------------

TITLE: Implementing Magnetometer Sensor in React Native (JSX)
DESCRIPTION: This React Native component demonstrates how to integrate the `expo-sensors` Magnetometer to display real-time magnetic field data. It shows how to subscribe to sensor updates, manage the subscription lifecycle with `useEffect`, and dynamically adjust the update interval. The component displays x, y, and z coordinates and provides controls to start/stop updates and change the update speed.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/magnetometer.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Magnetometer } from 'expo-sensors';

export default function Compass() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Magnetometer.setUpdateInterval(1000);
  const _fast = () => Magnetometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Magnetometer.addListener(result => {
        setData(result);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Magnetometer:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});
```

----------------------------------------

TITLE: Configure iOS Privacy Manifest in Expo app.json
DESCRIPTION: This JSON snippet shows how to include an iOS privacy manifest configuration within your `app.json` file. It specifies the `NSPrivacyAccessedAPITypes` array under `expo.ios.privacyManifests`, declaring access to `NSPrivacyAccessedAPICategoryUserDefaults` with a specific reason code (`CA92.1`). This configuration is used by Expo to generate the `PrivacyInfo.xcprivacy` file.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/apple-privacy.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    "name": "My App",
    "slug": "my-app",
    "ios": {
      "privacyManifests": {
        "NSPrivacyAccessedAPITypes": [
          {
            "NSPrivacyAccessedAPIType": "NSPrivacyAccessedAPICategoryUserDefaults",
            "NSPrivacyAccessedAPITypeReasons": ["CA92.1"]
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Implement Protected Route Layout in Expo Router
DESCRIPTION: This TypeScript snippet demonstrates how to create a protected route group in Expo Router. It checks for user authentication status and, if the user is not authenticated, redirects them to the `/login` page using `Redirect`. Otherwise, it renders a `Stack` for the protected routes.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/basics/common-navigation-patterns.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Redirect, Stack } from 'expo-router';

export default function AuthLayout() {
  const isAuthenticated = /* check for valid auth token/session */

  if (!isAuthenticated) {
    return <Redirect href="/login" />;
  }

  return <Stack />;
}
```

----------------------------------------

TITLE: Save and Retrieve Data with Expo SecureStore in React Native
DESCRIPTION: This React Native (JSX) example demonstrates the basic usage of `expo-secure-store` to securely save and retrieve key-value pairs. It includes functions for `save` and `getValueFor` using `setItemAsync` and `getItemAsync` respectively, and integrates them into a simple UI with text inputs and buttons for user interaction.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/securestore.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import { useState } from 'react';
import { Text, View, StyleSheet, TextInput, Button } from 'react-native';
import * as SecureStore from 'expo-secure-store';

async function save(key, value) {
  await SecureStore.setItemAsync(key, value);
}

async function getValueFor(key) {
  let result = await SecureStore.getItemAsync(key);
  if (result) {
    alert("🔐 Here's your value 🔐 \n" + result);
  } else {
    alert('No values stored under that key.');
  }
}

export default function App() {
  const [key, onChangeKey] = useState('Your key here');
  const [value, onChangeValue] = useState('Your value here');

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>
      {/* @hide Add some TextInput components... */}

      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeKey(text)}
        value={key}
      />
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeValue(text)}
        value={value}
      />
      {/* @end */}
      <Button
        title="Save this key/value pair"
        onPress={() => {
          save(key, value);
          onChangeKey('Your key here');
          onChangeValue('Your value here');
        }}
      />
      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>
      <TextInput
        style={styles.textInput}
        onSubmitEditing={event => {
          getValueFor(event.nativeEvent.text);
        }}
        placeholder="Enter the key for the value you want to get"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 10,
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
  paragraph: {
    marginTop: 34,
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  textInput: {
    height: 35,
    borderColor: 'gray',
    borderWidth: 0.5,
    padding: 4,
  }
});
```

----------------------------------------

TITLE: EAS Workflow for Building and Submitting iOS App
DESCRIPTION: This YAML workflow defines an automated CI/CD pipeline using EAS Workflows. It configures two jobs: `build_ios` to create a production iOS build and `submit_ios` to submit that build to the Apple App Store, dependent on the build job's success.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/ios.mdx#_snippet_7

LANGUAGE: yaml
CODE:
```
on:
  push:
    branches: ['main']

jobs:
  build_ios:
    name: Build iOS app
    type: build
    params:
      platform: ios
      profile: production

  submit_ios:
    name: Submit to Apple App Store
    needs: [build_ios]
    type: submit
    params:
      platform: ios
      build_id: ${{ needs.build_ios.outputs.build_id }}
```

----------------------------------------

TITLE: Getting Current Location with Expo Location (React Native)
DESCRIPTION: This React Native component demonstrates how to request foreground location permissions and fetch the device's current geographical position using `expo-location`. It includes basic error handling for permission denial and a check to inform users if the code won't work on an Android emulator in Snack.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/location.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
/* @hide */
import * as Device from 'expo-device';
/* @end */
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  useEffect(() => {
    async function getCurrentLocation() {
      /* @hide */
      if (Platform.OS === 'android' && !Device.isDevice) {
        setErrorMsg(
          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'
        );
        return;
      }
      /* @end */
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    }

    getCurrentLocation();
  }, []);

  let text = 'Waiting...';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  paragraph: {
    fontSize: 18,
    textAlign: 'center',
  },
});
```

----------------------------------------

TITLE: Setting Custom Runtime Version in Expo
DESCRIPTION: This snippet demonstrates how to manually set a custom runtime version in your project's `app.json` or `app.config.js` file. This approach provides complete control over which updates are compatible with specific builds, independent of other version numbers in the project.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/runtime-versions.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    "runtimeVersion": "1.0.0"
  }
}
```

----------------------------------------

TITLE: Installing Expo CLI with npm
DESCRIPTION: This snippet illustrates the recommended command for installing the Expo CLI globally using npm. It emphasizes the importance of using npm for package installations to maintain consistency throughout the documentation, discouraging the use of other package managers like Yarn for this specific purpose.
SOURCE: https://github.com/expo/expo/blob/main/guides/Expo Documentation Writing Style Guide.md#_snippet_1

LANGUAGE: Shell
CODE:
```
npm install expo-cli
```

----------------------------------------

TITLE: Building and Auto-Submitting iOS App with EAS
DESCRIPTION: This command builds an iOS production app and automatically submits it to the Apple App Store upon successful completion. The `--auto-submit` flag streamlines the workflow by combining the build and submission steps.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/ios.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
$ eas build --platform ios --auto-submit
```

----------------------------------------

TITLE: Creating Production Builds with EAS Build
DESCRIPTION: This command initiates the build process for an Expo project, generating a production-ready application binary. These builds are designed for submission to public app stores like Apple App Store and Google Play Store, serving as the base for subsequent over-the-air updates.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/deployment-patterns.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
eas build
```

----------------------------------------

TITLE: Creating URL and URLSearchParams Instances - JavaScript
DESCRIPTION: This snippet demonstrates the basic usage of the standard URL API in Expo, showing how to create new instances of `URL` and `URLSearchParams`. The `URL` object is used for parsing and manipulating URLs, while `URLSearchParams` is used for managing query parameters within a URL.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/url.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
const url = new URL('https://expo.dev');

const params = new URLSearchParams();
```

----------------------------------------

TITLE: Sending Navigation Events to Third-Party Services in Expo Router
DESCRIPTION: This `_layout.tsx` example demonstrates how to integrate a third-party service (e.g., analytics or logging) with Expo Router. It uses `useEffect` hooks to register/deregister the service and to send navigation events (pathname changes) to the service, allowing external tracking of user interactions within the app.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/native-intent.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import ThirdPartyService from 'third-party-sdk';
import { Slot, usePathname } from 'expo-router';

const thirdParty = new ThirdPartyService();

export default function RootLayout() {
  const pathname = usePathname();

  // Perform the service initiation logic
  useEffect(() => {
    thirdParty.register();
    return () => {
      thirdParty.deregister();
    };
  }, [thirdParty]);

  // Send pathname changes to the third party
  useEffect(() => {
    thirdParty.sendEvent({ pathname });
  }, [pathname]);

  return <Slot />;
}
```

----------------------------------------

TITLE: Changing Route Parameters in Expo Router (TypeScript)
DESCRIPTION: This example illustrates various methods to change the `user` route parameter in Expo Router, effectively navigating to new user pages. It demonstrates using `router.setParams`, `router.push`, and the `Link` component to update the route parameter and trigger a component re-mount.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { Text } from 'react-native';
import { router, useLocalSearchParams, Link } from 'expo-router';

export default function User() {
  // All three of these will change the route parameter `user`, and add a new user page.
  return (
    <>
      <Text onPress={() => router.setParams({ user: 'evan' })}>Go to Evan</Text>
      <Text onPress={() => router.push('/mark')}>Go to Mark</Text>
      <Link href="/charlie">Go to Charlie</Link>
    </>
  );
}
```

----------------------------------------

TITLE: Get User Device Language with expo-localization
DESCRIPTION: Access the user's current device language code using `getLocales()` from `expo-localization`. This snippet shows how to import the method and retrieve the primary language code from the returned array of locales.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { getLocales } from 'expo-localization';

const deviceLanguage = getLocales()[0].languageCode;
```

----------------------------------------

TITLE: Configuring Basic Local Credentials for Android and iOS
DESCRIPTION: This JSON snippet illustrates the fundamental structure of the `credentials.json` file, which is used to provide EAS Build with paths and passwords for local Android keystore and iOS provisioning profile/distribution certificate files.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/local-credentials.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "android": {
    "keystore": {
      "keystorePath": "android/keystores/release.keystore",
      "keystorePassword": "paofohlooZ9e",
      "keyAlias": "keyalias",
      "keyPassword": "aew1Geuthoev"
    }
  },
  "ios": {
    "provisioningProfilePath": "ios/certs/profile.mobileprovision",
    "distributionCertificate": {
      "path": "ios/certs/dist-cert.p12",
      "password": "iex3shi9Lohl"
    }
  }
}
```

----------------------------------------

TITLE: React Native Conditional UI and Styling
DESCRIPTION: This snippet illustrates a React Native component's JSX structure, demonstrating conditional rendering based on `showAppOptions`. It includes various buttons for user interaction, integrates an `EmojiPicker` modal, and defines the component's layout and appearance using `StyleSheet.create`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#_snippet_8

LANGUAGE: javascript
CODE:
```
            <CircleButton onPress={onAddSticker} />
            <IconButton icon="save-alt" label="Save" onPress={onSaveImageAsync} />
          </View>
        </View>
      ) : (
        <View style={styles.footerContainer}>
          <Button theme="primary" label="Choose a photo" onPress={pickImageAsync} />
          <Button label="Use this photo" onPress={() => setShowAppOptions(true)} />
        </View>
      )}
      /* @tutinfo Render the <CODE>EmojiPicker</CODE> component at the bottom of the <CODE>Index</CODE> component. */
      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>
        {/* Emoji list component will go here */}
      </EmojiPicker>
      /* @end */
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#25292e',
    alignItems: 'center',
  },
  imageContainer: {
    flex: 1,
  },
  footerContainer: {
    flex: 1 / 3,
    alignItems: 'center',
  },
  optionsContainer: {
    position: 'absolute',
    bottom: 80,
  },
  optionsRow: {
    alignItems: 'center',
    flexDirection: 'row',
  },
});
```

----------------------------------------

TITLE: EAS Install Node Modules
DESCRIPTION: Shows how to use `eas/install_node_modules` to automatically install project dependencies. This function detects the appropriate package manager (npm, pnpm, or Yarn) based on your project setup and works seamlessly with monorepos, simplifying dependency management.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/custom-builds/schema.mdx#_snippet_53

LANGUAGE: YAML
CODE:
```
build:
  name: Install node modules
  steps:
    - eas/checkout
    - eas/install_node_modules
```

----------------------------------------

TITLE: Configuring expo-media-library with Config Plugin (JSON)
DESCRIPTION: This JSON snippet demonstrates how to configure `expo-media-library` using an Expo config plugin. It sets iOS photo library permission messages (`photosPermission`, `savePhotosPermission`) and enables `ACCESS_MEDIA_LOCATION` for Android (`isAccessMediaLocationEnabled`). This configuration is applied during the build process.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/media-library.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    "plugins": [
      [
        "expo-media-library",
        {
          "photosPermission": "Allow $(PRODUCT_NAME) to access your photos.",
          "savePhotosPermission": "Allow $(PRODUCT_NAME) to save photos.",
          "isAccessMediaLocationEnabled": true
        }
      ]
    ]
  }
}
```

----------------------------------------

TITLE: Client Component Importing and Using Standalone Server Function
DESCRIPTION: This client component (`components/button.tsx`) demonstrates how to import and use a standalone server function (`callAction`) from another file. When the button is pressed, the server function is invoked, executing server-side logic seamlessly from the client.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Text } from 'react-native';
import { callAction } from './server-actions';

export default function Button({ title }) {
  return <Text onPress={() => callAction()}>{title}</Text>;
}
```

----------------------------------------

TITLE: Apply RTL Direction to Root View for Web Support
DESCRIPTION: This TypeScript React Native snippet demonstrates how to add the `dir` property to the root `<View>` component for web support, ensuring `react-native-web` automatically adapts to locale direction. It uses `expo-localization` to get the current text direction from the device's locales.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/localization.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { View } from 'react-native';
import { getLocales } from 'expo-localization';
// ...

return <View dir={getLocales()[0].textDirection || 'ltr'}>...</View>;
```

----------------------------------------

TITLE: Configure Location Permissions in Expo app.json
DESCRIPTION: This snippet demonstrates how to configure location permissions for the `expo-maps` library within the `app.json` file using a config plugin. Setting `requestLocationPermission` to `true` automatically adds necessary permissions to AndroidManifest.xml and Info.plist. The `locationPermission` string allows customization of the iOS permission prompt message.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/maps.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  "expo": {
    "plugins": [
      [
        "expo-maps",
        {
          "requestLocationPermission": true,
          "locationPermission": "Allow $(PRODUCT_NAME) to use your location"
        }
      ]
    ]
  }
}
```

----------------------------------------

TITLE: Using LottieView for Animations in React Native
DESCRIPTION: This snippet demonstrates how to integrate and control Lottie animations within a React Native application using `lottie-react-native`. It shows how to import `LottieView`, load an animation from a local JSON file, and programmatically control its playback (reset and play) using a `useRef` hook and a button.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/lottie.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useRef, useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';
import LottieView from 'lottie-react-native';

export default function App() {
  const animation = useRef<LottieView>(null);
  useEffect(() => {
    // You can control the ref programmatically, rather than using autoPlay
    // animation.current?.play();
  }, []);

  return (
    <View style={styles.animationContainer}>
      <LottieView
        autoPlay
        ref={animation}
        style={{
          width: 200,
          height: 200,
          backgroundColor: '#eee',
        }}
        // Find more Lottie files at https://lottiefiles.com/featured
        source={require('./assets/gradientBall.json')}
      />
      <View style={styles.buttonContainer}>
        <Button
          title="Restart Animation"
          onPress={() => {
            animation.current?.reset();
            animation.current?.play();
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  animationContainer: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  buttonContainer: {
    paddingTop: 20,
  },
});
```

----------------------------------------

TITLE: Record Audio with useAudioRecorder in React Native
DESCRIPTION: This React Native (JSX) example demonstrates how to record audio using the `useAudioRecorder` hook from `expo-audio`. It includes logic to request microphone permissions and to start/stop recording, with the recorded audio available via `audioRecorder.uri`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/audio.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { useAudioRecorder, AudioModule, RecordingPresets } from 'expo-audio';

export default function App() {
  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);

  const record = async () => {
    await audioRecorder.prepareToRecordAsync();
    audioRecorder.record();
  };

  const stopRecording = async () => {
    // The recording will be available on `audioRecorder.uri`.
    await audioRecorder.stop();
  };

  useEffect(() => {
    (async () => {
      const status = await AudioModule.requestRecordingPermissionsAsync();
      if (!status.granted) {
        Alert.alert('Permission to access microphone was denied');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Button
        title={audioRecorder.isRecording ? 'Stop Recording' : 'Start Recording'}
        onPress={audioRecorder.isRecording ? stopRecording : record}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
```

----------------------------------------

TITLE: Strongly Typing Route Parameters with Expo Router useLocalSearchParams
DESCRIPTION: This snippet demonstrates how to strongly type route parameters using the `useLocalSearchParams` hook by providing the full route path as a generic. This ensures that parameters like `profile` and `search` are correctly typed (e.g., `string` and `string[]`), enhancing type safety for dynamic routes.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Text } from 'react-native';
import { useLocalSearchParams } from 'expo-router';

export default function Page() {
  /* @info Profile a route for strongly typed hooks */
  const {
    profile, // string
    search, // string[]
  } = useLocalSearchParams<'app/(search)/[profile]/[...search].tsx'>();
  /* @end */

  return (
    <>
      <Text>Profile: {profile}</Text>
      <Text>Search: {search.join(',')}</Text>
    </>
  );
}
```

----------------------------------------

TITLE: Using Prepared Statements with Expo SQLite in TypeScript
DESCRIPTION: This snippet demonstrates how to use prepared statements for efficient and secure database operations. It shows compiling a SQL query once with `prepareAsync`, executing it multiple times with `executeAsync` using different parameters, and the importance of finalizing the statement with `finalizeAsync` in a `try-finally` block.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/sqlite.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
const statement = await db.prepareAsync(
  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'
);
try {
  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });
  console.log('bbb and 101:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });
  console.log('ccc and 102:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });
  console.log('ddd and 103:', result.lastInsertRowId, result.changes);
} finally {
  await statement.finalizeAsync();
}

const statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');
try {
  const result = await statement2.executeAsync<{ value: string; intValue: number }>(
    { $intValue: 100 }
  );

  // `getFirstAsync()` is useful when you want to get a single row from the database.
  const firstRow = await result.getFirstAsync();
  console.log(firstRow.id, firstRow.value, firstRow.intValue);

  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.
  await result.resetAsync();

  // `getAllAsync()` is useful when you want to get all results as an array of objects.
  const allRows = await result.getAllAsync();
  for (const row of allRows) {
    console.log(row.value, row.intValue);
  }

  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.
  await result.resetAsync();

  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.
  for await (const row of result) {
    console.log(row.value, row.intValue);
  }
} finally {
  await statement2.finalizeAsync();
}
```

----------------------------------------

TITLE: Adding iOS Calendar and Reminders Usage Descriptions to Info.plist
DESCRIPTION: This XML snippet illustrates how to add privacy usage descriptions (`NSCalendarsUsageDescription` and `NSRemindersUsageDescription`) to your iOS `Info.plist` file. These strings are displayed to the user when the app requests access to their calendar or reminders, explaining why the app needs the permission.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/calendar.mdx#_snippet_2

LANGUAGE: xml
CODE:
```
<key>NSCalendarsUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your calendar</string>
<key>NSRemindersUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your reminders</string>
```

----------------------------------------

TITLE: Promote an existing EAS deployment to production
DESCRIPTION: This command promotes an already existing deployment, identified by its ID, to the production URL. This is useful for rolling back to a previous stable version or promoting a specific past deployment to production.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/hosting/deployments-and-aliases.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
$ eas deploy:alias --prod --id=deploymentId
```

----------------------------------------

TITLE: Installing expo-constants package via npx expo install
DESCRIPTION: This command adds the `expo-constants` package to your project's `npm` dependencies. It utilizes `npx expo install`, the recommended method for installing Expo modules, which automatically handles version compatibility with your current Expo SDK.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-constants/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npx expo install expo-constants
```

----------------------------------------

TITLE: Publishing an Expo Update via EAS CLI
DESCRIPTION: Use the `eas update` command to publish changes to your Expo project. Specify a channel name to target a specific update branch and include a descriptive message for the update. This command generates an update bundle and uploads it to EAS servers, making it available to your app builds.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas-update/getting-started.mdx#_snippet_13

LANGUAGE: Shell
CODE:
```
$ eas update --channel [channel-name] --message "[message]"
```

----------------------------------------

TITLE: Publishing OTA Updates with EAS CLI (Shell)
DESCRIPTION: This command, part of the EAS CLI, is used to publish static files to the EAS Update cloud hosting service, enabling over-the-air (OTA) updates for Expo applications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/more/glossary-of-terms.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
eas update
```

----------------------------------------

TITLE: Managing EAS Credentials via CLI
DESCRIPTION: This command initiates an interactive process to synchronize application credentials between EAS servers and your local `credentials.json` file. Users can choose to download remote credentials for local build environments or upload local credentials to EAS for managed services. The command guides the user through platform selection (Android/iOS) and the specific upload/download operation.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/app-signing/syncing-credentials.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
eas credentials
```

----------------------------------------

TITLE: Implementing Background Fetch with Expo TaskManager in React Native
DESCRIPTION: This comprehensive TypeScript React Native example illustrates the full lifecycle of using `expo-background-fetch` and `expo-task-manager`. It covers defining a background task globally, registering it with specific intervals and options, and optionally unregistering it. The example also includes a React component to manage and display the registration status and trigger task registration/unregistration.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/background-fetch.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

// 1. Define the task by providing a name and the function that should be executed
// Note: This needs to be called in the global scope (e.g outside of your React components)
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  // Be sure to return the successful result type!
  return BackgroundFetch.BackgroundFetchResult.NewData;
});

// 2. Register the task at some point in your app by providing the same name,
// and some configuration options for how the background fetch should behave
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 60 * 15, // 15 minutes
    stopOnTerminate: false, // android only,
    startOnBoot: true, // android only
  });
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background fetch calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});
```

----------------------------------------

TITLE: Log In to Expo Account with EAS CLI
DESCRIPTION: Authenticates your local EAS CLI with your Expo account. This command will prompt you to enter your Expo account email or username and password to complete the login process.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/configure-development-build.mdx#_snippet_3

LANGUAGE: npm
CODE:
```
$ eas login
```

----------------------------------------

TITLE: Install jest-expo and dependencies (macOS/Linux)
DESCRIPTION: Installs the jest-expo preset, Jest testing framework, and Jest TypeScript types as development dependencies using npx expo install.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/unit-testing.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
npx expo install jest-expo jest @types/jest --dev
```

----------------------------------------

TITLE: Animating Width with React Native Reanimated (JSX)
DESCRIPTION: This example demonstrates how to create a simple width animation using `react-native-reanimated`. It utilizes `useSharedValue` to manage the animated width, `withTiming` for smooth transitions with a custom easing curve, and `useAnimatedStyle` to apply the animated property to an `Animated.View`. Pressing the "toggle" button updates the shared value, triggering the animation.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v52.0.0/sdk/reanimated.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
    duration: 500,
    easing: Easing.bezier(0.5, 0.01, 0, 1),
  };

  const style = useAnimatedStyle(() => {
    return {
      width: withTiming(randomWidth.value, config),
    };
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, style]} />
      <Button
        title="toggle"
        onPress={() => {
          randomWidth.value = Math.random() * 350;
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  box: {
    width: 100,
    height: 80,
    backgroundColor: 'black',
    margin: 30,
  },
});
```

----------------------------------------

TITLE: Handle Errors in Expo API Routes with Custom Responses
DESCRIPTION: This example shows how to handle specific error conditions within an Expo API route. It checks for a missing `post` parameter and returns a custom `404 Not Found` response with a plain text body and appropriate headers, demonstrating how to use the `Response` object for explicit error handling.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/api-routes.mdx#_snippet_10

LANGUAGE: ts
CODE:
```
import { Request, Response } from 'expo-router/server';

export async function GET(request: Request, { post }: Record<string, string>) {
  if (!post) {
    return new Response('No post found', {
      status: 404,
      headers: {
        'Content-Type': 'text/plain',
      },
    });
  }
  // fetch data for `post`
  return Response.json({ ... });
}
```

----------------------------------------

TITLE: Accessing Local and Global URL Parameters (Expo Router)
DESCRIPTION: This snippet illustrates the usage of `useLocalSearchParams` and `useGlobalSearchParams` to access route parameters within a dynamic route (`app/[user].tsx`). It logs the values from both hooks to demonstrate their different update behaviors in a nested navigation context. The component also provides `Link` components to push new instances of the same route with different user parameters.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Text, View } from 'react-native';
import { useLocalSearchParams, useGlobalSearchParams, Link } from 'expo-router';

const friends = ['charlie', 'james']

export default function Route() {
  const glob = useGlobalSearchParams();
  const local = useLocalSearchParams();

  console.log("Local:", local.user, "Global:", glob.user);

  return (
    <View>
      <Text>User: {local.user}</Text>
      {friends.map(friend => (
        <Link key={friend} href={`/${friend}`}>
          Visit {friend}
        </Link>
      ))}
    </View>
  );
}
```

----------------------------------------

TITLE: Configuring Stripe Plugin in app.json for Expo
DESCRIPTION: This JSON snippet demonstrates how to configure the `@stripe/stripe-react-native` config plugin within your `app.json` or `app.config.js` file for Expo projects. It allows setting `merchantIdentifier` for Apple Pay (iOS) and `enableGooglePay` for Android, streamlining the setup process for payment integrations.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/stripe.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "expo": {
    /* @hide ... */ /* @end */
    "plugins": [
      [
        "@stripe/stripe-react-native",
        {
          "merchantIdentifier": "string | string []",
          "enableGooglePay": "boolean"
        }
      ]
    ]
  }
}
```

----------------------------------------

TITLE: Rendering Universal Text with React Native for Web
DESCRIPTION: This snippet demonstrates how to use the `<Text>` component from `react-native` to render text universally across platforms. `react-native-web` translates this component into appropriate `react-dom` primitives, maximizing code reuse for both web and native applications.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/workflow/web.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
import { Text } from 'react-native';

export default function Page() {
  return <Text>Home page</Text>;
}
```

----------------------------------------

TITLE: Generate New iOS Push Notification Key for Entitlement Error
DESCRIPTION: If you encounter the 'No valid aps-environment entitlement string found' error on iOS, it indicates a missing push notification key. Trigger a new build with the specified profile and platform to generate a new key and resolve the issue.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/push-notifications/faq.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
eas build --profile [profile] --platform ios
```

----------------------------------------

TITLE: Statically Typing Rest Route and Multiple Search Parameters (Expo Router)
DESCRIPTION: This snippet illustrates how to statically type both rest route parameters (as a string array) and multiple optional search parameters (`query`, `query2`) using `useLocalSearchParams`. The generic type combines `everything: string[]` with `query?: string` and `query2?: string`, providing comprehensive type safety for complex URL structures.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/url-parameters.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Text } from 'react-native';
import { useLocalSearchParams } from 'expo-router';

export default function Route() {
  const { everything } = useLocalSearchParams<{
    /* @info <b>everything</b> will be an array of path segments, even if there's only one */
    everything: string[];
    /* @info <b>query</b> is an optional search parameter */
    query?: string;
    /* @info <b>query2</b> is an optional search parameter */
    query2?: string;
    /* @end */
  }>();
  const user = everything[0];

  return <Text>User: {user}</Text>;
}

// Given the URL: `/evanbacon/123?query=hello&query2=world`
// The following is returned: { everything: ["evanbacon", "123"], query: "hello", query2: "world" }
```

----------------------------------------

TITLE: Migrating React Navigation `navigation` prop to Expo Router `useRouter` hook
DESCRIPTION: This `diff` snippet shows how to replace the `navigation` prop, commonly passed to screens in React Navigation, with the `useRouter` hook from `expo-router`. It demonstrates changing `navigation.push('User', { user: 'bacon' })` to `router.push('/users/bacon')` for navigation.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/migrate/from-react-navigation.mdx#_snippet_5

LANGUAGE: diff
CODE:
```
+ import { useRouter } from 'expo-router';

export default function Page({
-  navigation
}) {
-  navigation.push('User', { user: 'bacon' });

+  const router = useRouter();
+  router.push('/users/bacon');
}
```

----------------------------------------

TITLE: Integrate Button Components in React Native Main App
DESCRIPTION: This snippet demonstrates how to import and use the `CircleButton` and `IconButton` components within the main `index.tsx` file. It includes state management for image selection and app options, placeholder functions for button actions, and conditional rendering to display the buttons after an image is selected.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { useState } from 'react';

import Button from '@/components/Button';
import ImageViewer from '@/components/ImageViewer';
import IconButton from '@/components/IconButton';
import CircleButton from '@/components/CircleButton';

const PlaceholderImage = require('@/assets/images/background-image.png');

export default function Index() {
  const [selectedImage, setSelectedImage] = useState<string | undefined>(undefined);
  const [showAppOptions, setShowAppOptions] = useState<boolean>(false);

  const pickImageAsync = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images'],
      allowsEditing: true,
      quality: 1,
    });

    if (!result.canceled) {
      setSelectedImage(result.assets[0].uri);
      setShowAppOptions(true);
    } else {
      alert('You did not select any image.');
    }
  };

  const onReset = () => {
    setShowAppOptions(false);
  };

  const onAddSticker = () => {
    // we will implement this later
  };

  const onSaveImageAsync = async () => {
    // we will implement this later
  };

  return (
    <View style={styles.container}>
      <View style={styles.imageContainer}>
        <ImageViewer imgSource={PlaceholderImage} selectedImage={selectedImage} />
      </View>
      {showAppOptions ? (
        <View style={styles.optionsContainer}>
          <View style={styles.optionsRow}>
            <IconButton icon="refresh" label="Reset" onPress={onReset} />
            <CircleButton onPress={onAddSticker} />

```

----------------------------------------

TITLE: Creating a Simple Animation with react-native-reanimated (TypeScript)
DESCRIPTION: This example demonstrates a basic animation using `react-native-reanimated`. It uses `useSharedValue` to manage an animatable value, `withTiming` for smooth transitions, and `useAnimatedStyle` to apply the animation to a `View`'s width. The animation is triggered by a button press.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/user-interface/animation.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
    duration: 500,
    easing: Easing.bezier(0.5, 0.01, 0, 1),
  };

  const style = useAnimatedStyle(() => {
    return {
      width: withTiming(randomWidth.value, config),
    };
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, style]} />
      <Button
        title="toggle"
        onPress={() => {
          randomWidth.value = Math.random() * 350;
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  box: {
    width: 100,
    height: 80,
    backgroundColor: 'black',
    margin: 30,
  },
});
```

----------------------------------------

TITLE: Client Component with Function Prop for Server Function Call
DESCRIPTION: This client component (`components/button.tsx`) is designed to accept an `onPress` prop, which is intended to be a server function. When the `Text` component is pressed, it invokes the provided server function, bridging client-side interaction with server-side logic.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/guides/server-components.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
'use client';
import { Text } from 'react-native';

export default function Button({ title, onPress }) {
  return <Text onPress={() => onPress()}>{title}</Text>;
}
```

----------------------------------------

TITLE: Submitting Android App to Google Play Store with EAS (Shell)
DESCRIPTION: This command starts the interactive process of submitting an Android build to the Google Play Store via EAS CLI. It guides the user through various prompts to configure the submission, including selecting the build and release track.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
$ eas submit --platform android
```

----------------------------------------

TITLE: Root Stack Navigator Layout in Expo Router
DESCRIPTION: Defines the top-level layout for the application using a `Stack` navigator from `expo-router`. This file (`app/_layout.tsx`) serves as the primary navigator that encapsulates all other routes and nested navigators.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/advanced/nesting-navigators.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Stack } from 'expo-router';

export default Stack;
```

----------------------------------------

TITLE: EAS Workflow: Maestro Test Job Configuration
DESCRIPTION: Configures an EAS workflow job to run Maestro tests on a specified build. It supports various parameters for test execution, including environment, image, build ID, flow paths, sharding, retries, screen recording, and tag filtering. It also allows specifying the Maestro version and Android system image package. Note: Maestro tests are experimental and may experience flakiness.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/syntax.mdx#_snippet_39

LANGUAGE: yaml
CODE:
```
jobs:
  my_job:
    # @info #
    type: maestro
    # @end #
    environment: production | preview | development # optional, defaults to preview
    image: string # optional. See https://docs.expo.dev/build-reference/infrastructure/ for a list of available images.
    params:
      build_id: string # required
      flow_path: string | string[] # required
      shards: number # optional, defaults to 1
      retries: number # optional, defaults to 1
      record_screen: boolean # optional, defaults to false. If true, uploads a screen recording of the tests.
      include_tags: string | string[] # optional. Tags to include in the tests. Will be passed to Maestro as `--include-tags`.
      exclude_tags: string | string[] # optional. Tags to exclude from the tests. Will be passed to Maestro as `--exclude-tags`.
      maestro_version: string # optional. Version of Maestro to use for the tests. If not provided, the latest version will be used.
      android_system_image_package: string # optional. Android emulator system image package to use. Run `sdkmanager --list` on your machine to list available packages. Choose an `x86_64` variant. Examples: `system-images;android-36;google_apis;x86_64`, `system-images;android-35-ext15;google_apis_playstore;x86_64`.
```

----------------------------------------

TITLE: Building Production Android App with EAS Build (Shell)
DESCRIPTION: This command initiates a production build of your Android application using EAS Build. The `--platform android` flag specifies the target platform, and `--profile production` ensures the build is optimized and configured for release to the Google Play Store.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/submit/android.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
$ eas build --platform android --profile production
```

----------------------------------------

TITLE: Basic EAS Deployment to Production
DESCRIPTION: This workflow demonstrates a straightforward deployment of your application to production using EAS Hosting, suitable for a basic release process.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/pre-packaged-jobs.mdx#_snippet_8

LANGUAGE: yaml
CODE:
```
name: Basic Deployment

jobs:
  deploy:
    name: Deploy to Production
    type: deploy
    params:
      prod: true
```

----------------------------------------

TITLE: Recording Sounds with Expo Audio in React Native
DESCRIPTION: This snippet illustrates how to record audio using `expo-av`. It covers requesting audio recording permissions, setting audio mode for recording, starting recording with `Audio.Recording.createAsync`, stopping and unloading the recording with `recording.stopAndUnloadAsync`, and retrieving the URI of the recorded audio. It also handles permission requests and audio mode adjustments for iOS.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v51.0.0/sdk/audio.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [recording, setRecording] = useState();
  const [permissionResponse, requestPermission] = Audio.usePermissions();

  async function startRecording() {
    try {
      if (permissionResponse.status !== 'granted') {
        console.log('Requesting permission..');
        await requestPermission();
      }
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      console.log('Starting recording..');
      const { recording } = await Audio.Recording.createAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );
      setRecording(recording);
      console.log('Recording started');
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  }

  async function stopRecording() {
    console.log('Stopping recording..');
    setRecording(undefined);
    await recording.stopAndUnloadAsync();
    await Audio.setAudioModeAsync(
      {
        allowsRecordingIOS: false,
      }
    );
    const uri = recording.getURI();
    console.log('Recording stopped and stored at', uri);
  }

  return (
    <View style={styles.container}>
      <Button
        title={recording ? 'Stop Recording' : 'Start Recording'}
        onPress={recording ? stopRecording : startRecording}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
```

----------------------------------------

TITLE: Configure EAS Build Profile for GitHub PR Trigger
DESCRIPTION: This JSON snippet demonstrates how to modify the `eas.json` configuration file to specify the build image for Android and iOS platforms under the `development` profile. This configuration is essential for enabling automatic build triggers via GitHub PR labels, ensuring that the build environment is correctly defined for both platforms.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/eas/using-github.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  "build": {
    "development": {
      "android": {
        "image": "latest"
      },
      "ios": {
        "image": "latest"
      }
    }
  }
}
```

----------------------------------------

TITLE: Nesting Tab Navigator in Root Stack Layout (TSX)
DESCRIPTION: This code updates the root layout file (`app/_layout.tsx`) to integrate the tab navigator. It uses an `Expo Router` `Stack` component and includes a `Stack.Screen` named `(tabs)`, making the previously defined tab navigator the initial and primary route of the application. This ensures the tab-based navigation is accessible from the app's entry point.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/develop/file-based-routing.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Stack } from 'expo-router';

export default function RootLayout() {
  return (
    <Stack>
      <Stack.Screen name="(tabs)" />
    </Stack>
  );
}
```

----------------------------------------

TITLE: Streaming Server-side Rendering with Apollo and HelmetProvider in React
DESCRIPTION: Shows how to integrate `react-helmet-async` with streaming server-side rendering, specifically with `react-apollo`'s `getDataFromTree`. It demonstrates pre-fetching data, extracting Helmet context, and then streaming the HTML content, ensuring that head data is output before the main stream. This method is suitable when `<head>` data needs to be parsed before `renderToNodeStream()`.
SOURCE: https://github.com/expo/expo/blob/main/packages/expo-router/vendor/react-helmet-async/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import through from 'through';
import { renderToNodeStream } from 'react-dom/server';
import { getDataFromTree } from 'react-apollo';
import { Helmet, HelmetProvider } from 'react-helmet-async';
import template from 'server/template';

const helmetContext = {};

const app = (
  <HelmetProvider context={helmetContext}>
    <App>
      <Helmet>
        <title>Hello World</title>
        <link rel="canonical" href="https://www.tacobell.com/" />
      </Helmet>
      <h1>Hello World</h1>
    </App>
  </HelmetProvider>
);

await getDataFromTree(app);

const [header, footer] = template({
  helmet: helmetContext.helmet,
});

res.status(200);
res.write(header);
renderToNodeStream(app)
  .pipe(
    through(
      function write(data) {
        this.queue(data);
      },
      function end() {
        this.queue(footer);
        this.queue(null);
      }
    )
  )
  .pipe(res);
```

----------------------------------------

TITLE: Uploading Files as Blobs with expo/fetch (TypeScript)
DESCRIPTION: This example shows how to create a `File` object, write content to it, convert it to a `Blob`, and then upload the blob directly as the request body using `expo/fetch` with a POST method. This is suitable for sending raw binary data.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { fetch } from 'expo/fetch';
import { File } from 'expo-file-system/next';

const src = new File(testDirectory, 'file.txt');
file.write('Hello, world!');
const blob = src.blob();

const response = await fetch('https://example.com', {
  method: 'POST',
  body: blob,
});
```

----------------------------------------

TITLE: Imperative Navigation with Typed Expo Router Object
DESCRIPTION: This snippet demonstrates how to perform imperative navigation using the globally available `router` object from `expo-router`. With typed routes enabled, the `push` method benefits from static typing, ensuring that the provided `href` corresponds to a valid and recognized route in the application.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/typed-routes.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { router } from 'expo-router';

router.push('/about');
```

----------------------------------------

TITLE: Customize Root HTML for Web Pages in Expo Router
DESCRIPTION: This snippet demonstrates how to create and configure the `app/+html.tsx` file to customize the root HTML boilerplate for web pages in an Expo project. This component runs only in Node.js during static rendering, allowing global `<head>` elements and control over body scrolling.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/router/reference/static-rendering.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { ScrollViewStyleReset } from 'expo-router/html';
import { type PropsWithChildren } from 'react';

// This file is web-only and used to configure the root HTML for every
// web page during static rendering.
// The contents of this function only run in Node.js environments and
// do not have access to the DOM or browser APIs.
export default function Root({ children }: PropsWithChildren) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

        {/*
          Disable body scrolling on web. This makes ScrollView components work closer to how they do on native.
          However, body scrolling is often nice to have for mobile web. If you want to enable it, remove this line.
        */}
        <ScrollViewStyleReset />

        {/* Add any additional <head> elements that you want globally available on web... */}
      </head>
      <body>{children}</body>
    </html>
  );
}
```

----------------------------------------

TITLE: Configure Basic EAS Update to Production Channel
DESCRIPTION: This workflow publishes an update to the production channel whenever you push to the main branch, using the commit message as the update message.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/eas/workflows/pre-packaged-jobs.mdx#_snippet_30

LANGUAGE: yaml
CODE:
```
name: Update Production

on:
  push:
    branches: ['main']

jobs:
  update_production:
    name: Update Production Channel
    type: update
    params:
      channel: production
```

----------------------------------------

TITLE: Configure eas.json for Remote App Versioning and Auto-Increment
DESCRIPTION: This JSON configuration snippet for eas.json demonstrates how to enable remote management of app versions. By setting cli.appVersionSource to "remote" and build.production.autoIncrement to true, EAS automatically handles and increments android.versionCode and ios.buildNumber for production builds.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/app-versions.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  "cli": {
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
    },
    "preview": {
    },
    "production": {
      "autoIncrement": true
    }
  }
}
```

----------------------------------------

TITLE: Implementing Background Fetch with Expo and React Native
DESCRIPTION: This comprehensive example illustrates the full lifecycle of a background fetch task using `expo-background-fetch` and `expo-task-manager`. It covers defining a task globally, registering it with specific intervals and platform-specific options, unregistering it, and a React Native component to manage and display the task's registration status and current background fetch status. Dependencies include `expo-background-fetch` and `expo-task-manager`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/background-fetch.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

// 1. Define the task by providing a name and the function that should be executed
// Note: This needs to be called in the global scope (e.g outside of your React components)
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  // Be sure to return the successful result type!
  return BackgroundFetch.BackgroundFetchResult.NewData;
});

// 2. Register the task at some point in your app by providing the same name,
// and some configuration options for how the background fetch should behave
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 60 * 15, // 15 minutes
    stopOnTerminate: false, // android only,
    startOnBoot: true, // android only
  });
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background fetch calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});
```

----------------------------------------

TITLE: Create EmojiPicker Component for Modal
DESCRIPTION: This snippet defines the `EmojiPicker` React Native component, which serves as a modal for selecting emojis. It utilizes `Modal`, `View`, `Text`, `Pressable`, and `StyleSheet` from `react-native`, along with `MaterialIcons` for the close button. The component accepts `isVisible`, `onClose`, and `children` props to control its visibility, close behavior, and content. It includes styling for the modal content and title container.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/tutorial/create-a-modal.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Modal, View, Text, Pressable, StyleSheet } from 'react-native';
import { PropsWithChildren } from 'react';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';

type Props = PropsWithChildren<{
  isVisible: boolean;
  onClose: () => void;
}>;

export default function EmojiPicker({ isVisible, children, onClose }: Props) {
  return (
    <View>
    <Modal animationType="slide" transparent={true} visible={isVisible}>
      <View style={styles.modalContent}>
        <View style={styles.titleContainer}>
          <Text style={styles.title}>Choose a sticker</Text>
          <Pressable onPress={onClose}>
            <MaterialIcons name="close" color="#fff" size={22} />
          </Pressable>
        </View>
        {children}
      </View>
    </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  modalContent: {
    height: '25%',
    width: '100%',
    backgroundColor: '#25292e',
    borderTopRightRadius: 18,
    borderTopLeftRadius: 18,
    position: 'absolute',
    bottom: 0,
  },
  titleContainer: {
    height: '16%',
    backgroundColor: '#464C55',
    borderTopRightRadius: 10,
    borderTopLeftRadius: 10,
    paddingHorizontal: 20,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  title: {
    color: '#fff',
    fontSize: 16,
  },
});
```

----------------------------------------

TITLE: Configure Google Maps API Key for Android
DESCRIPTION: Detailed steps to set up Google Maps on Android for Expo projects, including registering a Google Cloud API project, enabling the Maps SDK, copying SHA-1 certificate fingerprints (for Google Play Store or development builds), creating an API key with restrictions, and adding the API key to `app.json`.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/v53.0.0/sdk/maps.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Set up Google Maps on Android:
  Step 1: Register a Google Cloud API project and enable the Maps SDK for Android
    - Open Google API Manager: https://console.developers.google.com/apis
    - Create a project.
    - Enable 'Maps SDK for Android' for the project.
  Step 2: Copy your app's SHA-1 certificate fingerprint
    For Google Play Store:
      - Upload app binary to Google Play console at least once.
      - Go to Google Play Console > (your app) > Release > Setup > App integrity > App Signing.
      - Copy 'SHA-1 certificate fingerprint'.
    For development builds:
      - Create a development build.
      - Go to project's dashboard (expo.dev/accounts/[username]/projects/[project-name]) > Configure > Credentials.
      - Under Application Identifiers, click project's package name.
      - Under Android Keystore, copy 'SHA-1 Certificate Fingerprint'.
  Step 3: Create an API key
    - Go to Google Cloud Credential manager: https://console.cloud.google.com/apis/credentials
    - Click 'Create Credentials' > 'API Key'.
    - In modal, click 'Edit API key'.
    - Under 'Key restrictions' > 'Application restrictions', choose 'Android apps'.
    - Under 'Restrict usage to your Android apps', click 'Add an item'.
    - Add 'android.package' from app.json (e.g., 'com.company.myapp') to package name field.
    - Add the SHA-1 certificate fingerprint's value from step 2.
    - Click 'Done', then 'Save'.
  Step 4: Add the API key to your project
    - Copy your API Key into your app.json under the 'android.config.googleMaps.apiKey' field.
    - Create a new development build.
```

----------------------------------------

TITLE: Submit Android Build to Google Play Store with EAS CLI
DESCRIPTION: This command starts the interactive submission process for an Android application to the Google Play Store using the EAS CLI. It guides the user through the necessary steps, leveraging previously built artifacts and configured service accounts.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/deploy/submit-to-app-stores.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
eas submit --platform android
```

----------------------------------------

TITLE: Downloading Files with File.downloadFileAsync (TypeScript)
DESCRIPTION: This example shows how to download a file from a URL to a specified directory using `File.downloadFileAsync`. It creates a destination directory if it doesn't exist and logs the existence and URI of the downloaded file, providing a direct path to the stored content.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/filesystem-next.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { File, Paths } from 'expo-file-system/next';

const url = 'https://pdfobject.com/pdf/sample.pdf';
const destination = new Directory(Paths.cache, 'pdfs');
try {
  destination.create();
  const output = await File.downloadFileAsync(url, destination);
  console.log(output.exists); // true
  console.log(output.uri); // path to the downloaded file, e.g. '${cacheDirectory}/pdfs/sample.pdf'
} catch (error) {
  console.error(error);
}
```

----------------------------------------

TITLE: Configuring EAS Build Profile for APK Generation (JSON)
DESCRIPTION: This JSON snippet demonstrates how to modify the `eas.json` configuration file to ensure that EAS Build generates an Android Package (APK) instead of the default Android App Bundle (AAB). It shows four different properties (`buildType`, `gradleCommand`, `developmentClient`, `distribution`) that can be set within a build profile to achieve APK output, providing flexibility for various build scenarios like preview, development, or internal distribution.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/build-reference/apk.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  "build": {
    "preview": {
      "android": {
        "buildType": "apk"
      }
    },
    "preview2": {
      "android": {
        "gradleCommand": ":app:assembleRelease"
      }
    },
    "preview3": {
      "developmentClient": true
    },
    "preview4": {
      "distribution": "internal"
    },
    "production": {}
  }
}
```

----------------------------------------

TITLE: Displaying Inline HTML with React Native WebView
DESCRIPTION: This example illustrates how to render inline HTML content directly within the `WebView` component. It sets `originWhitelist={['*']}` to allow all origins for the inline content and uses `expo-constants` and `StyleSheet` for layout and styling.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/webview.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      originWhitelist={['*']}
      source={{ html: '<h1><center>Hello world</center></h1>' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});
```

----------------------------------------

TITLE: Save and Retrieve Data with Expo SecureStore in React Native
DESCRIPTION: Demonstrates how to use `expo-secure-store` to securely save and retrieve key-value pairs in a React Native application. This example includes basic UI components for user input and displaying stored values, highlighting the `setItemAsync` and `getItemAsync` methods.
SOURCE: https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/securestore.mdx#_snippet_6

LANGUAGE: jsx
CODE:
```
import { useState } from 'react';
import { Text, View, StyleSheet, TextInput, Button } from 'react-native';
import * as SecureStore from 'expo-secure-store';

async function save(key, value) {
  await SecureStore.setItemAsync(key, value);
}

async function getValueFor(key) {
  let result = await SecureStore.getItemAsync(key);
  if (result) {
    alert("🔐 Here's your value 🔐 \n" + result);
  } else {
    alert('No values stored under that key.');
  }
}

export default function App() {
  const [key, onChangeKey] = useState('Your key here');
  const [value, onChangeValue] = useState('Your value here');

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>
      {/* @hide Add some TextInput components... */}

      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeKey(text)}
        value={key}
      />
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeValue(text)}
        value={value}
      />
      {/* @end */}
      <Button
        title="Save this key/value pair"
        onPress={() => {
          save(key, value);
          onChangeKey('Your key here');
          onChangeValue('Your value here');
        }}
      />
      <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>
      <TextInput
        style={styles.textInput}
        onSubmitEditing={event => {
          getValueFor(event.nativeEvent.text);
        }}
        placeholder="Enter the key for the value you want to get"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 10,
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
  paragraph: {
    marginTop: 34,
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  textInput: {
    height: 35,
    borderColor: 'gray',
    borderWidth: 0.5,
    padding: 4,
  }
});
```