/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DevicesDeviceIdRouteImport } from './routes/devices/$deviceId'
import { Route as DevicesDeviceIdViewRouteImport } from './routes/devices/$deviceId/view'
import { Route as DevicesDeviceIdViewGameRouteImport } from './routes/devices/$deviceId/view/game'
import { Route as DevicesDeviceIdViewGameIndexRouteImport } from './routes/devices/$deviceId/view/game/index'
import { Route as DevicesDeviceIdViewGameLibraryRouteImport } from './routes/devices/$deviceId/view/game/library'
import { Route as DevicesDeviceIdViewGameHomeRouteImport } from './routes/devices/$deviceId/view/game/home'
import { Route as DevicesDeviceIdViewGameBazzarRouteImport } from './routes/devices/$deviceId/view/game/bazzar'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesDeviceIdRoute = DevicesDeviceIdRouteImport.update({
  id: '/devices/$deviceId',
  path: '/devices/$deviceId',
  getParentRoute: () => rootRouteImport,
} as any)
const DevicesDeviceIdViewRoute = DevicesDeviceIdViewRouteImport.update({
  id: '/view',
  path: '/view',
  getParentRoute: () => DevicesDeviceIdRoute,
} as any)
const DevicesDeviceIdViewGameRoute = DevicesDeviceIdViewGameRouteImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => DevicesDeviceIdViewRoute,
} as any)
const DevicesDeviceIdViewGameIndexRoute =
  DevicesDeviceIdViewGameIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DevicesDeviceIdViewGameRoute,
  } as any)
const DevicesDeviceIdViewGameLibraryRoute =
  DevicesDeviceIdViewGameLibraryRouteImport.update({
    id: '/library',
    path: '/library',
    getParentRoute: () => DevicesDeviceIdViewGameRoute,
  } as any)
const DevicesDeviceIdViewGameHomeRoute =
  DevicesDeviceIdViewGameHomeRouteImport.update({
    id: '/home',
    path: '/home',
    getParentRoute: () => DevicesDeviceIdViewGameRoute,
  } as any)
const DevicesDeviceIdViewGameBazzarRoute =
  DevicesDeviceIdViewGameBazzarRouteImport.update({
    id: '/bazzar',
    path: '/bazzar',
    getParentRoute: () => DevicesDeviceIdViewGameRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRouteWithChildren
  '/devices/$deviceId/view': typeof DevicesDeviceIdViewRouteWithChildren
  '/devices/$deviceId/view/game': typeof DevicesDeviceIdViewGameRouteWithChildren
  '/devices/$deviceId/view/game/bazzar': typeof DevicesDeviceIdViewGameBazzarRoute
  '/devices/$deviceId/view/game/home': typeof DevicesDeviceIdViewGameHomeRoute
  '/devices/$deviceId/view/game/library': typeof DevicesDeviceIdViewGameLibraryRoute
  '/devices/$deviceId/view/game/': typeof DevicesDeviceIdViewGameIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRouteWithChildren
  '/devices/$deviceId/view': typeof DevicesDeviceIdViewRouteWithChildren
  '/devices/$deviceId/view/game/bazzar': typeof DevicesDeviceIdViewGameBazzarRoute
  '/devices/$deviceId/view/game/home': typeof DevicesDeviceIdViewGameHomeRoute
  '/devices/$deviceId/view/game/library': typeof DevicesDeviceIdViewGameLibraryRoute
  '/devices/$deviceId/view/game': typeof DevicesDeviceIdViewGameIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/devices/$deviceId': typeof DevicesDeviceIdRouteWithChildren
  '/devices/$deviceId/view': typeof DevicesDeviceIdViewRouteWithChildren
  '/devices/$deviceId/view/game': typeof DevicesDeviceIdViewGameRouteWithChildren
  '/devices/$deviceId/view/game/bazzar': typeof DevicesDeviceIdViewGameBazzarRoute
  '/devices/$deviceId/view/game/home': typeof DevicesDeviceIdViewGameHomeRoute
  '/devices/$deviceId/view/game/library': typeof DevicesDeviceIdViewGameLibraryRoute
  '/devices/$deviceId/view/game/': typeof DevicesDeviceIdViewGameIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/devices/$deviceId'
    | '/devices/$deviceId/view'
    | '/devices/$deviceId/view/game'
    | '/devices/$deviceId/view/game/bazzar'
    | '/devices/$deviceId/view/game/home'
    | '/devices/$deviceId/view/game/library'
    | '/devices/$deviceId/view/game/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/devices/$deviceId'
    | '/devices/$deviceId/view'
    | '/devices/$deviceId/view/game/bazzar'
    | '/devices/$deviceId/view/game/home'
    | '/devices/$deviceId/view/game/library'
    | '/devices/$deviceId/view/game'
  id:
    | '__root__'
    | '/'
    | '/devices/$deviceId'
    | '/devices/$deviceId/view'
    | '/devices/$deviceId/view/game'
    | '/devices/$deviceId/view/game/bazzar'
    | '/devices/$deviceId/view/game/home'
    | '/devices/$deviceId/view/game/library'
    | '/devices/$deviceId/view/game/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DevicesDeviceIdRoute: typeof DevicesDeviceIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices/$deviceId': {
      id: '/devices/$deviceId'
      path: '/devices/$deviceId'
      fullPath: '/devices/$deviceId'
      preLoaderRoute: typeof DevicesDeviceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/devices/$deviceId/view': {
      id: '/devices/$deviceId/view'
      path: '/view'
      fullPath: '/devices/$deviceId/view'
      preLoaderRoute: typeof DevicesDeviceIdViewRouteImport
      parentRoute: typeof DevicesDeviceIdRoute
    }
    '/devices/$deviceId/view/game': {
      id: '/devices/$deviceId/view/game'
      path: '/game'
      fullPath: '/devices/$deviceId/view/game'
      preLoaderRoute: typeof DevicesDeviceIdViewGameRouteImport
      parentRoute: typeof DevicesDeviceIdViewRoute
    }
    '/devices/$deviceId/view/game/': {
      id: '/devices/$deviceId/view/game/'
      path: '/'
      fullPath: '/devices/$deviceId/view/game/'
      preLoaderRoute: typeof DevicesDeviceIdViewGameIndexRouteImport
      parentRoute: typeof DevicesDeviceIdViewGameRoute
    }
    '/devices/$deviceId/view/game/library': {
      id: '/devices/$deviceId/view/game/library'
      path: '/library'
      fullPath: '/devices/$deviceId/view/game/library'
      preLoaderRoute: typeof DevicesDeviceIdViewGameLibraryRouteImport
      parentRoute: typeof DevicesDeviceIdViewGameRoute
    }
    '/devices/$deviceId/view/game/home': {
      id: '/devices/$deviceId/view/game/home'
      path: '/home'
      fullPath: '/devices/$deviceId/view/game/home'
      preLoaderRoute: typeof DevicesDeviceIdViewGameHomeRouteImport
      parentRoute: typeof DevicesDeviceIdViewGameRoute
    }
    '/devices/$deviceId/view/game/bazzar': {
      id: '/devices/$deviceId/view/game/bazzar'
      path: '/bazzar'
      fullPath: '/devices/$deviceId/view/game/bazzar'
      preLoaderRoute: typeof DevicesDeviceIdViewGameBazzarRouteImport
      parentRoute: typeof DevicesDeviceIdViewGameRoute
    }
  }
}

interface DevicesDeviceIdViewGameRouteChildren {
  DevicesDeviceIdViewGameBazzarRoute: typeof DevicesDeviceIdViewGameBazzarRoute
  DevicesDeviceIdViewGameHomeRoute: typeof DevicesDeviceIdViewGameHomeRoute
  DevicesDeviceIdViewGameLibraryRoute: typeof DevicesDeviceIdViewGameLibraryRoute
  DevicesDeviceIdViewGameIndexRoute: typeof DevicesDeviceIdViewGameIndexRoute
}

const DevicesDeviceIdViewGameRouteChildren: DevicesDeviceIdViewGameRouteChildren =
  {
    DevicesDeviceIdViewGameBazzarRoute: DevicesDeviceIdViewGameBazzarRoute,
    DevicesDeviceIdViewGameHomeRoute: DevicesDeviceIdViewGameHomeRoute,
    DevicesDeviceIdViewGameLibraryRoute: DevicesDeviceIdViewGameLibraryRoute,
    DevicesDeviceIdViewGameIndexRoute: DevicesDeviceIdViewGameIndexRoute,
  }

const DevicesDeviceIdViewGameRouteWithChildren =
  DevicesDeviceIdViewGameRoute._addFileChildren(
    DevicesDeviceIdViewGameRouteChildren,
  )

interface DevicesDeviceIdViewRouteChildren {
  DevicesDeviceIdViewGameRoute: typeof DevicesDeviceIdViewGameRouteWithChildren
}

const DevicesDeviceIdViewRouteChildren: DevicesDeviceIdViewRouteChildren = {
  DevicesDeviceIdViewGameRoute: DevicesDeviceIdViewGameRouteWithChildren,
}

const DevicesDeviceIdViewRouteWithChildren =
  DevicesDeviceIdViewRoute._addFileChildren(DevicesDeviceIdViewRouteChildren)

interface DevicesDeviceIdRouteChildren {
  DevicesDeviceIdViewRoute: typeof DevicesDeviceIdViewRouteWithChildren
}

const DevicesDeviceIdRouteChildren: DevicesDeviceIdRouteChildren = {
  DevicesDeviceIdViewRoute: DevicesDeviceIdViewRouteWithChildren,
}

const DevicesDeviceIdRouteWithChildren = DevicesDeviceIdRoute._addFileChildren(
  DevicesDeviceIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DevicesDeviceIdRoute: DevicesDeviceIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
